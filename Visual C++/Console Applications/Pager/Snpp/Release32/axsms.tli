// Created by Microsoft (R) C/C++ Compiler Version 14.25.28614.0 (3070a5ce).
//
// G:\AxSms\Samples\Visual C++\Console Applications\Pager\Snpp\Release32\axsms.tli
//
// Wrapper implementations for type library ..\..\..\include\AxSms.tlb
// compiler-generated file created 03/23/22 at 04:16:43 - DO NOT EDIT!

#pragma once

//
// interface IConstants wrapper method implementations
//

inline long IConstants::GetSMPP_BIND_TRANSMITTER ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_BIND_TRANSMITTER(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_BIND_TRANSCEIVER ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_BIND_TRANSCEIVER(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_BIND_RECEIVER ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_BIND_RECEIVER(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_VERSION_33 ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_VERSION_33(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_VERSION_34 ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_VERSION_34(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_VERSION_50 ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_VERSION_50(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetTON_UNKNOWN ( ) {
    long _result = 0;
    HRESULT _hr = get_TON_UNKNOWN(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetTON_INTERNATIONAL ( ) {
    long _result = 0;
    HRESULT _hr = get_TON_INTERNATIONAL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetTON_NATIONAL ( ) {
    long _result = 0;
    HRESULT _hr = get_TON_NATIONAL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetTON_NETWORK_SPECIFIC ( ) {
    long _result = 0;
    HRESULT _hr = get_TON_NETWORK_SPECIFIC(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetTON_SUBSCRIBER_NUMBER ( ) {
    long _result = 0;
    HRESULT _hr = get_TON_SUBSCRIBER_NUMBER(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetTON_ALPHANUMERIC ( ) {
    long _result = 0;
    HRESULT _hr = get_TON_ALPHANUMERIC(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_TON_ABBREVIATED ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_TON_ABBREVIATED(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetNPI_UNKNOWN ( ) {
    long _result = 0;
    HRESULT _hr = get_NPI_UNKNOWN(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetNPI_ISDN ( ) {
    long _result = 0;
    HRESULT _hr = get_NPI_ISDN(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetNPI_DATA ( ) {
    long _result = 0;
    HRESULT _hr = get_NPI_DATA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetNPI_TELEX ( ) {
    long _result = 0;
    HRESULT _hr = get_NPI_TELEX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetNPI_NATIONAL ( ) {
    long _result = 0;
    HRESULT _hr = get_NPI_NATIONAL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetNPI_PRIVATE ( ) {
    long _result = 0;
    HRESULT _hr = get_NPI_PRIVATE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetNPI_ERMES ( ) {
    long _result = 0;
    HRESULT _hr = get_NPI_ERMES(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_NPI_INTERNET ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_NPI_INTERNET(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetNPI_LAND_MOBILE ( ) {
    long _result = 0;
    HRESULT _hr = get_NPI_LAND_MOBILE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetMULTIPART_ACCEPT ( ) {
    long _result = 0;
    HRESULT _hr = get_MULTIPART_ACCEPT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetMULTIPART_TRUNCATE ( ) {
    long _result = 0;
    HRESULT _hr = get_MULTIPART_TRUNCATE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetMULTIPART_REJECT ( ) {
    long _result = 0;
    HRESULT _hr = get_MULTIPART_REJECT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetBODYFORMAT_TEXT ( ) {
    long _result = 0;
    HRESULT _hr = get_BODYFORMAT_TEXT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetBODYFORMAT_HEX ( ) {
    long _result = 0;
    HRESULT _hr = get_BODYFORMAT_HEX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESM_2ESME_DEFAULT ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESM_2ESME_DEFAULT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESM_2ESME_DELIVERY_RECEIPT ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESM_2ESME_DELIVERY_RECEIPT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESM_2ESME_DELIVERY_ACK ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESM_2ESME_DELIVERY_ACK(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESM_2ESME_MANUAL_ACK ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESM_2ESME_MANUAL_ACK(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESM_2ESME_CONVERSATION_ABORT ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESM_2ESME_CONVERSATION_ABORT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESM_2ESME_INTERMEDIATE_DELIVERY_NOTIFY ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESM_2ESME_INTERMEDIATE_DELIVERY_NOTIFY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESM_2SMSC_MODE_DEFAULT ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESM_2SMSC_MODE_DEFAULT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESM_2SMSC_MODE_STOREFORWARD ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESM_2SMSC_MODE_STOREFORWARD(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESM_2SMSC_MODE_DATAGRAM ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESM_2SMSC_MODE_DATAGRAM(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESM_2SMSC_MODE_FORWARD ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESM_2SMSC_MODE_FORWARD(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESM_2SMSC_TYPE_DEFAULT ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESM_2SMSC_TYPE_DEFAULT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESM_2SMSC_TYPE_DELIVERY_ACK ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESM_2SMSC_TYPE_DELIVERY_ACK(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESM_2SMSC_TYPE_MANUAL_ACK ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESM_2SMSC_TYPE_MANUAL_ACK(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESM_2SMSC_FEAT_NOTHING ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESM_2SMSC_FEAT_NOTHING(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESM_2SMSC_FEAT_UDHI ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESM_2SMSC_FEAT_UDHI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESM_2SMSC_FEAT_SRP ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESM_2SMSC_FEAT_SRP(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_USEGSMENCODING_DISABLED ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_USEGSMENCODING_DISABLED(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_USEGSMENCODING_INANDOUT ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_USEGSMENCODING_INANDOUT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_USEGSMENCODING_INCOMING ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_USEGSMENCODING_INCOMING(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_USEGSMENCODING_OUTGOING ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_USEGSMENCODING_OUTGOING(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_DATACODING_ASCII ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_DATACODING_ASCII(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_DATACODING_OCTET_UNSPEC ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_DATACODING_OCTET_UNSPEC(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_DATACODING_LATIN ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_DATACODING_LATIN(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_DATACODING_JIS_KANJI ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_DATACODING_JIS_KANJI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_DATACODING_CYRILLIC ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_DATACODING_CYRILLIC(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_DATACODING_LATIN_HEBREW ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_DATACODING_LATIN_HEBREW(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_DATACODING_PICTOGRAM ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_DATACODING_PICTOGRAM(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_DATACODING_ISO_2022_JP ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_DATACODING_ISO_2022_JP(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_DATACODING_EXTENDED_KANJI_JIS ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_DATACODING_EXTENDED_KANJI_JIS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_DATACODING_KS_C_5601 ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_DATACODING_KS_C_5601(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_PRIORITYFLAG_BULK ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_PRIORITYFLAG_BULK(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_PRIORITYFLAG_NORMAL ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_PRIORITYFLAG_NORMAL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_PRIORITYFLAG_URGENT ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_PRIORITYFLAG_URGENT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_PRIORITYFLAG_VERY_URGENT ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_PRIORITYFLAG_VERY_URGENT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_MESSAGESTATE_AX_WAITRESP ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_MESSAGESTATE_AX_WAITRESP(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_MESSAGESTATE_ENROUTE ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_MESSAGESTATE_ENROUTE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_MESSAGESTATE_DELIVERED ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_MESSAGESTATE_DELIVERED(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_MESSAGESTATE_EXPIRED ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_MESSAGESTATE_EXPIRED(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_MESSAGESTATE_DELETED ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_MESSAGESTATE_DELETED(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_MESSAGESTATE_UNDELIVERABLE ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_MESSAGESTATE_UNDELIVERABLE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_MESSAGESTATE_ACCEPTED ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_MESSAGESTATE_ACCEPTED(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_MESSAGESTATE_UNKNOWN ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_MESSAGESTATE_UNKNOWN(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_MESSAGESTATE_REJECTED ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_MESSAGESTATE_REJECTED(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_MESSAGESTATE_AX_RESPERROR ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_MESSAGESTATE_AX_RESPERROR(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_MESSAGESTATE_AX_NOCREDITS ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_MESSAGESTATE_AX_NOCREDITS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_MESSAGESTATE_AX_RESPTO ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_MESSAGESTATE_AX_RESPTO(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_MESSAGESTATE_AX_RESPONDED ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_MESSAGESTATE_AX_RESPONDED(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_SESSIONSTATE_CONNECTED ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_SESSIONSTATE_CONNECTED(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_SESSIONSTATE_DISCONNECTED ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_SESSIONSTATE_DISCONNECTED(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_SESSIONSTATE_BINDING ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_SESSIONSTATE_BINDING(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_SESSIONSTATE_BOUND_TX ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_SESSIONSTATE_BOUND_TX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_SESSIONSTATE_BOUND_RX ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_SESSIONSTATE_BOUND_RX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_SESSIONSTATE_BOUND_TRX ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_SESSIONSTATE_BOUND_TRX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_TLV_DEST_ADDR_SUBUNIT ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_TLV_DEST_ADDR_SUBUNIT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_TLV_DEST_NETWORK_TYPE ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_TLV_DEST_NETWORK_TYPE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_TLV_DEST_BEARER_TYPE ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_TLV_DEST_BEARER_TYPE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_TLV_DEST_TELEMATICS_ID ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_TLV_DEST_TELEMATICS_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_TLV_SOURCE_ADDR_SUBUNIT ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_TLV_SOURCE_ADDR_SUBUNIT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_TLV_SOURCE_NETWORK_TYPE ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_TLV_SOURCE_NETWORK_TYPE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_TLV_SOURCE_BEARER_TYPE ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_TLV_SOURCE_BEARER_TYPE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_TLV_SOURCE_TELEMATICS_ID ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_TLV_SOURCE_TELEMATICS_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_TLV_QOS_TIME_TO_LIVE ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_TLV_QOS_TIME_TO_LIVE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_TLV_PAYLOAD_TYPE ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_TLV_PAYLOAD_TYPE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_TLV_ADDITIONAL_STATUS_INFO_TEXT ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_TLV_ADDITIONAL_STATUS_INFO_TEXT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_TLV_RECEIPTED_MESSAGE_ID ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_TLV_RECEIPTED_MESSAGE_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_TLV_MS_MSG_WAIT_FACILITIES ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_TLV_MS_MSG_WAIT_FACILITIES(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_TLV_PRIVACY_INDICATOR ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_TLV_PRIVACY_INDICATOR(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_TLV_SOURCE_SUBADDRESS ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_TLV_SOURCE_SUBADDRESS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_TLV_DEST_SUBADDRESS ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_TLV_DEST_SUBADDRESS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_TLV_USER_MESSAGE_REFERENCE ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_TLV_USER_MESSAGE_REFERENCE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_TLV_USER_RESPONSE_CODE ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_TLV_USER_RESPONSE_CODE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_TLV_SOURCE_PORT ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_TLV_SOURCE_PORT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_TLV_DESTINATION_PORT ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_TLV_DESTINATION_PORT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_TLV_SAR_MSG_REF_NUM ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_TLV_SAR_MSG_REF_NUM(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_TLV_LANGUAGE_INDICATOR ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_TLV_LANGUAGE_INDICATOR(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_TLV_SAR_TOTAL_SEGMENTS ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_TLV_SAR_TOTAL_SEGMENTS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_TLV_SAR_SEGMENT_SEQNUM ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_TLV_SAR_SEGMENT_SEQNUM(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_TLV_SC_INTERFACE_VERSION ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_TLV_SC_INTERFACE_VERSION(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_TLV_CALLBACK_NUM_PRES_IND ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_TLV_CALLBACK_NUM_PRES_IND(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_TLV_CALLBACK_NUM_ATAG ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_TLV_CALLBACK_NUM_ATAG(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_TLV_NUMBER_OF_MESSAGES ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_TLV_NUMBER_OF_MESSAGES(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_TLV_CALLBACK_NUM ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_TLV_CALLBACK_NUM(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_TLV_DPF_RESULT ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_TLV_DPF_RESULT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_TLV_SET_DPF ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_TLV_SET_DPF(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_TLV_MS_AVAILABILITY_STATUS ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_TLV_MS_AVAILABILITY_STATUS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_TLV_NETWORK_ERROR_CODE ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_TLV_NETWORK_ERROR_CODE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_TLV_MESSAGE_PAYLOAD ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_TLV_MESSAGE_PAYLOAD(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_TLV_DELIVERY_FAILURE_REASON ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_TLV_DELIVERY_FAILURE_REASON(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_TLV_MORE_MESSAGES_TO_SEND ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_TLV_MORE_MESSAGES_TO_SEND(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_TLV_MESSAGE_STATE ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_TLV_MESSAGE_STATE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_TLV_CONGESTION_STATE ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_TLV_CONGESTION_STATE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_TLV_USSD_SERVICE_OP ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_TLV_USSD_SERVICE_OP(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_TLV_DISPLAY_TIME ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_TLV_DISPLAY_TIME(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_TLV_SMS_SIGNAL ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_TLV_SMS_SIGNAL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_TLV_MS_VALIDITY ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_TLV_MS_VALIDITY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_TLV_ALERT_ON_MESSAGE_DELIVERY ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_TLV_ALERT_ON_MESSAGE_DELIVERY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_TLV_ITS_REPLY_TYPE ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_TLV_ITS_REPLY_TYPE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_TLV_ITS_SESSION_INFO ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_TLV_ITS_SESSION_INFO(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_MULTIPARTMODE_UDH ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_MULTIPARTMODE_UDH(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_MULTIPARTMODE_UDH16BIT ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_MULTIPARTMODE_UDH16BIT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_MULTIPARTMODE_SARTLV ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_MULTIPARTMODE_SARTLV(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_MULTIPARTMODE_PAYLOADTLV ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_MULTIPARTMODE_PAYLOADTLV(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_LOGLEVEL_MINIMAL ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_LOGLEVEL_MINIMAL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_LOGLEVEL_NORMAL ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_LOGLEVEL_NORMAL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_LOGLEVEL_VERBOSE ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_LOGLEVEL_VERBOSE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_SUBMITMODE_SUBMITSM ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_SUBMITMODE_SUBMITSM(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_SUBMITMODE_DATASM ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_SUBMITMODE_DATASM(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_DELIVERMODE_DELIVERSM ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_DELIVERMODE_DELIVERSM(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_DELIVERMODE_DATASM ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_DELIVERMODE_DATASM(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_USEGSMENCODING_INCHARSET ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_USEGSMENCODING_INCHARSET(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_USEGSMENCODING_OUTCHARSET ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_USEGSMENCODING_OUTCHARSET(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_USEGSMENCODING_INOUTCHARS ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_USEGSMENCODING_INOUTCHARS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_IPVERSION_4 ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_IPVERSION_4(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_IPVERSION_6 ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_IPVERSION_6(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_IPVERSION_BOTH ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_IPVERSION_BOTH(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_CERTIFICATESTORE_LOCALMACHINE ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_CERTIFICATESTORE_LOCALMACHINE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_CERTIFICATESTORE_CURRENTUSER ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_CERTIFICATESTORE_CURRENTUSER(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESME_ROK ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESME_ROK(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESME_RINVMSGLEN ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESME_RINVMSGLEN(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESME_RINVCMDLEN ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESME_RINVCMDLEN(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESME_RINVCMDID ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESME_RINVCMDID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESME_RINVBNDSTS ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESME_RINVBNDSTS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESME_RALYBND ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESME_RALYBND(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESME_RINVPRTFLG ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESME_RINVPRTFLG(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESME_RINVREGDLVFLG ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESME_RINVREGDLVFLG(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESME_RSYSERR ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESME_RSYSERR(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESME_RINVSRCADR ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESME_RINVSRCADR(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESME_RINVDSTADR ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESME_RINVDSTADR(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESME_RINVMSGID ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESME_RINVMSGID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESME_RBINDFAIL ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESME_RBINDFAIL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESME_RINVPASWD ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESME_RINVPASWD(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESME_RINVSYSID ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESME_RINVSYSID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESME_RCANCELFAIL ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESME_RCANCELFAIL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESME_RREPLACEFAIL ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESME_RREPLACEFAIL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESME_RMSGQFUL ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESME_RMSGQFUL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESME_RINVSERTYP ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESME_RINVSERTYP(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESME_RINVNUMDESTS ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESME_RINVNUMDESTS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESME_RINVDLNAME ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESME_RINVDLNAME(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESME_RINVDESTFLAG ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESME_RINVDESTFLAG(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESME_RINVSUBREP ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESME_RINVSUBREP(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESME_RINVESMCLASS ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESME_RINVESMCLASS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESME_RCNTSUBDL ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESME_RCNTSUBDL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESME_RSUBMITFAIL ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESME_RSUBMITFAIL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESME_RINVSRCTON ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESME_RINVSRCTON(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESME_RINVSRCNPI ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESME_RINVSRCNPI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESME_RINVDSTTON ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESME_RINVDSTTON(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESME_RINVDSTNPI ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESME_RINVDSTNPI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESME_RINVSYSTYP ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESME_RINVSYSTYP(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESME_RINVREPFLAG ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESME_RINVREPFLAG(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESME_RINVNUMMSGS ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESME_RINVNUMMSGS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESME_RTHROTTLED ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESME_RTHROTTLED(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESME_RINVSCHED ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESME_RINVSCHED(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESME_RINVEXPIRY ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESME_RINVEXPIRY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESME_RINVDFTMSGID ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESME_RINVDFTMSGID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESME_RX_T_APPN ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESME_RX_T_APPN(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESME_RX_P_APPN ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESME_RX_P_APPN(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESME_RX_R_APPN ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESME_RX_R_APPN(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESME_RQUERYFAIL ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESME_RQUERYFAIL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESME_RINVOPTPARSTREAM ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESME_RINVOPTPARSTREAM(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESME_ROPTPARNOTALLWD ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESME_ROPTPARNOTALLWD(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESME_RINVPARLEN ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESME_RINVPARLEN(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESME_RMISSINGOPTPARAM ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESME_RMISSINGOPTPARAM(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESME_RINVOPTPARAMVAL ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESME_RINVOPTPARAMVAL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESME_RDELIVERYFAILURE ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESME_RDELIVERYFAILURE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMPP_ESME_RUNKNOWNERR ( ) {
    long _result = 0;
    HRESULT _hr = get_SMPP_ESME_RUNKNOWNERR(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_STATUS_MESSAGE_DELIVERED_SUCCESSFULLY ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_STATUS_MESSAGE_DELIVERED_SUCCESSFULLY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_STATUS_FORWARDED_STATUS_UNKNOWN ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_STATUS_FORWARDED_STATUS_UNKNOWN(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_STATUS_REPLACED ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_STATUS_REPLACED(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_STATUS_CONGESTION_STILL_TRYING ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_STATUS_CONGESTION_STILL_TRYING(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_STATUS_RECIPIENT_BUSY_STILL_TRYING ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_STATUS_RECIPIENT_BUSY_STILL_TRYING(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_STATUS_NO_RESPONSE_STILL_TRYING ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_STATUS_NO_RESPONSE_STILL_TRYING(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_STATUS_SERVICE_REJECTED_STILL_TRYING ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_STATUS_SERVICE_REJECTED_STILL_TRYING(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_STATUS_QOS_NOT_AVAILABLE_STILL_TRYING ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_STATUS_QOS_NOT_AVAILABLE_STILL_TRYING(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_STATUS_RECIPIENT_ERROR_STILL_TRYING ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_STATUS_RECIPIENT_ERROR_STILL_TRYING(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_STATUS_RPC_ERROR ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_STATUS_RPC_ERROR(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_STATUS_INCOMPATIBLE_DESTINATION ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_STATUS_INCOMPATIBLE_DESTINATION(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_STATUS_CONNECTION_REJECTED ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_STATUS_CONNECTION_REJECTED(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_STATUS_NOT_OBTAINABLE ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_STATUS_NOT_OBTAINABLE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_STATUS_QOS_NOT_AVAILABLE ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_STATUS_QOS_NOT_AVAILABLE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_STATUS_NO_INTERNETWORKING_AVAILABLE ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_STATUS_NO_INTERNETWORKING_AVAILABLE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_STATUS_MESSAGE_EXPIRED ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_STATUS_MESSAGE_EXPIRED(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_STATUS_MESSAGE_DELETED_BY_SENDER ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_STATUS_MESSAGE_DELETED_BY_SENDER(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_STATUS_MESSAGE_DELETED_BY_SMSC ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_STATUS_MESSAGE_DELETED_BY_SMSC(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_STATUS_DOES_NOT_EXIST ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_STATUS_DOES_NOT_EXIST(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_STORAGETYPE_SIM ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_STORAGETYPE_SIM(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_STORAGETYPE_MEMORY ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_STORAGETYPE_MEMORY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_STORAGETYPE_COMBINED ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_STORAGETYPE_COMBINED(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_STORAGETYPE_STATUS ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_STORAGETYPE_STATUS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_STORAGETYPE_ALL ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_STORAGETYPE_ALL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_FO_REPLYPATH_EXISTS ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_FO_REPLYPATH_EXISTS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_FO_UDHI ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_FO_UDHI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_FO_STATUS_REPORT ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_FO_STATUS_REPORT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_FO_VALIDITY_NONE ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_FO_VALIDITY_NONE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_FO_VALIDITY_RELATIVE ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_FO_VALIDITY_RELATIVE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_FO_VALIDITY_ENHANCED ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_FO_VALIDITY_ENHANCED(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_FO_VALIDITY_ABSOLUTE ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_FO_VALIDITY_ABSOLUTE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_FO_REJECT_DUPLICATES ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_FO_REJECT_DUPLICATES(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_FO_SUBMIT_SM ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_FO_SUBMIT_SM(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_FO_DELIVER_SM ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_FO_DELIVER_SM(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_FO_STATUS_SM ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_FO_STATUS_SM(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetDATACODING_DEFAULT ( ) {
    long _result = 0;
    HRESULT _hr = get_DATACODING_DEFAULT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetDATACODING_8BIT_DATA ( ) {
    long _result = 0;
    HRESULT _hr = get_DATACODING_8BIT_DATA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetDATACODING_UNICODE ( ) {
    long _result = 0;
    HRESULT _hr = get_DATACODING_UNICODE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_DATACODING_ME_SPECIFIC ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_DATACODING_ME_SPECIFIC(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_DATACODING_SIM_SPECIFIC ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_DATACODING_SIM_SPECIFIC(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_DATACODING_TE_SPECIFIC ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_DATACODING_TE_SPECIFIC(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetDATACODING_FLASH ( ) {
    long _result = 0;
    HRESULT _hr = get_DATACODING_FLASH(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_BAUDRATE_110 ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_BAUDRATE_110(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_BAUDRATE_300 ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_BAUDRATE_300(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_BAUDRATE_600 ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_BAUDRATE_600(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_BAUDRATE_1200 ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_BAUDRATE_1200(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_BAUDRATE_2400 ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_BAUDRATE_2400(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_BAUDRATE_4800 ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_BAUDRATE_4800(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_BAUDRATE_9600 ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_BAUDRATE_9600(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_BAUDRATE_14400 ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_BAUDRATE_14400(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_BAUDRATE_19200 ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_BAUDRATE_19200(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_BAUDRATE_38400 ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_BAUDRATE_38400(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_BAUDRATE_56000 ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_BAUDRATE_56000(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_BAUDRATE_57600 ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_BAUDRATE_57600(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_BAUDRATE_64000 ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_BAUDRATE_64000(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_BAUDRATE_115200 ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_BAUDRATE_115200(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_BAUDRATE_128000 ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_BAUDRATE_128000(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_BAUDRATE_230400 ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_BAUDRATE_230400(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_BAUDRATE_256000 ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_BAUDRATE_256000(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_BAUDRATE_460800 ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_BAUDRATE_460800(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_BAUDRATE_921600 ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_BAUDRATE_921600(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_BAUDRATE_DEFAULT ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_BAUDRATE_DEFAULT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_MESSAGESTATE_RECEIVED_UNREAD ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_MESSAGESTATE_RECEIVED_UNREAD(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_MESSAGESTATE_RECEIVED_READ ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_MESSAGESTATE_RECEIVED_READ(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_MESSAGESTATE_STORED_UNSENT ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_MESSAGESTATE_STORED_UNSENT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_MESSAGESTATE_STORED_SENT ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_MESSAGESTATE_STORED_SENT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_MESSAGESTATE_ALL ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_MESSAGESTATE_ALL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_MESSAGEFORMAT_PDU ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_MESSAGEFORMAT_PDU(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_MESSAGEFORMAT_TEXT ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_MESSAGEFORMAT_TEXT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_MESSAGEFORMAT_AUTO ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_MESSAGEFORMAT_AUTO(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IConstants::GetHTTP_PLACEHOLDER_USERTAG ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HTTP_PLACEHOLDER_USERTAG(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetHTTP_PLACEHOLDER_TOADDRESS ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HTTP_PLACEHOLDER_TOADDRESS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetHTTP_PLACEHOLDER_FROMADDRESS ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HTTP_PLACEHOLDER_FROMADDRESS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetHTTP_PLACEHOLDER_BODY ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HTTP_PLACEHOLDER_BODY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetHTTP_PLACEHOLDER_BODYASHEX ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HTTP_PLACEHOLDER_BODYASHEX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetHTTP_PLACEHOLDER_BODYASBASE64 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HTTP_PLACEHOLDER_BODYASBASE64(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetHTTP_PLACEHOLDER_DELIVERYREPORT ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HTTP_PLACEHOLDER_DELIVERYREPORT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetHTTP_PLACEHOLDER_TOADDRESSTON ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HTTP_PLACEHOLDER_TOADDRESSTON(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetHTTP_PLACEHOLDER_TOADDRESSNPI ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HTTP_PLACEHOLDER_TOADDRESSNPI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetHTTP_PLACEHOLDER_FROMADDRESSTON ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HTTP_PLACEHOLDER_FROMADDRESSTON(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetHTTP_PLACEHOLDER_FROMADDRESSNPI ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HTTP_PLACEHOLDER_FROMADDRESSNPI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetHTTP_PLACEHOLDER_PROTOCOLID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HTTP_PLACEHOLDER_PROTOCOLID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetHTTP_PLACEHOLDER_UDHI ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HTTP_PLACEHOLDER_UDHI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetHTTP_PLACEHOLDER_DATACODING ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HTTP_PLACEHOLDER_DATACODING(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetHTTP_PLACEHOLDER_USERTAGSTRING ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HTTP_PLACEHOLDER_USERTAGSTRING(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long IConstants::GetGSM_PREFIXSMSC_ENABLED ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_PREFIXSMSC_ENABLED(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_PREFIXSMSC_DISABLED ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_PREFIXSMSC_DISABLED(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_PREFIXSMSC_AUTO ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_PREFIXSMSC_AUTO(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_TCPMODE_RAW ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_TCPMODE_RAW(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_TCPMODE_TELNET ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_TCPMODE_TELNET(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetGSM_TCPMODE_TELNET_WITH_COMCONTROL ( ) {
    long _result = 0;
    HRESULT _hr = get_GSM_TCPMODE_TELNET_WITH_COMCONTROL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetWAPPUSH_SIGNAL_NONE ( ) {
    long _result = 0;
    HRESULT _hr = get_WAPPUSH_SIGNAL_NONE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetWAPPUSH_SIGNAL_LOW ( ) {
    long _result = 0;
    HRESULT _hr = get_WAPPUSH_SIGNAL_LOW(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetWAPPUSH_SIGNAL_MEDIUM ( ) {
    long _result = 0;
    HRESULT _hr = get_WAPPUSH_SIGNAL_MEDIUM(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetWAPPUSH_SIGNAL_HIGH ( ) {
    long _result = 0;
    HRESULT _hr = get_WAPPUSH_SIGNAL_HIGH(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetWAPPUSH_SIGNAL_DELETE ( ) {
    long _result = 0;
    HRESULT _hr = get_WAPPUSH_SIGNAL_DELETE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetDIALUP_PROVIDERTYPE_UCP ( ) {
    long _result = 0;
    HRESULT _hr = get_DIALUP_PROVIDERTYPE_UCP(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetDIALUP_PROVIDERTYPE_TAP_DEFAULT ( ) {
    long _result = 0;
    HRESULT _hr = get_DIALUP_PROVIDERTYPE_TAP_DEFAULT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetDIALUP_PROVIDERTYPE_TAP_NOLF ( ) {
    long _result = 0;
    HRESULT _hr = get_DIALUP_PROVIDERTYPE_TAP_NOLF(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetDIALUP_PROVIDERTYPE_TAP_NOEOT ( ) {
    long _result = 0;
    HRESULT _hr = get_DIALUP_PROVIDERTYPE_TAP_NOEOT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetDIALUP_DIALMODE_TONE ( ) {
    long _result = 0;
    HRESULT _hr = get_DIALUP_DIALMODE_TONE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetDIALUP_DIALMODE_PULSE ( ) {
    long _result = 0;
    HRESULT _hr = get_DIALUP_DIALMODE_PULSE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetDIALUP_DEVICESETTINGS_DEFAULT ( ) {
    long _result = 0;
    HRESULT _hr = get_DIALUP_DEVICESETTINGS_DEFAULT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetDIALUP_DEVICESETTINGS_8N1 ( ) {
    long _result = 0;
    HRESULT _hr = get_DIALUP_DEVICESETTINGS_8N1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetDIALUP_DEVICESETTINGS_7E1 ( ) {
    long _result = 0;
    HRESULT _hr = get_DIALUP_DEVICESETTINGS_7E1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetLANGUAGE_LOCKINGSHIFT_BASIC ( ) {
    long _result = 0;
    HRESULT _hr = get_LANGUAGE_LOCKINGSHIFT_BASIC(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetLANGUAGE_LOCKINGSHIFT_TURKISH ( ) {
    long _result = 0;
    HRESULT _hr = get_LANGUAGE_LOCKINGSHIFT_TURKISH(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetLANGUAGE_LOCKINGSHIFT_PORTUGUESE ( ) {
    long _result = 0;
    HRESULT _hr = get_LANGUAGE_LOCKINGSHIFT_PORTUGUESE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetLANGUAGE_LOCKINGSHIFT_SPANISH ( ) {
    long _result = 0;
    HRESULT _hr = get_LANGUAGE_LOCKINGSHIFT_SPANISH(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetLANGUAGE_LOCKINGSHIFT_BENGALI ( ) {
    long _result = 0;
    HRESULT _hr = get_LANGUAGE_LOCKINGSHIFT_BENGALI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetLANGUAGE_LOCKINGSHIFT_GUJARATI ( ) {
    long _result = 0;
    HRESULT _hr = get_LANGUAGE_LOCKINGSHIFT_GUJARATI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetLANGUAGE_LOCKINGSHIFT_HINDI ( ) {
    long _result = 0;
    HRESULT _hr = get_LANGUAGE_LOCKINGSHIFT_HINDI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetLANGUAGE_LOCKINGSHIFT_KANNADA ( ) {
    long _result = 0;
    HRESULT _hr = get_LANGUAGE_LOCKINGSHIFT_KANNADA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetLANGUAGE_LOCKINGSHIFT_MALAYALAM ( ) {
    long _result = 0;
    HRESULT _hr = get_LANGUAGE_LOCKINGSHIFT_MALAYALAM(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetLANGUAGE_LOCKINGSHIFT_ORIYA ( ) {
    long _result = 0;
    HRESULT _hr = get_LANGUAGE_LOCKINGSHIFT_ORIYA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetLANGUAGE_LOCKINGSHIFT_PUNJABI ( ) {
    long _result = 0;
    HRESULT _hr = get_LANGUAGE_LOCKINGSHIFT_PUNJABI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetLANGUAGE_LOCKINGSHIFT_TAMIL ( ) {
    long _result = 0;
    HRESULT _hr = get_LANGUAGE_LOCKINGSHIFT_TAMIL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetLANGUAGE_LOCKINGSHIFT_TELUGU ( ) {
    long _result = 0;
    HRESULT _hr = get_LANGUAGE_LOCKINGSHIFT_TELUGU(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetLANGUAGE_LOCKINGSHIFT_URDU ( ) {
    long _result = 0;
    HRESULT _hr = get_LANGUAGE_LOCKINGSHIFT_URDU(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetLANGUAGE_SINGLESHIFT_BASIC ( ) {
    long _result = 0;
    HRESULT _hr = get_LANGUAGE_SINGLESHIFT_BASIC(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetLANGUAGE_SINGLESHIFT_TURKISH ( ) {
    long _result = 0;
    HRESULT _hr = get_LANGUAGE_SINGLESHIFT_TURKISH(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetLANGUAGE_SINGLESHIFT_SPANISH ( ) {
    long _result = 0;
    HRESULT _hr = get_LANGUAGE_SINGLESHIFT_SPANISH(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetLANGUAGE_SINGLESHIFT_PORTUGUESE ( ) {
    long _result = 0;
    HRESULT _hr = get_LANGUAGE_SINGLESHIFT_PORTUGUESE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetLANGUAGE_SINGLESHIFT_BENGALI ( ) {
    long _result = 0;
    HRESULT _hr = get_LANGUAGE_SINGLESHIFT_BENGALI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetLANGUAGE_SINGLESHIFT_GUJARATI ( ) {
    long _result = 0;
    HRESULT _hr = get_LANGUAGE_SINGLESHIFT_GUJARATI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetLANGUAGE_SINGLESHIFT_HINDI ( ) {
    long _result = 0;
    HRESULT _hr = get_LANGUAGE_SINGLESHIFT_HINDI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetLANGUAGE_SINGLESHIFT_KANNADA ( ) {
    long _result = 0;
    HRESULT _hr = get_LANGUAGE_SINGLESHIFT_KANNADA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetLANGUAGE_SINGLESHIFT_MALAYALAM ( ) {
    long _result = 0;
    HRESULT _hr = get_LANGUAGE_SINGLESHIFT_MALAYALAM(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetLANGUAGE_SINGLESHIFT_ORIYA ( ) {
    long _result = 0;
    HRESULT _hr = get_LANGUAGE_SINGLESHIFT_ORIYA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetLANGUAGE_SINGLESHIFT_PUNJABI ( ) {
    long _result = 0;
    HRESULT _hr = get_LANGUAGE_SINGLESHIFT_PUNJABI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetLANGUAGE_SINGLESHIFT_TAMIL ( ) {
    long _result = 0;
    HRESULT _hr = get_LANGUAGE_SINGLESHIFT_TAMIL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetLANGUAGE_SINGLESHIFT_TELUGU ( ) {
    long _result = 0;
    HRESULT _hr = get_LANGUAGE_SINGLESHIFT_TELUGU(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetLANGUAGE_SINGLESHIFT_URDU ( ) {
    long _result = 0;
    HRESULT _hr = get_LANGUAGE_SINGLESHIFT_URDU(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IConstants::SmppBindToString ( long lVal ) {
    BSTR _result = 0;
    HRESULT _hr = raw_SmppBindToString(lVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::SmppVersionToString ( long lVal ) {
    BSTR _result = 0;
    HRESULT _hr = raw_SmppVersionToString(lVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::TonToString ( long lVal ) {
    BSTR _result = 0;
    HRESULT _hr = raw_TonToString(lVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::NpiToString ( long lVal ) {
    BSTR _result = 0;
    HRESULT _hr = raw_NpiToString(lVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::MultipartToString ( long lVal ) {
    BSTR _result = 0;
    HRESULT _hr = raw_MultipartToString(lVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::BodyformatToString ( long lVal ) {
    BSTR _result = 0;
    HRESULT _hr = raw_BodyformatToString(lVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::SmppEsm2SmscToString ( long lVal ) {
    BSTR _result = 0;
    HRESULT _hr = raw_SmppEsm2SmscToString(lVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::SmppEsm2EsmeToString ( long lVal ) {
    BSTR _result = 0;
    HRESULT _hr = raw_SmppEsm2EsmeToString(lVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::SmppUseGsmEncodingToString ( long lVal ) {
    BSTR _result = 0;
    HRESULT _hr = raw_SmppUseGsmEncodingToString(lVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::SmppDataCodingToString ( long lVal ) {
    BSTR _result = 0;
    HRESULT _hr = raw_SmppDataCodingToString(lVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::SmppPriorityFlagToString ( long lVal ) {
    BSTR _result = 0;
    HRESULT _hr = raw_SmppPriorityFlagToString(lVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::SmppMessageStateToString ( long lVal ) {
    BSTR _result = 0;
    HRESULT _hr = raw_SmppMessageStateToString(lVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::SmppSessionStateToString ( long lVal ) {
    BSTR _result = 0;
    HRESULT _hr = raw_SmppSessionStateToString(lVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::SmppTlvToString ( long lVal ) {
    BSTR _result = 0;
    HRESULT _hr = raw_SmppTlvToString(lVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::SmppMultipartModeToString ( long lVal ) {
    BSTR _result = 0;
    HRESULT _hr = raw_SmppMultipartModeToString(lVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::SmppSubmitModeToString ( long lVal ) {
    BSTR _result = 0;
    HRESULT _hr = raw_SmppSubmitModeToString(lVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::SmppEsmeToString ( long lVal ) {
    BSTR _result = 0;
    HRESULT _hr = raw_SmppEsmeToString(lVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GsmStatusToString ( long lVal ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GsmStatusToString(lVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GsmStorageTypeToString ( long lVal ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GsmStorageTypeToString(lVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GsmFoToString ( long lVal ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GsmFoToString(lVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GsmDataCodingToString ( long lVal ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GsmDataCodingToString(lVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GsmBaudrateToString ( long lVal ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GsmBaudrateToString(lVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GsmMessageStateToString ( long lVal ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GsmMessageStateToString(lVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GsmMessageFormatToString ( long lVal ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GsmMessageFormatToString(lVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GsmPrefixSmscToString ( long lVal ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GsmPrefixSmscToString(lVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::WapPushSignalToString ( long lVal ) {
    BSTR _result = 0;
    HRESULT _hr = raw_WapPushSignalToString(lVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::DialupProviderTypeToString ( long lVal ) {
    BSTR _result = 0;
    HRESULT _hr = raw_DialupProviderTypeToString(lVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::DialupDialModeToString ( long lVal ) {
    BSTR _result = 0;
    HRESULT _hr = raw_DialupDialModeToString(lVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::DialupDeviceSettingsToString ( long lVal ) {
    BSTR _result = 0;
    HRESULT _hr = raw_DialupDeviceSettingsToString(lVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GsmTcpModeToString ( long lVal ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GsmTcpModeToString(lVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::LanguageLockingShiftToString ( long lVal ) {
    BSTR _result = 0;
    HRESULT _hr = raw_LanguageLockingShiftToString(lVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::LanguageSingleShiftToString ( long lVal ) {
    BSTR _result = 0;
    HRESULT _hr = raw_LanguageSingleShiftToString(lVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface ITlv wrapper method implementations
//

inline HRESULT ITlv::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long ITlv::GetTag ( ) {
    long _result = 0;
    HRESULT _hr = get_Tag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITlv::PutTag ( long Val ) {
    HRESULT _hr = put_Tag(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ITlv::GetValueAsString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ValueAsString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ITlv::PutValueAsString ( _bstr_t Val ) {
    HRESULT _hr = put_ValueAsString(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ITlv::GetValueAsHexString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ValueAsHexString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ITlv::PutValueAsHexString ( _bstr_t Val ) {
    HRESULT _hr = put_ValueAsHexString(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ITlv::GetValueAsInt32 ( ) {
    long _result = 0;
    HRESULT _hr = get_ValueAsInt32(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITlv::PutValueAsInt32 ( long Val ) {
    HRESULT _hr = put_ValueAsInt32(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ITlv::GetValueAsInt16 ( ) {
    long _result = 0;
    HRESULT _hr = get_ValueAsInt16(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITlv::PutValueAsInt16 ( long Val ) {
    HRESULT _hr = put_ValueAsInt16(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ITlv::GetValueAsInt8 ( ) {
    long _result = 0;
    HRESULT _hr = get_ValueAsInt8(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITlv::PutValueAsInt8 ( long Val ) {
    HRESULT _hr = put_ValueAsInt8(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ITlv::GetLength ( ) {
    long _result = 0;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IMessage wrapper method implementations
//

inline HRESULT IMessage::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IMessage::GetUserTag ( ) {
    long _result = 0;
    HRESULT _hr = get_UserTag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IMessage::PutUserTag ( long Val ) {
    HRESULT _hr = put_UserTag(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IMessage::GetToAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ToAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IMessage::PutToAddress ( _bstr_t Val ) {
    HRESULT _hr = put_ToAddress(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IMessage::GetFromAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FromAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IMessage::PutFromAddress ( _bstr_t Val ) {
    HRESULT _hr = put_FromAddress(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IMessage::GetBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IMessage::PutBody ( _bstr_t Val ) {
    HRESULT _hr = put_Body(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IMessage::GetRequestDeliveryReport ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RequestDeliveryReport(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IMessage::PutRequestDeliveryReport ( VARIANT_BOOL Val ) {
    HRESULT _hr = put_RequestDeliveryReport(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IMessage::GetToAddressTON ( ) {
    long _result = 0;
    HRESULT _hr = get_ToAddressTON(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IMessage::PutToAddressTON ( long Val ) {
    HRESULT _hr = put_ToAddressTON(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IMessage::GetToAddressNPI ( ) {
    long _result = 0;
    HRESULT _hr = get_ToAddressNPI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IMessage::PutToAddressNPI ( long Val ) {
    HRESULT _hr = put_ToAddressNPI(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IMessage::GetFromAddressTON ( ) {
    long _result = 0;
    HRESULT _hr = get_FromAddressTON(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IMessage::PutFromAddressTON ( long Val ) {
    HRESULT _hr = put_FromAddressTON(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IMessage::GetFromAddressNPI ( ) {
    long _result = 0;
    HRESULT _hr = get_FromAddressNPI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IMessage::PutFromAddressNPI ( long Val ) {
    HRESULT _hr = put_FromAddressNPI(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IMessage::GetProtocolId ( ) {
    long _result = 0;
    HRESULT _hr = get_ProtocolId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IMessage::PutProtocolId ( long Val ) {
    HRESULT _hr = put_ProtocolId(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IMessage::GetValidityPeriod ( ) {
    long _result = 0;
    HRESULT _hr = get_ValidityPeriod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IMessage::PutValidityPeriod ( long Val ) {
    HRESULT _hr = put_ValidityPeriod(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IMessage::GetReference ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Reference(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IMessage::PutReference ( _bstr_t Val ) {
    HRESULT _hr = put_Reference(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IMessage::GetDataCoding ( ) {
    long _result = 0;
    HRESULT _hr = get_DataCoding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IMessage::PutDataCoding ( long Val ) {
    HRESULT _hr = put_DataCoding(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IMessage::GetBodyFormat ( ) {
    long _result = 0;
    HRESULT _hr = get_BodyFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IMessage::PutBodyFormat ( long Val ) {
    HRESULT _hr = put_BodyFormat(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IMessage::GetTotalParts ( ) {
    long _result = 0;
    HRESULT _hr = get_TotalParts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IMessage::GetPartNumber ( ) {
    long _result = 0;
    HRESULT _hr = get_PartNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IMessage::GetReceiveTime ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReceiveTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long IMessage::GetReceiveTimeInSeconds ( ) {
    long _result = 0;
    HRESULT _hr = get_ReceiveTimeInSeconds(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IMessage::GetHasUdh ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasUdh(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IMessage::PutHasUdh ( VARIANT_BOOL Val ) {
    HRESULT _hr = put_HasUdh(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IMessage::GetIncomplete ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Incomplete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IMessage::GetMultipartRef ( ) {
    long _result = 0;
    HRESULT _hr = get_MultipartRef(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IMessage::PutLanguageLockingShift ( long Val ) {
    HRESULT _hr = put_LanguageLockingShift(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IMessage::GetLanguageLockingShift ( ) {
    long _result = 0;
    HRESULT _hr = get_LanguageLockingShift(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IMessage::PutLanguageSingleShift ( long Val ) {
    HRESULT _hr = put_LanguageSingleShift(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IMessage::GetLanguageSingleShift ( ) {
    long _result = 0;
    HRESULT _hr = get_LanguageSingleShift(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IMessage::GetGsmFirstOctet ( ) {
    long _result = 0;
    HRESULT _hr = get_GsmFirstOctet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IMessage::PutGsmFirstOctet ( long Val ) {
    HRESULT _hr = put_GsmFirstOctet(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IMessage::GetGsmSmscAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_GsmSmscAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long IMessage::GetGsmSmscAddressTON ( ) {
    long _result = 0;
    HRESULT _hr = get_GsmSmscAddressTON(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IMessage::GetGsmSmscAddressNPI ( ) {
    long _result = 0;
    HRESULT _hr = get_GsmSmscAddressNPI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IMessage::GetGsmMemoryIndex ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_GsmMemoryIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IMessage::PutGsmMemoryIndex ( _bstr_t Val ) {
    HRESULT _hr = put_GsmMemoryIndex(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IMessage::GetGsmMemoryLocation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_GsmMemoryLocation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IMessage::PutGsmMemoryLocation ( _bstr_t Val ) {
    HRESULT _hr = put_GsmMemoryLocation(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IMessage::GetSmppPriority ( ) {
    long _result = 0;
    HRESULT _hr = get_SmppPriority(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IMessage::PutSmppPriority ( long Val ) {
    HRESULT _hr = put_SmppPriority(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IMessage::GetSmppServiceType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SmppServiceType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IMessage::PutSmppServiceType ( _bstr_t Val ) {
    HRESULT _hr = put_SmppServiceType(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IMessage::GetSmppEsmClass ( ) {
    long _result = 0;
    HRESULT _hr = get_SmppEsmClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IMessage::PutSmppEsmClass ( long Val ) {
    HRESULT _hr = put_SmppEsmClass(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IMessage::GetSmppIsDeliveryReport ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SmppIsDeliveryReport(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IMessage::PutSmppIsDeliveryReport ( VARIANT_BOOL Val ) {
    HRESULT _hr = put_SmppIsDeliveryReport(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IMessage::GetSmppStatus ( ) {
    long _result = 0;
    HRESULT _hr = get_SmppStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IMessage::PutSmppStatus ( long Val ) {
    HRESULT _hr = put_SmppStatus(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IMessage::GetSmppError ( ) {
    long _result = 0;
    HRESULT _hr = get_SmppError(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IMessage::PutSmppError ( long Val ) {
    HRESULT _hr = put_SmppError(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IMessage::GetSmppCommandStatus ( ) {
    long _result = 0;
    HRESULT _hr = get_SmppCommandStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IMessage::PutSmppCommandStatus ( long Val ) {
    HRESULT _hr = put_SmppCommandStatus(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IMessage::PutSmppSequenceNumber ( long Val ) {
    HRESULT _hr = put_SmppSequenceNumber(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IMessage::GetSmppSequenceNumber ( ) {
    long _result = 0;
    HRESULT _hr = get_SmppSequenceNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IMessage::GetSmppServerSubmitDate ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SmppServerSubmitDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IMessage::GetSmppServerFinalDate ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SmppServerFinalDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IMessage::GetUserTagString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserTagString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IMessage::PutUserTagString ( _bstr_t Val ) {
    HRESULT _hr = put_UserTagString(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IMessage::SmppAddTlv ( struct ITlv * Tlv ) {
    HRESULT _hr = raw_SmppAddTlv(Tlv);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ITlvPtr IMessage::SmppGetFirstTlv ( ) {
    struct ITlv * _result = 0;
    HRESULT _hr = raw_SmppGetFirstTlv(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITlvPtr(_result, false);
}

inline ITlvPtr IMessage::SmppGetNextTlv ( ) {
    struct ITlv * _result = 0;
    HRESULT _hr = raw_SmppGetNextTlv(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITlvPtr(_result, false);
}

inline ITlvPtr IMessage::SmppGetTlv ( long lTag ) {
    struct ITlv * _result = 0;
    HRESULT _hr = raw_SmppGetTlv(lTag, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITlvPtr(_result, false);
}

inline HRESULT IMessage::SmppDeleteTlv ( long lTag ) {
    HRESULT _hr = raw_SmppDeleteTlv(lTag);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IMessage::GetLastError ( ) {
    long _result = 0;
    HRESULT _hr = get_LastError(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IMessage::GetErrorDescription ( long Error ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetErrorDescription(Error, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IMessage::ToJSon ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_ToJSon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IMessage::FromJSon ( _bstr_t Val ) {
    HRESULT _hr = raw_FromJSon(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGsmDeliveryReport wrapper method implementations
//

inline HRESULT IGsmDeliveryReport::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IGsmDeliveryReport::GetReference ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Reference(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long IGsmDeliveryReport::GetUserTag ( ) {
    long _result = 0;
    HRESULT _hr = get_UserTag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGsmDeliveryReport::PutUserTag ( long Val ) {
    HRESULT _hr = put_UserTag(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IGsmDeliveryReport::GetSmscAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SmscAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IGsmDeliveryReport::GetSmscTime ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SmscTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long IGsmDeliveryReport::GetSmscTimeInSeconds ( ) {
    long _result = 0;
    HRESULT _hr = get_SmscTimeInSeconds(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IGsmDeliveryReport::GetDischargeTime ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DischargeTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long IGsmDeliveryReport::GetDischargeTimeInSeconds ( ) {
    long _result = 0;
    HRESULT _hr = get_DischargeTimeInSeconds(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IGsmDeliveryReport::GetMemoryIndex ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MemoryIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long IGsmDeliveryReport::GetFirstOctet ( ) {
    long _result = 0;
    HRESULT _hr = get_FirstOctet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGsmDeliveryReport::GetSmscTON ( ) {
    long _result = 0;
    HRESULT _hr = get_SmscTON(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGsmDeliveryReport::GetSmscNPI ( ) {
    long _result = 0;
    HRESULT _hr = get_SmscNPI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGsmDeliveryReport::GetTON ( ) {
    long _result = 0;
    HRESULT _hr = get_TON(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGsmDeliveryReport::GetNPI ( ) {
    long _result = 0;
    HRESULT _hr = get_NPI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGsmDeliveryReport::GetStatus ( ) {
    long _result = 0;
    HRESULT _hr = get_Status(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IGsmDeliveryReport::GetFromAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FromAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IGsmDeliveryReport::GetMemoryLocation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MemoryLocation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IGsmDeliveryReport::GetUserTagString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserTagString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IGsmDeliveryReport::PutUserTagString ( _bstr_t Val ) {
    HRESULT _hr = put_UserTagString(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IDialup wrapper method implementations
//

inline _bstr_t IDialup::GetVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Version(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IDialup::GetBuild ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Build(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IDialup::GetModule ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Module(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IDialup::GetLicenseStatus ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LicenseStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IDialup::GetLicenseKey ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LicenseKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IDialup::PutLicenseKey ( _bstr_t LicenseKey ) {
    HRESULT _hr = put_LicenseKey(LicenseKey);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IDialup::SaveLicenseKey ( ) {
    HRESULT _hr = raw_SaveLicenseKey();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IDialup::GetLogFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LogFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IDialup::PutLogFile ( _bstr_t LogFile ) {
    HRESULT _hr = put_LogFile(LogFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IDialup::Sleep ( long Ms ) {
    HRESULT _hr = raw_Sleep(Ms);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IDialup::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IDialup::GetLastError ( ) {
    long _result = 0;
    HRESULT _hr = get_LastError(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IDialup::GetErrorDescription ( long ErrorCode ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetErrorDescription(ErrorCode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IDialup::GetDevice ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Device(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IDialup::PutDevice ( _bstr_t Val ) {
    HRESULT _hr = put_Device(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IDialup::GetDeviceSpeed ( ) {
    long _result = 0;
    HRESULT _hr = get_DeviceSpeed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDialup::PutDeviceSpeed ( long Val ) {
    HRESULT _hr = put_DeviceSpeed(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IDialup::GetDeviceSettings ( ) {
    long _result = 0;
    HRESULT _hr = get_DeviceSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDialup::PutDeviceSettings ( long Val ) {
    HRESULT _hr = put_DeviceSettings(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IDialup::GetDeviceInitString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DeviceInitString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IDialup::PutDeviceInitString ( _bstr_t Val ) {
    HRESULT _hr = put_DeviceInitString(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IDialup::GetDialMode ( ) {
    long _result = 0;
    HRESULT _hr = get_DialMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDialup::PutDialMode ( long Val ) {
    HRESULT _hr = put_DialMode(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IDialup::GetProviderDialString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProviderDialString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IDialup::PutProviderDialString ( _bstr_t Val ) {
    HRESULT _hr = put_ProviderDialString(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IDialup::GetProviderPassword ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProviderPassword(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IDialup::PutProviderPassword ( _bstr_t Val ) {
    HRESULT _hr = put_ProviderPassword(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IDialup::GetProviderType ( ) {
    long _result = 0;
    HRESULT _hr = get_ProviderType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDialup::PutProviderType ( long Val ) {
    HRESULT _hr = put_ProviderType(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IDialup::GetProviderResponse ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProviderResponse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IDialup::GetAdvancedSettings ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AdvancedSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IDialup::PutAdvancedSettings ( _bstr_t Val ) {
    HRESULT _hr = put_AdvancedSettings(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IDialup::GetDeviceCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetDeviceCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IDialup::GetDevice ( long lIndex ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetDevice(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IDialup::Send ( struct IMessage * Message ) {
    HRESULT _hr = raw_Send(Message);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IDialup::ProviderLoadConfig ( _bstr_t FileName ) {
    HRESULT _hr = raw_ProviderLoadConfig(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IDialup::ProviderSaveConfig ( _bstr_t FileName ) {
    HRESULT _hr = raw_ProviderSaveConfig(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IAndroid wrapper method implementations
//

inline _bstr_t IAndroid::GetVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Version(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IAndroid::GetBuild ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Build(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IAndroid::GetModule ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Module(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IAndroid::GetLicenseStatus ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LicenseStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IAndroid::GetLicenseKey ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LicenseKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IAndroid::PutLicenseKey ( _bstr_t LicenseKey ) {
    HRESULT _hr = put_LicenseKey(LicenseKey);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IAndroid::SaveLicenseKey ( ) {
    HRESULT _hr = raw_SaveLicenseKey();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IAndroid::GetLogFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LogFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IAndroid::PutLogFile ( _bstr_t LogFile ) {
    HRESULT _hr = put_LogFile(LogFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IAndroid::GetActivityFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActivityFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IAndroid::PutActivityFile ( _bstr_t ActivityFile ) {
    HRESULT _hr = put_ActivityFile(ActivityFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IAndroid::Sleep ( long Ms ) {
    HRESULT _hr = raw_Sleep(Ms);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IAndroid::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IAndroid::GetLastError ( ) {
    long _result = 0;
    HRESULT _hr = get_LastError(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IAndroid::GetErrorDescription ( long ErrorCode ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetErrorDescription(ErrorCode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IAndroid::Connect ( _bstr_t Host, long Port ) {
    HRESULT _hr = raw_Connect(Host, Port);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IAndroid::Disconnect ( ) {
    HRESULT _hr = raw_Disconnect();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IAndroid::SendSms ( struct IMessage * Message ) {
    HRESULT _hr = raw_SendSms(Message);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IMessagePtr IAndroid::ReceiveSms ( ) {
    struct IMessage * _result = 0;
    HRESULT _hr = raw_ReceiveSms(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMessagePtr(_result, false);
}

inline _bstr_t IAndroid::GetDeviceInfo ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DeviceInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IAndroid::GetAppVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AppVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL IAndroid::GetIsConnected ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsConnected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IAndroid::GetSendSmsTimeoutMs ( ) {
    long _result = 0;
    HRESULT _hr = get_SendSmsTimeoutMs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IAndroid::GetConnectTimeoutMs ( ) {
    long _result = 0;
    HRESULT _hr = get_ConnectTimeoutMs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IAndroid::GetCommandTimeoutMs ( ) {
    long _result = 0;
    HRESULT _hr = get_CommandTimeoutMs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IAndroid::PutSendSmsTimeoutMs ( long Value ) {
    HRESULT _hr = put_SendSmsTimeoutMs(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IAndroid::PutConnectTimeoutMs ( long Value ) {
    HRESULT _hr = put_ConnectTimeoutMs(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IAndroid::PutCommandTimeoutMs ( long Value ) {
    HRESULT _hr = put_CommandTimeoutMs(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGsm wrapper method implementations
//

inline _bstr_t IGsm::GetVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Version(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IGsm::GetBuild ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Build(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IGsm::GetModule ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Module(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IGsm::GetLicenseStatus ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LicenseStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IGsm::GetLicenseKey ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LicenseKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IGsm::PutLicenseKey ( _bstr_t LicenseKey ) {
    HRESULT _hr = put_LicenseKey(LicenseKey);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IGsm::SaveLicenseKey ( ) {
    HRESULT _hr = raw_SaveLicenseKey();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IGsm::GetLogFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LogFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IGsm::PutLogFile ( _bstr_t LogFile ) {
    HRESULT _hr = put_LogFile(LogFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IGsm::GetActivityFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActivityFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IGsm::PutActivityFile ( _bstr_t ActivityFile ) {
    HRESULT _hr = put_ActivityFile(ActivityFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IGsm::Sleep ( long Ms ) {
    HRESULT _hr = raw_Sleep(Ms);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGsm::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IGsm::GetLastError ( ) {
    long _result = 0;
    HRESULT _hr = get_LastError(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IGsm::GetErrorDescription ( long ErrorCode ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetErrorDescription(ErrorCode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IGsm::FindFirstPort ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_FindFirstPort(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IGsm::FindNextPort ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_FindNextPort(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IGsm::FindFirstDevice ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_FindFirstDevice(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IGsm::FindNextDevice ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_FindNextDevice(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IGsm::Open ( _bstr_t strName, _bstr_t strPin, long lBaudrate ) {
    HRESULT _hr = raw_Open(strName, strPin, lBaudrate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGsm::Close ( ) {
    HRESULT _hr = raw_Close();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGsm::SendCommand ( _bstr_t strCommand ) {
    HRESULT _hr = raw_SendCommand(strCommand);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IGsm::ReadResponse ( long lTimeout ) {
    BSTR _result = 0;
    HRESULT _hr = raw_ReadResponse(lTimeout, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IGsm::ResetCom ( ) {
    HRESULT _hr = raw_ResetCom();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IGsm::GetManufacturer ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Manufacturer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IGsm::GetModel ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Model(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IGsm::GetRevision ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Revision(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IGsm::GetSerialNr ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SerialNr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL IGsm::GetSendEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SendEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IGsm::GetReceiveEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReceiveEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IGsm::GetReportEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReportEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IGsm::SendSms ( struct IMessage * Val, long lMultipartFlag, long lTimeout ) {
    BSTR _result = 0;
    HRESULT _hr = raw_SendSms(Val, lMultipartFlag, lTimeout, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IGsm::Receive ( long lType, VARIANT_BOOL bDelete, long lStorageType, long lTimeout ) {
    HRESULT _hr = raw_Receive(lType, bDelete, lStorageType, lTimeout);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IMessagePtr IGsm::GetFirstSms ( ) {
    struct IMessage * _result = 0;
    HRESULT _hr = raw_GetFirstSms(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMessagePtr(_result, false);
}

inline IMessagePtr IGsm::GetNextSms ( ) {
    struct IMessage * _result = 0;
    HRESULT _hr = raw_GetNextSms(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMessagePtr(_result, false);
}

inline IGsmDeliveryReportPtr IGsm::GetFirstReport ( ) {
    struct IGsmDeliveryReport * _result = 0;
    HRESULT _hr = raw_GetFirstReport(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGsmDeliveryReportPtr(_result, false);
}

inline IGsmDeliveryReportPtr IGsm::GetNextReport ( ) {
    struct IGsmDeliveryReport * _result = 0;
    HRESULT _hr = raw_GetNextReport(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGsmDeliveryReportPtr(_result, false);
}

inline HRESULT IGsm::DeleteSms ( struct IMessage * pSms ) {
    HRESULT _hr = raw_DeleteSms(pSms);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGsm::DeleteReport ( struct IGsmDeliveryReport * pReport ) {
    HRESULT _hr = raw_DeleteReport(pReport);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IGsm::GetExtractApplicationPort ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExtractApplicationPort(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGsm::PutExtractApplicationPort ( VARIANT_BOOL Val ) {
    HRESULT _hr = put_ExtractApplicationPort(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IGsm::GetAssembleMultipart ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AssembleMultipart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGsm::PutAssembleMultipart ( VARIANT_BOOL Val ) {
    HRESULT _hr = put_AssembleMultipart(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IGsm::GetMessageMode ( ) {
    long _result = 0;
    HRESULT _hr = get_MessageMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGsm::PutMessageMode ( long Val ) {
    HRESULT _hr = put_MessageMode(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IGsm::GetPrefixSmscMode ( ) {
    long _result = 0;
    HRESULT _hr = get_PrefixSmscMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGsm::PutPrefixSmscMode ( long Val ) {
    HRESULT _hr = put_PrefixSmscMode(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IGsm::GetNetworkTimeout ( ) {
    long _result = 0;
    HRESULT _hr = get_NetworkTimeout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGsm::PutNetworkTimeout ( long Val ) {
    HRESULT _hr = put_NetworkTimeout(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IGsm::GetInterCommandDelay ( ) {
    long _result = 0;
    HRESULT _hr = get_InterCommandDelay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGsm::PutInterCommandDelay ( long Val ) {
    HRESULT _hr = put_InterCommandDelay(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IGsm::GetInterCharacterDelay ( ) {
    long _result = 0;
    HRESULT _hr = get_InterCharacterDelay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGsm::PutInterCharacterDelay ( long Val ) {
    HRESULT _hr = put_InterCharacterDelay(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IGsm::GetWaitForNetwork ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_WaitForNetwork(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGsm::PutWaitForNetwork ( VARIANT_BOOL Val ) {
    HRESULT _hr = put_WaitForNetwork(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IGsm::GetPreferredSmsc ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PreferredSmsc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IGsm::PutPreferredSmsc ( _bstr_t Val ) {
    HRESULT _hr = put_PreferredSmsc(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IGsm::GetCommandTimeout ( ) {
    long _result = 0;
    HRESULT _hr = get_CommandTimeout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGsm::PutCommandTimeout ( long Val ) {
    HRESULT _hr = put_CommandTimeout(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IGsm::GetKeepUnusedUdh ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_KeepUnusedUdh(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGsm::PutKeepUnusedUdh ( VARIANT_BOOL Val ) {
    HRESULT _hr = put_KeepUnusedUdh(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IGsm::GetOverrideFeatureCheck ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_OverrideFeatureCheck(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGsm::PutOverrideFeatureCheck ( VARIANT_BOOL Val ) {
    HRESULT _hr = put_OverrideFeatureCheck(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IGsm::GetExtractLanguageShift ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExtractLanguageShift(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGsm::PutExtractLanguageShift ( VARIANT_BOOL Val ) {
    HRESULT _hr = put_ExtractLanguageShift(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IGsm::GetTcpMode ( ) {
    long _result = 0;
    HRESULT _hr = get_TcpMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IGsm::PutTcpMode ( long Val ) {
    HRESULT _hr = put_TcpMode(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IGsm::GetIsOpen ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsOpen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IHttpServer wrapper method implementations
//

inline _bstr_t IHttpServer::GetVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Version(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IHttpServer::GetBuild ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Build(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IHttpServer::GetModule ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Module(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IHttpServer::GetLicenseStatus ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LicenseStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IHttpServer::GetLicenseKey ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LicenseKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IHttpServer::PutLicenseKey ( _bstr_t LicenseKey ) {
    HRESULT _hr = put_LicenseKey(LicenseKey);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IHttpServer::SaveLicenseKey ( ) {
    HRESULT _hr = raw_SaveLicenseKey();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IHttpServer::GetLogFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LogFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IHttpServer::PutLogFile ( _bstr_t LogFile ) {
    HRESULT _hr = put_LogFile(LogFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IHttpServer::GetActivityFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActivityFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IHttpServer::PutActivityFile ( _bstr_t ActivityFile ) {
    HRESULT _hr = put_ActivityFile(ActivityFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IHttpServer::Sleep ( long Ms ) {
    HRESULT _hr = raw_Sleep(Ms);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IHttpServer::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IHttpServer::GetLastError ( ) {
    long _result = 0;
    HRESULT _hr = get_LastError(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IHttpServer::GetErrorDescription ( long ErrorCode ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetErrorDescription(ErrorCode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL IHttpServer::GetIsStarted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsStarted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IHttpServer::AddUrl ( _bstr_t url ) {
    HRESULT _hr = raw_AddUrl(url);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IHttpServer::Startup ( ) {
    HRESULT _hr = raw_Startup();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IHttpServer::Shutdown ( ) {
    HRESULT _hr = raw_Shutdown();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IHttpServer::WaitForRequest ( long Timeout ) {
    HRESULT _hr = raw_WaitForRequest(Timeout);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IHttpServer::SendResponse ( ) {
    HRESULT _hr = raw_SendResponse();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IHttpServer::ClearResponse ( ) {
    HRESULT _hr = raw_ClearResponse();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IHttpServer::SaveRequestBody ( _bstr_t Path ) {
    HRESULT _hr = raw_SaveRequestBody(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IHttpServer::LoadResponseBody ( _bstr_t Path, VARIANT_BOOL bIsText ) {
    HRESULT _hr = raw_LoadResponseBody(Path, bIsText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IHttpServer::SetResponseBodyFromBase64 ( _bstr_t b64string ) {
    HRESULT _hr = raw_SetResponseBodyFromBase64(b64string);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IHttpServer::GetRequestHeader ( _bstr_t Key ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetRequestHeader(Key, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IHttpServer::GetResponseHeader ( _bstr_t Key ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetResponseHeader(Key, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IHttpServer::SetResponseHeader ( _bstr_t Key, _bstr_t Value ) {
    HRESULT _hr = raw_SetResponseHeader(Key, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IHttpServer::GetMaxRequestSizeBytes ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxRequestSizeBytes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IHttpServer::PutMaxRequestSizeBytes ( long Val ) {
    HRESULT _hr = put_MaxRequestSizeBytes(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IHttpServer::GetNumRequestQueues ( ) {
    long _result = 0;
    HRESULT _hr = get_NumRequestQueues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IHttpServer::GetResponseTimeoutMs ( ) {
    long _result = 0;
    HRESULT _hr = get_ResponseTimeoutMs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IHttpServer::GetRequestUrl ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RequestUrl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IHttpServer::GetRequestUrlPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RequestUrlPath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IHttpServer::GetRequestUrlHost ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RequestUrlHost(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IHttpServer::GetRequestUrlQueryString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RequestUrlQueryString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IHttpServer::GetRequestVerb ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RequestVerb(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IHttpServer::GetRequestBodyString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RequestBodyString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IHttpServer::GetRequestBodyBase64 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RequestBodyBase64(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL IHttpServer::GetRequestBodyIsBinary ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RequestBodyIsBinary(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IHttpServer::GetRequestIp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RequestIp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long IHttpServer::GetRequestPort ( ) {
    long _result = 0;
    HRESULT _hr = get_RequestPort(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IHttpServer::GetRequestHeaders ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RequestHeaders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long IHttpServer::GetResponseCode ( ) {
    long _result = 0;
    HRESULT _hr = get_ResponseCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IHttpServer::GetResponseReason ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ResponseReason(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IHttpServer::GetResponseHeaders ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ResponseHeaders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IHttpServer::GetResponseBodyString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ResponseBodyString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IHttpServer::GetResponseBodyBase64 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ResponseBodyBase64(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IHttpServer::PutNumRequestQueues ( long Val ) {
    HRESULT _hr = put_NumRequestQueues(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IHttpServer::PutResponseTimeoutMs ( long Val ) {
    HRESULT _hr = put_ResponseTimeoutMs(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IHttpServer::PutResponseCode ( long Val ) {
    HRESULT _hr = put_ResponseCode(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IHttpServer::PutResponseReason ( _bstr_t Val ) {
    HRESULT _hr = put_ResponseReason(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IHttpServer::PutResponseBodyString ( _bstr_t Val ) {
    HRESULT _hr = put_ResponseBodyString(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IHttp wrapper method implementations
//

inline _bstr_t IHttp::GetVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Version(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IHttp::GetBuild ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Build(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IHttp::GetModule ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Module(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IHttp::GetLicenseStatus ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LicenseStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IHttp::GetLicenseKey ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LicenseKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IHttp::PutLicenseKey ( _bstr_t LicenseKey ) {
    HRESULT _hr = put_LicenseKey(LicenseKey);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IHttp::SaveLicenseKey ( ) {
    HRESULT _hr = raw_SaveLicenseKey();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IHttp::GetLogFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LogFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IHttp::PutLogFile ( _bstr_t LogFile ) {
    HRESULT _hr = put_LogFile(LogFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IHttp::GetActivityFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActivityFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IHttp::PutActivityFile ( _bstr_t ActivityFile ) {
    HRESULT _hr = put_ActivityFile(ActivityFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IHttp::GetLogDetails ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LogDetails(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IHttp::PutLogDetails ( VARIANT_BOOL LogFile ) {
    HRESULT _hr = put_LogDetails(LogFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IHttp::Sleep ( long Ms ) {
    HRESULT _hr = raw_Sleep(Ms);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IHttp::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IHttp::GetLastError ( ) {
    long _result = 0;
    HRESULT _hr = get_LastError(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IHttp::GetErrorDescription ( long ErrorCode ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetErrorDescription(ErrorCode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IHttp::Get ( _bstr_t strUrl ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Get(strUrl, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IHttp::Post ( _bstr_t strUrl, _bstr_t strPostBody ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Post(strUrl, strPostBody, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IHttp::Download ( _bstr_t strUrl, _bstr_t strTargetPath ) {
    HRESULT _hr = raw_Download(strUrl, strTargetPath);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IHttp::Geturl ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_url(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IHttp::Puturl ( _bstr_t Val ) {
    HRESULT _hr = put_url(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IHttp::GetPostBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PostBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IHttp::PutPostBody ( _bstr_t Val ) {
    HRESULT _hr = put_PostBody(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IHttp::SendSms ( struct IMessage * Sms, long MultipartFlag ) {
    BSTR _result = 0;
    HRESULT _hr = raw_SendSms(Sms, MultipartFlag, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IHttp::GetWebAccount ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_WebAccount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IHttp::PutWebAccount ( _bstr_t Val ) {
    HRESULT _hr = put_WebAccount(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IHttp::GetWebPassword ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_WebPassword(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IHttp::PutWebPassword ( _bstr_t Val ) {
    HRESULT _hr = put_WebPassword(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IHttp::GetProxyServer ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProxyServer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IHttp::PutProxyServer ( _bstr_t Val ) {
    HRESULT _hr = put_ProxyServer(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IHttp::GetProxyAccount ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProxyAccount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IHttp::PutProxyAccount ( _bstr_t Val ) {
    HRESULT _hr = put_ProxyAccount(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IHttp::GetProxyPassword ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProxyPassword(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IHttp::PutProxyPassword ( _bstr_t Val ) {
    HRESULT _hr = put_ProxyPassword(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IHttp::GetRequestTimeout ( ) {
    long _result = 0;
    HRESULT _hr = get_RequestTimeout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IHttp::PutRequestTimeout ( long Val ) {
    HRESULT _hr = put_RequestTimeout(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IHttp::SetHeader ( _bstr_t Header, _bstr_t Value ) {
    HRESULT _hr = raw_SetHeader(Header, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IHttp::GetLastResponseCode ( ) {
    long _result = 0;
    HRESULT _hr = get_LastResponseCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IHttp::GetLastResponseText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LastResponseText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IHttp::UrlEncode ( _bstr_t In ) {
    BSTR _result = 0;
    HRESULT _hr = raw_UrlEncode(In, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IHttp::Base64Encode ( _bstr_t In ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Base64Encode(In, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IHttp::Base64EncodeFile ( _bstr_t FileName ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Base64EncodeFile(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IHttp::HexEncode ( _bstr_t In ) {
    BSTR _result = 0;
    HRESULT _hr = raw_HexEncode(In, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface ISnpp wrapper method implementations
//

inline _bstr_t ISnpp::GetVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Version(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ISnpp::GetBuild ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Build(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ISnpp::GetModule ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Module(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ISnpp::GetLicenseStatus ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LicenseStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ISnpp::GetLicenseKey ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LicenseKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISnpp::PutLicenseKey ( _bstr_t LicenseKey ) {
    HRESULT _hr = put_LicenseKey(LicenseKey);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT ISnpp::SaveLicenseKey ( ) {
    HRESULT _hr = raw_SaveLicenseKey();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t ISnpp::GetLogFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LogFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISnpp::PutLogFile ( _bstr_t LogFile ) {
    HRESULT _hr = put_LogFile(LogFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT ISnpp::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long ISnpp::GetLastError ( ) {
    long _result = 0;
    HRESULT _hr = get_LastError(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t ISnpp::GetErrorDescription ( long ErrorCode ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetErrorDescription(ErrorCode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ISnpp::GetServer ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Server(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISnpp::PutServer ( _bstr_t Val ) {
    HRESULT _hr = put_Server(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISnpp::GetServerPort ( ) {
    long _result = 0;
    HRESULT _hr = get_ServerPort(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISnpp::PutServerPort ( long Val ) {
    HRESULT _hr = put_ServerPort(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISnpp::GetServerTimeout ( ) {
    long _result = 0;
    HRESULT _hr = get_ServerTimeout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISnpp::PutServerTimeout ( long Val ) {
    HRESULT _hr = put_ServerTimeout(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISnpp::GetProviderPassword ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProviderPassword(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISnpp::PutProviderPassword ( _bstr_t Val ) {
    HRESULT _hr = put_ProviderPassword(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISnpp::GetProviderUsername ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProviderUsername(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISnpp::PutProviderUsername ( _bstr_t Val ) {
    HRESULT _hr = put_ProviderUsername(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISnpp::GetProviderResponse ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProviderResponse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL ISnpp::GetMultilineEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MultilineEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISnpp::PutMultilineEnabled ( VARIANT_BOOL Val ) {
    HRESULT _hr = put_MultilineEnabled(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT ISnpp::Send ( _bstr_t ToAddress, _bstr_t Message ) {
    HRESULT _hr = raw_Send(ToAddress, Message);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ISmpp wrapper method implementations
//

inline _bstr_t ISmpp::GetVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Version(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ISmpp::GetBuild ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Build(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ISmpp::GetModule ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Module(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ISmpp::GetLicenseStatus ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LicenseStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ISmpp::GetLicenseKey ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LicenseKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISmpp::PutLicenseKey ( _bstr_t LicenseKey ) {
    HRESULT _hr = put_LicenseKey(LicenseKey);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT ISmpp::SaveLicenseKey ( ) {
    HRESULT _hr = raw_SaveLicenseKey();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t ISmpp::GetLogFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LogFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISmpp::PutLogFile ( _bstr_t LogFile ) {
    HRESULT _hr = put_LogFile(LogFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISmpp::GetActivityFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActivityFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISmpp::PutActivityFile ( _bstr_t ActivityFile ) {
    HRESULT _hr = put_ActivityFile(ActivityFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ISmpp::GetLogPduDetails ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LogPduDetails(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISmpp::PutLogPduDetails ( VARIANT_BOOL LogDetails ) {
    HRESULT _hr = put_LogPduDetails(LogDetails);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISmpp::GetLogLevel ( ) {
    long _result = 0;
    HRESULT _hr = get_LogLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISmpp::PutLogLevel ( long pLevel ) {
    HRESULT _hr = put_LogLevel(pLevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT ISmpp::Sleep ( long Ms ) {
    HRESULT _hr = raw_Sleep(Ms);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISmpp::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long ISmpp::GetLastError ( ) {
    long _result = 0;
    HRESULT _hr = get_LastError(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t ISmpp::GetErrorDescription ( long ErrorCode ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetErrorDescription(ErrorCode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT ISmpp::Connect ( _bstr_t Host, long Port, long Timeout, VARIANT_BOOL Secure ) {
    HRESULT _hr = raw_Connect(Host, Port, Timeout, Secure);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISmpp::Bind ( long Type, _bstr_t SystemId, _bstr_t SystemPassword, _bstr_t SystemType, long Version, long TON, long NPI, _bstr_t AddressRange, long Timeout ) {
    HRESULT _hr = raw_Bind(Type, SystemId, SystemPassword, SystemType, Version, TON, NPI, AddressRange, Timeout);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISmpp::Unbind ( ) {
    HRESULT _hr = raw_Unbind();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISmpp::Disconnect ( ) {
    HRESULT _hr = raw_Disconnect();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISmpp::AddBindTlv ( struct ITlv * Tlv ) {
    HRESULT _hr = raw_AddBindTlv(Tlv);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISmpp::DeleteBindTlv ( long lTag ) {
    HRESULT _hr = raw_DeleteBindTlv(lTag);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ITlvPtr ISmpp::GetFirstBindTlv ( ) {
    struct ITlv * _result = 0;
    HRESULT _hr = raw_GetFirstBindTlv(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITlvPtr(_result, false);
}

inline ITlvPtr ISmpp::GetNextBindTlv ( ) {
    struct ITlv * _result = 0;
    HRESULT _hr = raw_GetNextBindTlv(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITlvPtr(_result, false);
}

inline ITlvPtr ISmpp::GetBindTlv ( long lTag ) {
    struct ITlv * _result = 0;
    HRESULT _hr = raw_GetBindTlv(lTag, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITlvPtr(_result, false);
}

inline long ISmpp::SubmitSms ( struct IMessage * Sms, long MultipartFlag ) {
    long _result = 0;
    HRESULT _hr = raw_SubmitSms(Sms, MultipartFlag, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL ISmpp::WaitForSmsUpdate ( long TimeoutMs ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_WaitForSmsUpdate(TimeoutMs, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IMessagePtr ISmpp::FetchSmsUpdate ( ) {
    struct IMessage * _result = 0;
    HRESULT _hr = raw_FetchSmsUpdate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMessagePtr(_result, false);
}

inline HRESULT ISmpp::QuerySms ( struct IMessage * Sms ) {
    HRESULT _hr = raw_QuerySms(Sms);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IMessagePtr ISmpp::ReceiveMessage ( ) {
    struct IMessage * _result = 0;
    HRESULT _hr = raw_ReceiveMessage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMessagePtr(_result, false);
}

inline long ISmpp::CountSmsReceived ( ) {
    long _result = 0;
    HRESULT _hr = raw_CountSmsReceived(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long ISmpp::CountSmsSubmitSpace ( ) {
    long _result = 0;
    HRESULT _hr = raw_CountSmsSubmitSpace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long ISmpp::CountSmsQuerySpace ( ) {
    long _result = 0;
    HRESULT _hr = raw_CountSmsQuerySpace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL ISmpp::GetIsConnected ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsConnected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL ISmpp::GetIsBound ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsBound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long ISmpp::GetMaxOutPendingPdus ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxOutPendingPdus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISmpp::PutMaxOutPendingPdus ( long Val ) {
    HRESULT _hr = put_MaxOutPendingPdus(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISmpp::GetMaxSmsSubmissions ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxSmsSubmissions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISmpp::PutMaxSmsSubmissions ( long Val ) {
    HRESULT _hr = put_MaxSmsSubmissions(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISmpp::GetMaxSmsQueries ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxSmsQueries(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISmpp::PutMaxSmsQueries ( long Val ) {
    HRESULT _hr = put_MaxSmsQueries(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISmpp::GetPduTimeout ( ) {
    long _result = 0;
    HRESULT _hr = get_PduTimeout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISmpp::PutPduTimeout ( long Val ) {
    HRESULT _hr = put_PduTimeout(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISmpp::GetEnquireInterval ( ) {
    long _result = 0;
    HRESULT _hr = get_EnquireInterval(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISmpp::PutEnquireInterval ( long Val ) {
    HRESULT _hr = put_EnquireInterval(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISmpp::GetMultipartTimeout ( ) {
    long _result = 0;
    HRESULT _hr = get_MultipartTimeout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISmpp::PutMultipartTimeout ( long Val ) {
    HRESULT _hr = put_MultipartTimeout(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISmpp::GetUseGsmEncoding ( ) {
    long _result = 0;
    HRESULT _hr = get_UseGsmEncoding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISmpp::PutUseGsmEncoding ( long Val ) {
    HRESULT _hr = put_UseGsmEncoding(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ISmpp::GetAssembleMultipart ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AssembleMultipart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISmpp::PutAssembleMultipart ( VARIANT_BOOL Val ) {
    HRESULT _hr = put_AssembleMultipart(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISmpp::GetMultipartMode ( ) {
    long _result = 0;
    HRESULT _hr = get_MultipartMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISmpp::PutMultipartMode ( long Val ) {
    HRESULT _hr = put_MultipartMode(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ISmpp::GetExtractApplicationPort ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExtractApplicationPort(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISmpp::PutExtractApplicationPort ( VARIANT_BOOL Val ) {
    HRESULT _hr = put_ExtractApplicationPort(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISmpp::GetMaxSmsReceived ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxSmsReceived(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISmpp::PutMaxSmsReceived ( long Val ) {
    HRESULT _hr = put_MaxSmsReceived(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISmpp::GetSubmitMode ( ) {
    long _result = 0;
    HRESULT _hr = get_SubmitMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISmpp::PutSubmitMode ( long Val ) {
    HRESULT _hr = put_SubmitMode(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ISmpp::GetKeepUnusedUdh ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_KeepUnusedUdh(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISmpp::PutKeepUnusedUdh ( VARIANT_BOOL Val ) {
    HRESULT _hr = put_KeepUnusedUdh(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ISmpp::GetExtractLanguageShift ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExtractLanguageShift(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISmpp::PutExtractLanguageShift ( VARIANT_BOOL Val ) {
    HRESULT _hr = put_ExtractLanguageShift(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISmpp::GetLocalIpAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LocalIpAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISmpp::PutLocalIpAddress ( _bstr_t Ip ) {
    HRESULT _hr = put_LocalIpAddress(Ip);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISmpp::GetSmsSentPerSecond ( ) {
    long _result = 0;
    HRESULT _hr = get_SmsSentPerSecond(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long ISmpp::GetSmsReceivedPerSecond ( ) {
    long _result = 0;
    HRESULT _hr = get_SmsReceivedPerSecond(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IMessagePtr ISmpp::GetFirstPart ( struct IMessage * Sms ) {
    struct IMessage * _result = 0;
    HRESULT _hr = raw_GetFirstPart(Sms, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMessagePtr(_result, false);
}

inline IMessagePtr ISmpp::GetNextPart ( ) {
    struct IMessage * _result = 0;
    HRESULT _hr = raw_GetNextPart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMessagePtr(_result, false);
}

inline long ISmpp::CountParts ( struct IMessage * Sms ) {
    long _result = 0;
    HRESULT _hr = raw_CountParts(Sms, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT ISmpp::AssembleSms ( struct IMessage * Part ) {
    HRESULT _hr = raw_AssembleSms(Part);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IMessagePtr ISmpp::GetAssembledSms ( VARIANT_BOOL Force ) {
    struct IMessage * _result = 0;
    HRESULT _hr = raw_GetAssembledSms(Force, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMessagePtr(_result, false);
}

inline HRESULT ISmpp::ResetSmsAssembler ( ) {
    HRESULT _hr = raw_ResetSmsAssembler();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IMessagePtr ISmpp::FetchNotUpdated ( ) {
    struct IMessage * _result = 0;
    HRESULT _hr = raw_FetchNotUpdated(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMessagePtr(_result, false);
}

inline IMessagePtr ISmpp::FetchNotSubmitted ( ) {
    struct IMessage * _result = 0;
    HRESULT _hr = raw_FetchNotSubmitted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMessagePtr(_result, false);
}

//
// interface ISmppSession wrapper method implementations
//

inline _bstr_t ISmppSession::GetLogFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LogFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISmppSession::PutLogFile ( _bstr_t LogFile ) {
    HRESULT _hr = put_LogFile(LogFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISmppSession::GetActivityFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActivityFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISmppSession::PutActivityFile ( _bstr_t ActivityFile ) {
    HRESULT _hr = put_ActivityFile(ActivityFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ISmppSession::GetLogPduDetails ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LogPduDetails(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISmppSession::PutLogPduDetails ( VARIANT_BOOL LogDetails ) {
    HRESULT _hr = put_LogPduDetails(LogDetails);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISmppSession::GetLogLevel ( ) {
    long _result = 0;
    HRESULT _hr = get_LogLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISmppSession::PutLogLevel ( long pLevel ) {
    HRESULT _hr = put_LogLevel(pLevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISmppSession::GetLastError ( ) {
    long _result = 0;
    HRESULT _hr = get_LastError(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t ISmppSession::GetErrorDescription ( long ErrorCode ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetErrorDescription(ErrorCode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ISmppSession::GetIp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Ip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long ISmppSession::GetPort ( ) {
    long _result = 0;
    HRESULT _hr = get_Port(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long ISmppSession::GetVersion ( ) {
    long _result = 0;
    HRESULT _hr = get_Version(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t ISmppSession::GetSystemId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SystemId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ISmppSession::GetPassword ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Password(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ISmppSession::GetSystemType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SystemType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ISmppSession::GetAddressRange ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AddressRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long ISmppSession::GetAddressRangeNpi ( ) {
    long _result = 0;
    HRESULT _hr = get_AddressRangeNpi(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long ISmppSession::GetAddressRangeTon ( ) {
    long _result = 0;
    HRESULT _hr = get_AddressRangeTon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long ISmppSession::GetConnectionState ( ) {
    long _result = 0;
    HRESULT _hr = get_ConnectionState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long ISmppSession::GetRequestedBind ( ) {
    long _result = 0;
    HRESULT _hr = get_RequestedBind(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long ISmppSession::GetId ( ) {
    long _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT ISmppSession::RespondToBind ( long Status ) {
    HRESULT _hr = raw_RespondToBind(Status);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISmppSession::RespondToSubmitSms ( struct IMessage * Sms ) {
    HRESULT _hr = raw_RespondToSubmitSms(Sms);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IMessagePtr ISmppSession::ReceiveSubmitSms ( ) {
    struct IMessage * _result = 0;
    HRESULT _hr = raw_ReceiveSubmitSms(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMessagePtr(_result, false);
}

inline HRESULT ISmppSession::RespondToQuerySms ( struct IMessage * Sms ) {
    HRESULT _hr = raw_RespondToQuerySms(Sms);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IMessagePtr ISmppSession::ReceiveQuerySms ( ) {
    struct IMessage * _result = 0;
    HRESULT _hr = raw_ReceiveQuerySms(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMessagePtr(_result, false);
}

inline long ISmppSession::DeliverSms ( struct IMessage * Sms, long MultipartFlag ) {
    long _result = 0;
    HRESULT _hr = raw_DeliverSms(Sms, MultipartFlag, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT ISmppSession::DeliverReport ( struct IMessage * Sms ) {
    HRESULT _hr = raw_DeliverReport(Sms);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IMessagePtr ISmppSession::ReceiveDeliverResponse ( ) {
    struct IMessage * _result = 0;
    HRESULT _hr = raw_ReceiveDeliverResponse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMessagePtr(_result, false);
}

inline ITlvPtr ISmppSession::GetFirstBindTlv ( ) {
    struct ITlv * _result = 0;
    HRESULT _hr = raw_GetFirstBindTlv(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITlvPtr(_result, false);
}

inline ITlvPtr ISmppSession::GetNextBindTlv ( ) {
    struct ITlv * _result = 0;
    HRESULT _hr = raw_GetNextBindTlv(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITlvPtr(_result, false);
}

inline ITlvPtr ISmppSession::GetBindTlv ( long lTag ) {
    struct ITlv * _result = 0;
    HRESULT _hr = raw_GetBindTlv(lTag, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITlvPtr(_result, false);
}

inline HRESULT ISmppSession::Disconnect ( ) {
    HRESULT _hr = raw_Disconnect();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long ISmppSession::GetMaxSmsDeliveries ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxSmsDeliveries(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISmppSession::PutMaxSmsDeliveries ( long Val ) {
    HRESULT _hr = put_MaxSmsDeliveries(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISmppSession::GetMaxSmsSubmission ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxSmsSubmission(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISmppSession::PutMaxSmsSubmission ( long Val ) {
    HRESULT _hr = put_MaxSmsSubmission(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISmppSession::GetMaxSmsQueries ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxSmsQueries(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISmppSession::PutMaxSmsQueries ( long Val ) {
    HRESULT _hr = put_MaxSmsQueries(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISmppSession::GetMaxOutPendingPdus ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxOutPendingPdus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISmppSession::PutMaxOutPendingPdus ( long Val ) {
    HRESULT _hr = put_MaxOutPendingPdus(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISmppSession::GetPduTimeout ( ) {
    long _result = 0;
    HRESULT _hr = get_PduTimeout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISmppSession::PutPduTimeout ( long Val ) {
    HRESULT _hr = put_PduTimeout(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISmppSession::GetEnquireInterval ( ) {
    long _result = 0;
    HRESULT _hr = get_EnquireInterval(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISmppSession::PutEnquireInterval ( long Val ) {
    HRESULT _hr = put_EnquireInterval(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISmppSession::GetMultipartTimeout ( ) {
    long _result = 0;
    HRESULT _hr = get_MultipartTimeout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISmppSession::PutMultipartTimeout ( long Val ) {
    HRESULT _hr = put_MultipartTimeout(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISmppSession::GetUseGsmEncoding ( ) {
    long _result = 0;
    HRESULT _hr = get_UseGsmEncoding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISmppSession::PutUseGsmEncoding ( long Val ) {
    HRESULT _hr = put_UseGsmEncoding(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISmppSession::GetMultipartMode ( ) {
    long _result = 0;
    HRESULT _hr = get_MultipartMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISmppSession::PutMultipartMode ( long Val ) {
    HRESULT _hr = put_MultipartMode(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ISmppSession::GetExtractApplicationPort ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExtractApplicationPort(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISmppSession::PutExtractApplicationPort ( VARIANT_BOOL Val ) {
    HRESULT _hr = put_ExtractApplicationPort(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISmppSession::GetDeliverMode ( ) {
    long _result = 0;
    HRESULT _hr = get_DeliverMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISmppSession::PutDeliverMode ( long Val ) {
    HRESULT _hr = put_DeliverMode(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ISmppSession::GetKeepUnusedUdh ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_KeepUnusedUdh(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISmppSession::PutKeepUnusedUdh ( VARIANT_BOOL Val ) {
    HRESULT _hr = put_KeepUnusedUdh(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ISmppSession::GetExtractLanguageShift ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExtractLanguageShift(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISmppSession::PutExtractLanguageShift ( VARIANT_BOOL Val ) {
    HRESULT _hr = put_ExtractLanguageShift(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISmppSession::CountSmsSubmissions ( ) {
    long _result = 0;
    HRESULT _hr = raw_CountSmsSubmissions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long ISmppSession::CountSmsQueries ( ) {
    long _result = 0;
    HRESULT _hr = raw_CountSmsQueries(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long ISmppSession::CountSmsDeliverySpace ( ) {
    long _result = 0;
    HRESULT _hr = raw_CountSmsDeliverySpace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long ISmppSession::GetSmsSentPerSecond ( ) {
    long _result = 0;
    HRESULT _hr = get_SmsSentPerSecond(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long ISmppSession::GetSmsReceivedPerSecond ( ) {
    long _result = 0;
    HRESULT _hr = get_SmsReceivedPerSecond(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IMessagePtr ISmppSession::GetFirstPart ( struct IMessage * Sms ) {
    struct IMessage * _result = 0;
    HRESULT _hr = raw_GetFirstPart(Sms, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMessagePtr(_result, false);
}

inline IMessagePtr ISmppSession::GetNextPart ( ) {
    struct IMessage * _result = 0;
    HRESULT _hr = raw_GetNextPart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMessagePtr(_result, false);
}

inline long ISmppSession::CountParts ( struct IMessage * Sms ) {
    long _result = 0;
    HRESULT _hr = raw_CountParts(Sms, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT ISmppSession::AssembleSms ( struct IMessage * Part ) {
    HRESULT _hr = raw_AssembleSms(Part);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IMessagePtr ISmppSession::GetAssembledSms ( VARIANT_BOOL Force ) {
    struct IMessage * _result = 0;
    HRESULT _hr = raw_GetAssembledSms(Force, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMessagePtr(_result, false);
}

inline IMessagePtr ISmppSession::FetchNotResponded ( ) {
    struct IMessage * _result = 0;
    HRESULT _hr = raw_FetchNotResponded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMessagePtr(_result, false);
}

inline IMessagePtr ISmppSession::FetchNotDelivered ( ) {
    struct IMessage * _result = 0;
    HRESULT _hr = raw_FetchNotDelivered(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMessagePtr(_result, false);
}

inline VARIANT_BOOL ISmppSession::GetIsConnected ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsConnected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL ISmppSession::GetIsBound ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsBound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ISmppServer wrapper method implementations
//

inline _bstr_t ISmppServer::GetVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Version(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ISmppServer::GetBuild ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Build(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ISmppServer::GetModule ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Module(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ISmppServer::GetLicenseStatus ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LicenseStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ISmppServer::GetLicenseKey ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LicenseKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISmppServer::PutLicenseKey ( _bstr_t LicenseKey ) {
    HRESULT _hr = put_LicenseKey(LicenseKey);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT ISmppServer::SaveLicenseKey ( ) {
    HRESULT _hr = raw_SaveLicenseKey();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t ISmppServer::GetLogFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LogFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISmppServer::PutLogFile ( _bstr_t LogFile ) {
    HRESULT _hr = put_LogFile(LogFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISmppServer::GetActivityFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActivityFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISmppServer::PutActivityFile ( _bstr_t ActivityFile ) {
    HRESULT _hr = put_ActivityFile(ActivityFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISmppServer::GetCertificateStore ( ) {
    long _result = 0;
    HRESULT _hr = get_CertificateStore(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISmppServer::PutCertificateStore ( long CertificateStore ) {
    HRESULT _hr = put_CertificateStore(CertificateStore);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISmppServer::GetListenIpv4 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ListenIpv4(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISmppServer::PutListenIpv4 ( _bstr_t Ip ) {
    HRESULT _hr = put_ListenIpv4(Ip);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISmppServer::GetListenIpv6 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ListenIpv6(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISmppServer::PutListenIpv6 ( _bstr_t Ip ) {
    HRESULT _hr = put_ListenIpv6(Ip);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT ISmppServer::Sleep ( long Ms ) {
    HRESULT _hr = raw_Sleep(Ms);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISmppServer::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long ISmppServer::GetLastError ( ) {
    long _result = 0;
    HRESULT _hr = get_LastError(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t ISmppServer::GetErrorDescription ( long ErrorCode ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetErrorDescription(ErrorCode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT ISmppServer::Start ( long Port, long IpVersion, _bstr_t Certificate ) {
    HRESULT _hr = raw_Start(Port, IpVersion, Certificate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISmppServer::Stop ( ) {
    HRESULT _hr = raw_Stop();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ISmppSessionPtr ISmppServer::GetFirstSession ( ) {
    struct ISmppSession * _result = 0;
    HRESULT _hr = raw_GetFirstSession(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISmppSessionPtr(_result, false);
}

inline ISmppSessionPtr ISmppServer::GetNextSession ( ) {
    struct ISmppSession * _result = 0;
    HRESULT _hr = raw_GetNextSession(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISmppSessionPtr(_result, false);
}

inline ISmppSessionPtr ISmppServer::GetSession ( long Id ) {
    struct ISmppSession * _result = 0;
    HRESULT _hr = raw_GetSession(Id, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISmppSessionPtr(_result, false);
}

inline ISmppSessionPtr ISmppServer::GetClosedSession ( ) {
    struct ISmppSession * _result = 0;
    HRESULT _hr = raw_GetClosedSession(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISmppSessionPtr(_result, false);
}

inline _bstr_t ISmppServer::FindFirstMyServerCertificate ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_FindFirstMyServerCertificate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ISmppServer::FindNextMyServerCertificate ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_FindNextMyServerCertificate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ISmppServer::FindFirstLocalIpAddress ( long IpVersion ) {
    BSTR _result = 0;
    HRESULT _hr = raw_FindFirstLocalIpAddress(IpVersion, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ISmppServer::FindNextLocalIpAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_FindNextLocalIpAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long ISmppServer::GetMaxClosedSessions ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxClosedSessions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISmppServer::PutMaxClosedSessions ( long Val ) {
    HRESULT _hr = put_MaxClosedSessions(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ISmppServer::GetIsStarted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsStarted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long ISmppServer::GetLastReference ( ) {
    long _result = 0;
    HRESULT _hr = get_LastReference(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISmppServer::PutLastReference ( long Val ) {
    HRESULT _hr = put_LastReference(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ITemplateWapPush wrapper method implementations
//

inline _bstr_t ITemplateWapPush::Geturl ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_url(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ITemplateWapPush::Puturl ( _bstr_t pVal ) {
    HRESULT _hr = put_url(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ITemplateWapPush::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ITemplateWapPush::PutDescription ( _bstr_t pVal ) {
    HRESULT _hr = put_Description(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ITemplateWapPush::GetSignalAction ( ) {
    long _result = 0;
    HRESULT _hr = get_SignalAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ITemplateWapPush::PutSignalAction ( long pVal ) {
    HRESULT _hr = put_SignalAction(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ITemplateWapPush::GetData ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Data(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long ITemplateWapPush::GetLastError ( ) {
    long _result = 0;
    HRESULT _hr = get_LastError(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT ITemplateWapPush::Encode ( ) {
    HRESULT _hr = raw_Encode();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t ITemplateWapPush::GetErrorDescription ( long lCode ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetErrorDescription(lCode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT ITemplateWapPush::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ITemplatevCard wrapper method implementations
//

inline HRESULT ITemplatevCard::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t ITemplatevCard::GetErrorDescription ( long lError ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetErrorDescription(lError, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ITemplatevCard::Geturl ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_url(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ITemplatevCard::Puturl ( _bstr_t pVal ) {
    HRESULT _hr = put_url(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ITemplatevCard::GetTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ITemplatevCard::PutTitle ( _bstr_t pVal ) {
    HRESULT _hr = put_Title(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ITemplatevCard::GetEMail ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EMail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ITemplatevCard::PutEMail ( _bstr_t pVal ) {
    HRESULT _hr = put_EMail(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ITemplatevCard::GetFax ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Fax(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ITemplatevCard::PutFax ( _bstr_t pVal ) {
    HRESULT _hr = put_Fax(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ITemplatevCard::GetPager ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Pager(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ITemplatevCard::PutPager ( _bstr_t pVal ) {
    HRESULT _hr = put_Pager(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ITemplatevCard::GetMobile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Mobile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ITemplatevCard::PutMobile ( _bstr_t pVal ) {
    HRESULT _hr = put_Mobile(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ITemplatevCard::GetPhoneHome ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PhoneHome(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ITemplatevCard::PutPhoneHome ( _bstr_t pVal ) {
    HRESULT _hr = put_PhoneHome(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ITemplatevCard::GetPhoneWork ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PhoneWork(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ITemplatevCard::PutPhoneWork ( _bstr_t pVal ) {
    HRESULT _hr = put_PhoneWork(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ITemplatevCard::GetPhone ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Phone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ITemplatevCard::PutPhone ( _bstr_t pVal ) {
    HRESULT _hr = put_Phone(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ITemplatevCard::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ITemplatevCard::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT ITemplatevCard::Encode ( ) {
    HRESULT _hr = raw_Encode();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t ITemplatevCard::GetData ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Data(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long ITemplatevCard::GetLastError ( ) {
    long _result = 0;
    HRESULT _hr = get_LastError(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IDemoAccount wrapper method implementations
//

inline _bstr_t IDemoAccount::GetSystemId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SystemId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IDemoAccount::GetPassword ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Password(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}
