// Created by Microsoft (R) C/C++ Compiler Version 14.25.28614.0 (3070a5ce).
//
// G:\AxSms\Samples\Visual C++\Console Applications\Pager\Snpp\Release32\axsms.tlh
//
// C++ source equivalent of type library ..\..\..\include\AxSms.tlb
// compiler-generated file created 03/23/22 at 04:16:43 - DO NOT EDIT!

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

namespace AxSms {

//
// Forward references and typedefs
//

struct __declspec(uuid("b00f4729-f464-4690-88a0-e059489af063"))
/* LIBID */ __AxSms;
struct /* coclass */ Constants;
struct __declspec(uuid("7d47e1d0-4b72-4a5d-b174-a0e82af73892"))
/* dual interface */ IConstants;
struct /* coclass */ Message;
struct __declspec(uuid("dfd486fc-45b4-49ab-ad5a-98256ae057fc"))
/* dual interface */ IMessage;
struct __declspec(uuid("4687cee3-3966-46a2-aee3-5a747f455b84"))
/* dual interface */ ITlv;
struct /* coclass */ Tlv;
struct /* coclass */ GsmDeliveryReport;
struct __declspec(uuid("6962c3d8-88fe-4660-a4ec-901a244a57d2"))
/* dual interface */ IGsmDeliveryReport;
struct /* coclass */ Dialup;
struct __declspec(uuid("3e9851df-d82f-4806-8716-769c015c23f2"))
/* dual interface */ IDialup;
struct /* coclass */ Android;
struct __declspec(uuid("6aef9b37-e65e-4feb-971a-0659de7b931e"))
/* dual interface */ IAndroid;
struct /* coclass */ Gsm;
struct __declspec(uuid("b25b188d-42a8-45ef-887f-653cbc9e234b"))
/* dual interface */ IGsm;
struct /* coclass */ HttpServer;
struct __declspec(uuid("356cde23-bc03-4283-9f64-af3d0f49100a"))
/* dual interface */ IHttpServer;
struct /* coclass */ Http;
struct __declspec(uuid("1825a7c6-dbab-4b99-aaa1-fdedf36a4982"))
/* dual interface */ IHttp;
struct /* coclass */ Snpp;
struct __declspec(uuid("c4aab6d2-f834-4fe6-a4ae-b1d5794bc3b4"))
/* dual interface */ ISnpp;
struct /* coclass */ Smpp;
struct __declspec(uuid("9e5fc25e-613a-4951-9c8f-37923c7ae7ae"))
/* dual interface */ ISmpp;
struct /* coclass */ SmppServer;
struct __declspec(uuid("ebe10239-a8c6-46ca-bc48-0cfa6cfd835c"))
/* dual interface */ ISmppServer;
struct __declspec(uuid("3e1ff0c2-4f98-4fa2-954b-bf5730fb6cf9"))
/* dual interface */ ISmppSession;
struct /* coclass */ SmppSession;
struct /* coclass */ TemplateWapPush;
struct __declspec(uuid("54dd400b-f0d6-42af-964b-9f38cd57d8cc"))
/* dual interface */ ITemplateWapPush;
struct /* coclass */ TemplatevCard;
struct __declspec(uuid("fcb5dcc2-4ddd-465d-936f-40aebddd17c3"))
/* dual interface */ ITemplatevCard;
struct /* coclass */ DemoAccount;
struct __declspec(uuid("231f4503-c639-479f-b799-4c9fce0bdf9c"))
/* dual interface */ IDemoAccount;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(IConstants, __uuidof(IConstants));
_COM_SMARTPTR_TYPEDEF(ITlv, __uuidof(ITlv));
_COM_SMARTPTR_TYPEDEF(IMessage, __uuidof(IMessage));
_COM_SMARTPTR_TYPEDEF(IGsmDeliveryReport, __uuidof(IGsmDeliveryReport));
_COM_SMARTPTR_TYPEDEF(IDialup, __uuidof(IDialup));
_COM_SMARTPTR_TYPEDEF(IAndroid, __uuidof(IAndroid));
_COM_SMARTPTR_TYPEDEF(IGsm, __uuidof(IGsm));
_COM_SMARTPTR_TYPEDEF(IHttpServer, __uuidof(IHttpServer));
_COM_SMARTPTR_TYPEDEF(IHttp, __uuidof(IHttp));
_COM_SMARTPTR_TYPEDEF(ISnpp, __uuidof(ISnpp));
_COM_SMARTPTR_TYPEDEF(ISmpp, __uuidof(ISmpp));
_COM_SMARTPTR_TYPEDEF(ISmppSession, __uuidof(ISmppSession));
_COM_SMARTPTR_TYPEDEF(ISmppServer, __uuidof(ISmppServer));
_COM_SMARTPTR_TYPEDEF(ITemplateWapPush, __uuidof(ITemplateWapPush));
_COM_SMARTPTR_TYPEDEF(ITemplatevCard, __uuidof(ITemplatevCard));
_COM_SMARTPTR_TYPEDEF(IDemoAccount, __uuidof(IDemoAccount));

//
// Type library items
//

struct __declspec(uuid("41a6cf7d-3c5b-40b7-82ac-3ab3bbbf1a84"))
Constants;
    // [ default ] interface IConstants

struct __declspec(uuid("7d47e1d0-4b72-4a5d-b174-a0e82af73892"))
IConstants : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetGSM_FO_REJECT_DUPLICATES))
    long GSM_FO_REJECT_DUPLICATES;
    __declspec(property(get=GetGSM_FO_SUBMIT_SM))
    long GSM_FO_SUBMIT_SM;
    __declspec(property(get=GetGSM_FO_DELIVER_SM))
    long GSM_FO_DELIVER_SM;
    __declspec(property(get=GetGSM_FO_STATUS_SM))
    long GSM_FO_STATUS_SM;
    __declspec(property(get=GetSMPP_TLV_DEST_ADDR_SUBUNIT))
    long SMPP_TLV_DEST_ADDR_SUBUNIT;
    __declspec(property(get=GetSMPP_TLV_DEST_NETWORK_TYPE))
    long SMPP_TLV_DEST_NETWORK_TYPE;
    __declspec(property(get=GetSMPP_TLV_DEST_BEARER_TYPE))
    long SMPP_TLV_DEST_BEARER_TYPE;
    __declspec(property(get=GetSMPP_TLV_DEST_TELEMATICS_ID))
    long SMPP_TLV_DEST_TELEMATICS_ID;
    __declspec(property(get=GetSMPP_TLV_SOURCE_ADDR_SUBUNIT))
    long SMPP_TLV_SOURCE_ADDR_SUBUNIT;
    __declspec(property(get=GetSMPP_TLV_SOURCE_NETWORK_TYPE))
    long SMPP_TLV_SOURCE_NETWORK_TYPE;
    __declspec(property(get=GetSMPP_TLV_SOURCE_BEARER_TYPE))
    long SMPP_TLV_SOURCE_BEARER_TYPE;
    __declspec(property(get=GetSMPP_TLV_SOURCE_TELEMATICS_ID))
    long SMPP_TLV_SOURCE_TELEMATICS_ID;
    __declspec(property(get=GetSMPP_TLV_QOS_TIME_TO_LIVE))
    long SMPP_TLV_QOS_TIME_TO_LIVE;
    __declspec(property(get=GetSMPP_TLV_PAYLOAD_TYPE))
    long SMPP_TLV_PAYLOAD_TYPE;
    __declspec(property(get=GetSMPP_TLV_ADDITIONAL_STATUS_INFO_TEXT))
    long SMPP_TLV_ADDITIONAL_STATUS_INFO_TEXT;
    __declspec(property(get=GetSMPP_TLV_RECEIPTED_MESSAGE_ID))
    long SMPP_TLV_RECEIPTED_MESSAGE_ID;
    __declspec(property(get=GetSMPP_TLV_MS_MSG_WAIT_FACILITIES))
    long SMPP_TLV_MS_MSG_WAIT_FACILITIES;
    __declspec(property(get=GetSMPP_TLV_PRIVACY_INDICATOR))
    long SMPP_TLV_PRIVACY_INDICATOR;
    __declspec(property(get=GetSMPP_TLV_SOURCE_SUBADDRESS))
    long SMPP_TLV_SOURCE_SUBADDRESS;
    __declspec(property(get=GetSMPP_TLV_DEST_SUBADDRESS))
    long SMPP_TLV_DEST_SUBADDRESS;
    __declspec(property(get=GetSMPP_TLV_USER_MESSAGE_REFERENCE))
    long SMPP_TLV_USER_MESSAGE_REFERENCE;
    __declspec(property(get=GetSMPP_TLV_USER_RESPONSE_CODE))
    long SMPP_TLV_USER_RESPONSE_CODE;
    __declspec(property(get=GetSMPP_TLV_SOURCE_PORT))
    long SMPP_TLV_SOURCE_PORT;
    __declspec(property(get=GetSMPP_TLV_DESTINATION_PORT))
    long SMPP_TLV_DESTINATION_PORT;
    __declspec(property(get=GetSMPP_TLV_SAR_MSG_REF_NUM))
    long SMPP_TLV_SAR_MSG_REF_NUM;
    __declspec(property(get=GetSMPP_TLV_LANGUAGE_INDICATOR))
    long SMPP_TLV_LANGUAGE_INDICATOR;
    __declspec(property(get=GetSMPP_TLV_SAR_TOTAL_SEGMENTS))
    long SMPP_TLV_SAR_TOTAL_SEGMENTS;
    __declspec(property(get=GetSMPP_TLV_SAR_SEGMENT_SEQNUM))
    long SMPP_TLV_SAR_SEGMENT_SEQNUM;
    __declspec(property(get=GetSMPP_TLV_SC_INTERFACE_VERSION))
    long SMPP_TLV_SC_INTERFACE_VERSION;
    __declspec(property(get=GetSMPP_TLV_CALLBACK_NUM_PRES_IND))
    long SMPP_TLV_CALLBACK_NUM_PRES_IND;
    __declspec(property(get=GetSMPP_TLV_CALLBACK_NUM_ATAG))
    long SMPP_TLV_CALLBACK_NUM_ATAG;
    __declspec(property(get=GetSMPP_TLV_NUMBER_OF_MESSAGES))
    long SMPP_TLV_NUMBER_OF_MESSAGES;
    __declspec(property(get=GetSMPP_TLV_CALLBACK_NUM))
    long SMPP_TLV_CALLBACK_NUM;
    __declspec(property(get=GetSMPP_TLV_DPF_RESULT))
    long SMPP_TLV_DPF_RESULT;
    __declspec(property(get=GetSMPP_TLV_SET_DPF))
    long SMPP_TLV_SET_DPF;
    __declspec(property(get=GetSMPP_TLV_MS_AVAILABILITY_STATUS))
    long SMPP_TLV_MS_AVAILABILITY_STATUS;
    __declspec(property(get=GetSMPP_TLV_NETWORK_ERROR_CODE))
    long SMPP_TLV_NETWORK_ERROR_CODE;
    __declspec(property(get=GetSMPP_TLV_MESSAGE_PAYLOAD))
    long SMPP_TLV_MESSAGE_PAYLOAD;
    __declspec(property(get=GetSMPP_TLV_DELIVERY_FAILURE_REASON))
    long SMPP_TLV_DELIVERY_FAILURE_REASON;
    __declspec(property(get=GetSMPP_TLV_MORE_MESSAGES_TO_SEND))
    long SMPP_TLV_MORE_MESSAGES_TO_SEND;
    __declspec(property(get=GetSMPP_TLV_MESSAGE_STATE))
    long SMPP_TLV_MESSAGE_STATE;
    __declspec(property(get=GetSMPP_TLV_CONGESTION_STATE))
    long SMPP_TLV_CONGESTION_STATE;
    __declspec(property(get=GetSMPP_TLV_USSD_SERVICE_OP))
    long SMPP_TLV_USSD_SERVICE_OP;
    __declspec(property(get=GetWAPPUSH_SIGNAL_NONE))
    long WAPPUSH_SIGNAL_NONE;
    __declspec(property(get=GetWAPPUSH_SIGNAL_LOW))
    long WAPPUSH_SIGNAL_LOW;
    __declspec(property(get=GetWAPPUSH_SIGNAL_MEDIUM))
    long WAPPUSH_SIGNAL_MEDIUM;
    __declspec(property(get=GetWAPPUSH_SIGNAL_HIGH))
    long WAPPUSH_SIGNAL_HIGH;
    __declspec(property(get=GetWAPPUSH_SIGNAL_DELETE))
    long WAPPUSH_SIGNAL_DELETE;
    __declspec(property(get=GetSMPP_TLV_DISPLAY_TIME))
    long SMPP_TLV_DISPLAY_TIME;
    __declspec(property(get=GetSMPP_TLV_SMS_SIGNAL))
    long SMPP_TLV_SMS_SIGNAL;
    __declspec(property(get=GetSMPP_TLV_MS_VALIDITY))
    long SMPP_TLV_MS_VALIDITY;
    __declspec(property(get=GetSMPP_TLV_ALERT_ON_MESSAGE_DELIVERY))
    long SMPP_TLV_ALERT_ON_MESSAGE_DELIVERY;
    __declspec(property(get=GetSMPP_TLV_ITS_REPLY_TYPE))
    long SMPP_TLV_ITS_REPLY_TYPE;
    __declspec(property(get=GetSMPP_TLV_ITS_SESSION_INFO))
    long SMPP_TLV_ITS_SESSION_INFO;
    __declspec(property(get=GetSMPP_ESM_2ESME_DEFAULT))
    long SMPP_ESM_2ESME_DEFAULT;
    __declspec(property(get=GetSMPP_ESM_2ESME_DELIVERY_RECEIPT))
    long SMPP_ESM_2ESME_DELIVERY_RECEIPT;
    __declspec(property(get=GetSMPP_ESM_2ESME_DELIVERY_ACK))
    long SMPP_ESM_2ESME_DELIVERY_ACK;
    __declspec(property(get=GetSMPP_ESM_2ESME_MANUAL_ACK))
    long SMPP_ESM_2ESME_MANUAL_ACK;
    __declspec(property(get=GetSMPP_ESM_2ESME_CONVERSATION_ABORT))
    long SMPP_ESM_2ESME_CONVERSATION_ABORT;
    __declspec(property(get=GetSMPP_ESM_2ESME_INTERMEDIATE_DELIVERY_NOTIFY))
    long SMPP_ESM_2ESME_INTERMEDIATE_DELIVERY_NOTIFY;
    __declspec(property(get=GetSMPP_BIND_TRANSMITTER))
    long SMPP_BIND_TRANSMITTER;
    __declspec(property(get=GetSMPP_BIND_TRANSCEIVER))
    long SMPP_BIND_TRANSCEIVER;
    __declspec(property(get=GetSMPP_BIND_RECEIVER))
    long SMPP_BIND_RECEIVER;
    __declspec(property(get=GetSMPP_ESM_2SMSC_MODE_DEFAULT))
    long SMPP_ESM_2SMSC_MODE_DEFAULT;
    __declspec(property(get=GetSMPP_ESM_2SMSC_MODE_STOREFORWARD))
    long SMPP_ESM_2SMSC_MODE_STOREFORWARD;
    __declspec(property(get=GetSMPP_ESM_2SMSC_MODE_DATAGRAM))
    long SMPP_ESM_2SMSC_MODE_DATAGRAM;
    __declspec(property(get=GetSMPP_ESM_2SMSC_MODE_FORWARD))
    long SMPP_ESM_2SMSC_MODE_FORWARD;
    __declspec(property(get=GetSMPP_ESM_2SMSC_TYPE_DEFAULT))
    long SMPP_ESM_2SMSC_TYPE_DEFAULT;
    __declspec(property(get=GetSMPP_ESM_2SMSC_TYPE_DELIVERY_ACK))
    long SMPP_ESM_2SMSC_TYPE_DELIVERY_ACK;
    __declspec(property(get=GetSMPP_ESM_2SMSC_TYPE_MANUAL_ACK))
    long SMPP_ESM_2SMSC_TYPE_MANUAL_ACK;
    __declspec(property(get=GetSMPP_ESM_2SMSC_FEAT_NOTHING))
    long SMPP_ESM_2SMSC_FEAT_NOTHING;
    __declspec(property(get=GetSMPP_ESM_2SMSC_FEAT_UDHI))
    long SMPP_ESM_2SMSC_FEAT_UDHI;
    __declspec(property(get=GetDATACODING_DEFAULT))
    long DATACODING_DEFAULT;
    __declspec(property(get=GetDATACODING_8BIT_DATA))
    long DATACODING_8BIT_DATA;
    __declspec(property(get=GetDATACODING_UNICODE))
    long DATACODING_UNICODE;
    __declspec(property(get=GetGSM_DATACODING_ME_SPECIFIC))
    long GSM_DATACODING_ME_SPECIFIC;
    __declspec(property(get=GetGSM_DATACODING_SIM_SPECIFIC))
    long GSM_DATACODING_SIM_SPECIFIC;
    __declspec(property(get=GetGSM_DATACODING_TE_SPECIFIC))
    long GSM_DATACODING_TE_SPECIFIC;
    __declspec(property(get=GetDATACODING_FLASH))
    long DATACODING_FLASH;
    __declspec(property(get=GetSMPP_ESM_2SMSC_FEAT_SRP))
    long SMPP_ESM_2SMSC_FEAT_SRP;
    __declspec(property(get=GetSMPP_MULTIPARTMODE_UDH))
    long SMPP_MULTIPARTMODE_UDH;
    __declspec(property(get=GetSMPP_MULTIPARTMODE_UDH16BIT))
    long SMPP_MULTIPARTMODE_UDH16BIT;
    __declspec(property(get=GetSMPP_MULTIPARTMODE_SARTLV))
    long SMPP_MULTIPARTMODE_SARTLV;
    __declspec(property(get=GetSMPP_MULTIPARTMODE_PAYLOADTLV))
    long SMPP_MULTIPARTMODE_PAYLOADTLV;
    __declspec(property(get=GetSMPP_LOGLEVEL_MINIMAL))
    long SMPP_LOGLEVEL_MINIMAL;
    __declspec(property(get=GetSMPP_LOGLEVEL_NORMAL))
    long SMPP_LOGLEVEL_NORMAL;
    __declspec(property(get=GetSMPP_LOGLEVEL_VERBOSE))
    long SMPP_LOGLEVEL_VERBOSE;
    __declspec(property(get=GetDIALUP_PROVIDERTYPE_UCP))
    long DIALUP_PROVIDERTYPE_UCP;
    __declspec(property(get=GetDIALUP_PROVIDERTYPE_TAP_DEFAULT))
    long DIALUP_PROVIDERTYPE_TAP_DEFAULT;
    __declspec(property(get=GetDIALUP_PROVIDERTYPE_TAP_NOLF))
    long DIALUP_PROVIDERTYPE_TAP_NOLF;
    __declspec(property(get=GetDIALUP_PROVIDERTYPE_TAP_NOEOT))
    long DIALUP_PROVIDERTYPE_TAP_NOEOT;
    __declspec(property(get=GetSMPP_VERSION_33))
    long SMPP_VERSION_33;
    __declspec(property(get=GetSMPP_VERSION_34))
    long SMPP_VERSION_34;
    __declspec(property(get=GetSMPP_VERSION_50))
    long SMPP_VERSION_50;
    __declspec(property(get=GetSMPP_USEGSMENCODING_DISABLED))
    long SMPP_USEGSMENCODING_DISABLED;
    __declspec(property(get=GetSMPP_USEGSMENCODING_INANDOUT))
    long SMPP_USEGSMENCODING_INANDOUT;
    __declspec(property(get=GetSMPP_USEGSMENCODING_INCOMING))
    long SMPP_USEGSMENCODING_INCOMING;
    __declspec(property(get=GetSMPP_USEGSMENCODING_OUTGOING))
    long SMPP_USEGSMENCODING_OUTGOING;
    __declspec(property(get=GetGSM_BAUDRATE_110))
    long GSM_BAUDRATE_110;
    __declspec(property(get=GetGSM_BAUDRATE_300))
    long GSM_BAUDRATE_300;
    __declspec(property(get=GetGSM_BAUDRATE_600))
    long GSM_BAUDRATE_600;
    __declspec(property(get=GetGSM_BAUDRATE_1200))
    long GSM_BAUDRATE_1200;
    __declspec(property(get=GetGSM_BAUDRATE_2400))
    long GSM_BAUDRATE_2400;
    __declspec(property(get=GetGSM_BAUDRATE_4800))
    long GSM_BAUDRATE_4800;
    __declspec(property(get=GetGSM_BAUDRATE_9600))
    long GSM_BAUDRATE_9600;
    __declspec(property(get=GetGSM_BAUDRATE_14400))
    long GSM_BAUDRATE_14400;
    __declspec(property(get=GetGSM_BAUDRATE_19200))
    long GSM_BAUDRATE_19200;
    __declspec(property(get=GetGSM_BAUDRATE_38400))
    long GSM_BAUDRATE_38400;
    __declspec(property(get=GetGSM_BAUDRATE_56000))
    long GSM_BAUDRATE_56000;
    __declspec(property(get=GetSMPP_SUBMITMODE_SUBMITSM))
    long SMPP_SUBMITMODE_SUBMITSM;
    __declspec(property(get=GetSMPP_SUBMITMODE_DATASM))
    long SMPP_SUBMITMODE_DATASM;
    __declspec(property(get=GetGSM_BAUDRATE_57600))
    long GSM_BAUDRATE_57600;
    __declspec(property(get=GetGSM_BAUDRATE_64000))
    long GSM_BAUDRATE_64000;
    __declspec(property(get=GetGSM_BAUDRATE_115200))
    long GSM_BAUDRATE_115200;
    __declspec(property(get=GetGSM_BAUDRATE_128000))
    long GSM_BAUDRATE_128000;
    __declspec(property(get=GetGSM_BAUDRATE_230400))
    long GSM_BAUDRATE_230400;
    __declspec(property(get=GetGSM_BAUDRATE_256000))
    long GSM_BAUDRATE_256000;
    __declspec(property(get=GetGSM_BAUDRATE_460800))
    long GSM_BAUDRATE_460800;
    __declspec(property(get=GetGSM_BAUDRATE_921600))
    long GSM_BAUDRATE_921600;
    __declspec(property(get=GetGSM_BAUDRATE_DEFAULT))
    long GSM_BAUDRATE_DEFAULT;
    __declspec(property(get=GetSMPP_DELIVERMODE_DELIVERSM))
    long SMPP_DELIVERMODE_DELIVERSM;
    __declspec(property(get=GetSMPP_DELIVERMODE_DATASM))
    long SMPP_DELIVERMODE_DATASM;
    __declspec(property(get=GetDIALUP_DIALMODE_TONE))
    long DIALUP_DIALMODE_TONE;
    __declspec(property(get=GetDIALUP_DIALMODE_PULSE))
    long DIALUP_DIALMODE_PULSE;
    __declspec(property(get=GetSMPP_USEGSMENCODING_INCHARSET))
    long SMPP_USEGSMENCODING_INCHARSET;
    __declspec(property(get=GetSMPP_USEGSMENCODING_OUTCHARSET))
    long SMPP_USEGSMENCODING_OUTCHARSET;
    __declspec(property(get=GetSMPP_USEGSMENCODING_INOUTCHARS))
    long SMPP_USEGSMENCODING_INOUTCHARS;
    __declspec(property(get=GetTON_UNKNOWN))
    long TON_UNKNOWN;
    __declspec(property(get=GetTON_INTERNATIONAL))
    long TON_INTERNATIONAL;
    __declspec(property(get=GetSMPP_IPVERSION_4))
    long SMPP_IPVERSION_4;
    __declspec(property(get=GetSMPP_IPVERSION_6))
    long SMPP_IPVERSION_6;
    __declspec(property(get=GetSMPP_IPVERSION_BOTH))
    long SMPP_IPVERSION_BOTH;
    __declspec(property(get=GetTON_NATIONAL))
    long TON_NATIONAL;
    __declspec(property(get=GetTON_NETWORK_SPECIFIC))
    long TON_NETWORK_SPECIFIC;
    __declspec(property(get=GetTON_SUBSCRIBER_NUMBER))
    long TON_SUBSCRIBER_NUMBER;
    __declspec(property(get=GetTON_ALPHANUMERIC))
    long TON_ALPHANUMERIC;
    __declspec(property(get=GetSMPP_DATACODING_ASCII))
    long SMPP_DATACODING_ASCII;
    __declspec(property(get=GetSMPP_DATACODING_OCTET_UNSPEC))
    long SMPP_DATACODING_OCTET_UNSPEC;
    __declspec(property(get=GetSMPP_DATACODING_LATIN))
    long SMPP_DATACODING_LATIN;
    __declspec(property(get=GetSMPP_CERTIFICATESTORE_LOCALMACHINE))
    long SMPP_CERTIFICATESTORE_LOCALMACHINE;
    __declspec(property(get=GetSMPP_DATACODING_JIS_KANJI))
    long SMPP_DATACODING_JIS_KANJI;
    __declspec(property(get=GetSMPP_DATACODING_CYRILLIC))
    long SMPP_DATACODING_CYRILLIC;
    __declspec(property(get=GetSMPP_DATACODING_LATIN_HEBREW))
    long SMPP_DATACODING_LATIN_HEBREW;
    __declspec(property(get=GetSMPP_CERTIFICATESTORE_CURRENTUSER))
    long SMPP_CERTIFICATESTORE_CURRENTUSER;
    __declspec(property(get=GetSMPP_DATACODING_PICTOGRAM))
    long SMPP_DATACODING_PICTOGRAM;
    __declspec(property(get=GetSMPP_DATACODING_ISO_2022_JP))
    long SMPP_DATACODING_ISO_2022_JP;
    __declspec(property(get=GetSMPP_DATACODING_EXTENDED_KANJI_JIS))
    long SMPP_DATACODING_EXTENDED_KANJI_JIS;
    __declspec(property(get=GetSMPP_DATACODING_KS_C_5601))
    long SMPP_DATACODING_KS_C_5601;
    __declspec(property(get=GetSMPP_TON_ABBREVIATED))
    long SMPP_TON_ABBREVIATED;
    __declspec(property(get=GetSMPP_ESME_ROK))
    long SMPP_ESME_ROK;
    __declspec(property(get=GetSMPP_ESME_RINVMSGLEN))
    long SMPP_ESME_RINVMSGLEN;
    __declspec(property(get=GetSMPP_ESME_RINVCMDLEN))
    long SMPP_ESME_RINVCMDLEN;
    __declspec(property(get=GetSMPP_ESME_RINVCMDID))
    long SMPP_ESME_RINVCMDID;
    __declspec(property(get=GetSMPP_ESME_RINVBNDSTS))
    long SMPP_ESME_RINVBNDSTS;
    __declspec(property(get=GetSMPP_ESME_RALYBND))
    long SMPP_ESME_RALYBND;
    __declspec(property(get=GetSMPP_ESME_RINVPRTFLG))
    long SMPP_ESME_RINVPRTFLG;
    __declspec(property(get=GetSMPP_ESME_RINVREGDLVFLG))
    long SMPP_ESME_RINVREGDLVFLG;
    __declspec(property(get=GetSMPP_ESME_RSYSERR))
    long SMPP_ESME_RSYSERR;
    __declspec(property(get=GetSMPP_ESME_RINVSRCADR))
    long SMPP_ESME_RINVSRCADR;
    __declspec(property(get=GetSMPP_ESME_RINVDSTADR))
    long SMPP_ESME_RINVDSTADR;
    __declspec(property(get=GetSMPP_ESME_RINVMSGID))
    long SMPP_ESME_RINVMSGID;
    __declspec(property(get=GetSMPP_ESME_RBINDFAIL))
    long SMPP_ESME_RBINDFAIL;
    __declspec(property(get=GetSMPP_ESME_RINVPASWD))
    long SMPP_ESME_RINVPASWD;
    __declspec(property(get=GetSMPP_ESME_RINVSYSID))
    long SMPP_ESME_RINVSYSID;
    __declspec(property(get=GetSMPP_ESME_RCANCELFAIL))
    long SMPP_ESME_RCANCELFAIL;
    __declspec(property(get=GetSMPP_ESME_RREPLACEFAIL))
    long SMPP_ESME_RREPLACEFAIL;
    __declspec(property(get=GetSMPP_ESME_RMSGQFUL))
    long SMPP_ESME_RMSGQFUL;
    __declspec(property(get=GetSMPP_ESME_RINVSERTYP))
    long SMPP_ESME_RINVSERTYP;
    __declspec(property(get=GetSMPP_ESME_RINVNUMDESTS))
    long SMPP_ESME_RINVNUMDESTS;
    __declspec(property(get=GetSMPP_ESME_RINVDLNAME))
    long SMPP_ESME_RINVDLNAME;
    __declspec(property(get=GetSMPP_ESME_RINVDESTFLAG))
    long SMPP_ESME_RINVDESTFLAG;
    __declspec(property(get=GetSMPP_ESME_RINVSUBREP))
    long SMPP_ESME_RINVSUBREP;
    __declspec(property(get=GetSMPP_ESME_RINVESMCLASS))
    long SMPP_ESME_RINVESMCLASS;
    __declspec(property(get=GetSMPP_ESME_RCNTSUBDL))
    long SMPP_ESME_RCNTSUBDL;
    __declspec(property(get=GetSMPP_ESME_RSUBMITFAIL))
    long SMPP_ESME_RSUBMITFAIL;
    __declspec(property(get=GetSMPP_ESME_RINVSRCTON))
    long SMPP_ESME_RINVSRCTON;
    __declspec(property(get=GetSMPP_ESME_RINVSRCNPI))
    long SMPP_ESME_RINVSRCNPI;
    __declspec(property(get=GetSMPP_ESME_RINVDSTTON))
    long SMPP_ESME_RINVDSTTON;
    __declspec(property(get=GetSMPP_ESME_RINVDSTNPI))
    long SMPP_ESME_RINVDSTNPI;
    __declspec(property(get=GetSMPP_ESME_RINVSYSTYP))
    long SMPP_ESME_RINVSYSTYP;
    __declspec(property(get=GetSMPP_ESME_RINVREPFLAG))
    long SMPP_ESME_RINVREPFLAG;
    __declspec(property(get=GetSMPP_ESME_RINVNUMMSGS))
    long SMPP_ESME_RINVNUMMSGS;
    __declspec(property(get=GetSMPP_ESME_RTHROTTLED))
    long SMPP_ESME_RTHROTTLED;
    __declspec(property(get=GetSMPP_ESME_RINVSCHED))
    long SMPP_ESME_RINVSCHED;
    __declspec(property(get=GetSMPP_ESME_RINVEXPIRY))
    long SMPP_ESME_RINVEXPIRY;
    __declspec(property(get=GetSMPP_ESME_RINVDFTMSGID))
    long SMPP_ESME_RINVDFTMSGID;
    __declspec(property(get=GetSMPP_ESME_RX_T_APPN))
    long SMPP_ESME_RX_T_APPN;
    __declspec(property(get=GetSMPP_ESME_RX_P_APPN))
    long SMPP_ESME_RX_P_APPN;
    __declspec(property(get=GetSMPP_ESME_RX_R_APPN))
    long SMPP_ESME_RX_R_APPN;
    __declspec(property(get=GetSMPP_ESME_RQUERYFAIL))
    long SMPP_ESME_RQUERYFAIL;
    __declspec(property(get=GetSMPP_ESME_RINVOPTPARSTREAM))
    long SMPP_ESME_RINVOPTPARSTREAM;
    __declspec(property(get=GetSMPP_ESME_ROPTPARNOTALLWD))
    long SMPP_ESME_ROPTPARNOTALLWD;
    __declspec(property(get=GetSMPP_ESME_RINVPARLEN))
    long SMPP_ESME_RINVPARLEN;
    __declspec(property(get=GetSMPP_ESME_RMISSINGOPTPARAM))
    long SMPP_ESME_RMISSINGOPTPARAM;
    __declspec(property(get=GetSMPP_ESME_RINVOPTPARAMVAL))
    long SMPP_ESME_RINVOPTPARAMVAL;
    __declspec(property(get=GetSMPP_ESME_RDELIVERYFAILURE))
    long SMPP_ESME_RDELIVERYFAILURE;
    __declspec(property(get=GetSMPP_ESME_RUNKNOWNERR))
    long SMPP_ESME_RUNKNOWNERR;
    __declspec(property(get=GetDIALUP_DEVICESETTINGS_DEFAULT))
    long DIALUP_DEVICESETTINGS_DEFAULT;
    __declspec(property(get=GetDIALUP_DEVICESETTINGS_8N1))
    long DIALUP_DEVICESETTINGS_8N1;
    __declspec(property(get=GetDIALUP_DEVICESETTINGS_7E1))
    long DIALUP_DEVICESETTINGS_7E1;
    __declspec(property(get=GetGSM_MESSAGESTATE_RECEIVED_UNREAD))
    long GSM_MESSAGESTATE_RECEIVED_UNREAD;
    __declspec(property(get=GetGSM_MESSAGESTATE_RECEIVED_READ))
    long GSM_MESSAGESTATE_RECEIVED_READ;
    __declspec(property(get=GetGSM_MESSAGESTATE_STORED_UNSENT))
    long GSM_MESSAGESTATE_STORED_UNSENT;
    __declspec(property(get=GetGSM_MESSAGESTATE_STORED_SENT))
    long GSM_MESSAGESTATE_STORED_SENT;
    __declspec(property(get=GetGSM_MESSAGESTATE_ALL))
    long GSM_MESSAGESTATE_ALL;
    __declspec(property(get=GetNPI_UNKNOWN))
    long NPI_UNKNOWN;
    __declspec(property(get=GetNPI_ISDN))
    long NPI_ISDN;
    __declspec(property(get=GetNPI_DATA))
    long NPI_DATA;
    __declspec(property(get=GetNPI_TELEX))
    long NPI_TELEX;
    __declspec(property(get=GetNPI_NATIONAL))
    long NPI_NATIONAL;
    __declspec(property(get=GetNPI_PRIVATE))
    long NPI_PRIVATE;
    __declspec(property(get=GetNPI_ERMES))
    long NPI_ERMES;
    __declspec(property(get=GetSMPP_NPI_INTERNET))
    long SMPP_NPI_INTERNET;
    __declspec(property(get=GetNPI_LAND_MOBILE))
    long NPI_LAND_MOBILE;
    __declspec(property(get=GetSMPP_PRIORITYFLAG_BULK))
    long SMPP_PRIORITYFLAG_BULK;
    __declspec(property(get=GetSMPP_PRIORITYFLAG_NORMAL))
    long SMPP_PRIORITYFLAG_NORMAL;
    __declspec(property(get=GetSMPP_PRIORITYFLAG_URGENT))
    long SMPP_PRIORITYFLAG_URGENT;
    __declspec(property(get=GetSMPP_PRIORITYFLAG_VERY_URGENT))
    long SMPP_PRIORITYFLAG_VERY_URGENT;
    __declspec(property(get=GetLANGUAGE_LOCKINGSHIFT_BASIC))
    long LANGUAGE_LOCKINGSHIFT_BASIC;
    __declspec(property(get=GetLANGUAGE_LOCKINGSHIFT_TURKISH))
    long LANGUAGE_LOCKINGSHIFT_TURKISH;
    __declspec(property(get=GetLANGUAGE_LOCKINGSHIFT_PORTUGUESE))
    long LANGUAGE_LOCKINGSHIFT_PORTUGUESE;
    __declspec(property(get=GetLANGUAGE_LOCKINGSHIFT_SPANISH))
    long LANGUAGE_LOCKINGSHIFT_SPANISH;
    __declspec(property(get=GetLANGUAGE_LOCKINGSHIFT_BENGALI))
    long LANGUAGE_LOCKINGSHIFT_BENGALI;
    __declspec(property(get=GetLANGUAGE_LOCKINGSHIFT_GUJARATI))
    long LANGUAGE_LOCKINGSHIFT_GUJARATI;
    __declspec(property(get=GetLANGUAGE_LOCKINGSHIFT_HINDI))
    long LANGUAGE_LOCKINGSHIFT_HINDI;
    __declspec(property(get=GetSMPP_MESSAGESTATE_AX_WAITRESP))
    long SMPP_MESSAGESTATE_AX_WAITRESP;
    __declspec(property(get=GetSMPP_MESSAGESTATE_ENROUTE))
    long SMPP_MESSAGESTATE_ENROUTE;
    __declspec(property(get=GetSMPP_MESSAGESTATE_DELIVERED))
    long SMPP_MESSAGESTATE_DELIVERED;
    __declspec(property(get=GetSMPP_MESSAGESTATE_EXPIRED))
    long SMPP_MESSAGESTATE_EXPIRED;
    __declspec(property(get=GetSMPP_MESSAGESTATE_DELETED))
    long SMPP_MESSAGESTATE_DELETED;
    __declspec(property(get=GetSMPP_MESSAGESTATE_UNDELIVERABLE))
    long SMPP_MESSAGESTATE_UNDELIVERABLE;
    __declspec(property(get=GetSMPP_MESSAGESTATE_ACCEPTED))
    long SMPP_MESSAGESTATE_ACCEPTED;
    __declspec(property(get=GetSMPP_MESSAGESTATE_UNKNOWN))
    long SMPP_MESSAGESTATE_UNKNOWN;
    __declspec(property(get=GetSMPP_MESSAGESTATE_REJECTED))
    long SMPP_MESSAGESTATE_REJECTED;
    __declspec(property(get=GetSMPP_MESSAGESTATE_AX_RESPERROR))
    long SMPP_MESSAGESTATE_AX_RESPERROR;
    __declspec(property(get=GetSMPP_MESSAGESTATE_AX_NOCREDITS))
    long SMPP_MESSAGESTATE_AX_NOCREDITS;
    __declspec(property(get=GetSMPP_MESSAGESTATE_AX_RESPTO))
    long SMPP_MESSAGESTATE_AX_RESPTO;
    __declspec(property(get=GetSMPP_MESSAGESTATE_AX_RESPONDED))
    long SMPP_MESSAGESTATE_AX_RESPONDED;
    __declspec(property(get=GetLANGUAGE_LOCKINGSHIFT_KANNADA))
    long LANGUAGE_LOCKINGSHIFT_KANNADA;
    __declspec(property(get=GetLANGUAGE_LOCKINGSHIFT_MALAYALAM))
    long LANGUAGE_LOCKINGSHIFT_MALAYALAM;
    __declspec(property(get=GetLANGUAGE_LOCKINGSHIFT_ORIYA))
    long LANGUAGE_LOCKINGSHIFT_ORIYA;
    __declspec(property(get=GetLANGUAGE_LOCKINGSHIFT_PUNJABI))
    long LANGUAGE_LOCKINGSHIFT_PUNJABI;
    __declspec(property(get=GetLANGUAGE_LOCKINGSHIFT_TAMIL))
    long LANGUAGE_LOCKINGSHIFT_TAMIL;
    __declspec(property(get=GetLANGUAGE_LOCKINGSHIFT_TELUGU))
    long LANGUAGE_LOCKINGSHIFT_TELUGU;
    __declspec(property(get=GetLANGUAGE_LOCKINGSHIFT_URDU))
    long LANGUAGE_LOCKINGSHIFT_URDU;
    __declspec(property(get=GetGSM_STATUS_MESSAGE_DELIVERED_SUCCESSFULLY))
    long GSM_STATUS_MESSAGE_DELIVERED_SUCCESSFULLY;
    __declspec(property(get=GetGSM_STATUS_FORWARDED_STATUS_UNKNOWN))
    long GSM_STATUS_FORWARDED_STATUS_UNKNOWN;
    __declspec(property(get=GetGSM_STATUS_REPLACED))
    long GSM_STATUS_REPLACED;
    __declspec(property(get=GetGSM_STATUS_CONGESTION_STILL_TRYING))
    long GSM_STATUS_CONGESTION_STILL_TRYING;
    __declspec(property(get=GetGSM_STATUS_RECIPIENT_BUSY_STILL_TRYING))
    long GSM_STATUS_RECIPIENT_BUSY_STILL_TRYING;
    __declspec(property(get=GetGSM_STATUS_NO_RESPONSE_STILL_TRYING))
    long GSM_STATUS_NO_RESPONSE_STILL_TRYING;
    __declspec(property(get=GetGSM_STATUS_SERVICE_REJECTED_STILL_TRYING))
    long GSM_STATUS_SERVICE_REJECTED_STILL_TRYING;
    __declspec(property(get=GetGSM_STATUS_QOS_NOT_AVAILABLE_STILL_TRYING))
    long GSM_STATUS_QOS_NOT_AVAILABLE_STILL_TRYING;
    __declspec(property(get=GetGSM_STATUS_RECIPIENT_ERROR_STILL_TRYING))
    long GSM_STATUS_RECIPIENT_ERROR_STILL_TRYING;
    __declspec(property(get=GetHTTP_PLACEHOLDER_USERTAG))
    _bstr_t HTTP_PLACEHOLDER_USERTAG;
    __declspec(property(get=GetHTTP_PLACEHOLDER_TOADDRESS))
    _bstr_t HTTP_PLACEHOLDER_TOADDRESS;
    __declspec(property(get=GetHTTP_PLACEHOLDER_FROMADDRESS))
    _bstr_t HTTP_PLACEHOLDER_FROMADDRESS;
    __declspec(property(get=GetHTTP_PLACEHOLDER_BODY))
    _bstr_t HTTP_PLACEHOLDER_BODY;
    __declspec(property(get=GetHTTP_PLACEHOLDER_BODYASHEX))
    _bstr_t HTTP_PLACEHOLDER_BODYASHEX;
    __declspec(property(get=GetHTTP_PLACEHOLDER_BODYASBASE64))
    _bstr_t HTTP_PLACEHOLDER_BODYASBASE64;
    __declspec(property(get=GetHTTP_PLACEHOLDER_DELIVERYREPORT))
    _bstr_t HTTP_PLACEHOLDER_DELIVERYREPORT;
    __declspec(property(get=GetHTTP_PLACEHOLDER_TOADDRESSTON))
    _bstr_t HTTP_PLACEHOLDER_TOADDRESSTON;
    __declspec(property(get=GetHTTP_PLACEHOLDER_TOADDRESSNPI))
    _bstr_t HTTP_PLACEHOLDER_TOADDRESSNPI;
    __declspec(property(get=GetHTTP_PLACEHOLDER_FROMADDRESSTON))
    _bstr_t HTTP_PLACEHOLDER_FROMADDRESSTON;
    __declspec(property(get=GetHTTP_PLACEHOLDER_FROMADDRESSNPI))
    _bstr_t HTTP_PLACEHOLDER_FROMADDRESSNPI;
    __declspec(property(get=GetHTTP_PLACEHOLDER_PROTOCOLID))
    _bstr_t HTTP_PLACEHOLDER_PROTOCOLID;
    __declspec(property(get=GetHTTP_PLACEHOLDER_UDHI))
    _bstr_t HTTP_PLACEHOLDER_UDHI;
    __declspec(property(get=GetHTTP_PLACEHOLDER_DATACODING))
    _bstr_t HTTP_PLACEHOLDER_DATACODING;
    __declspec(property(get=GetHTTP_PLACEHOLDER_USERTAGSTRING))
    _bstr_t HTTP_PLACEHOLDER_USERTAGSTRING;
    __declspec(property(get=GetGSM_STATUS_RPC_ERROR))
    long GSM_STATUS_RPC_ERROR;
    __declspec(property(get=GetGSM_STATUS_INCOMPATIBLE_DESTINATION))
    long GSM_STATUS_INCOMPATIBLE_DESTINATION;
    __declspec(property(get=GetGSM_STATUS_CONNECTION_REJECTED))
    long GSM_STATUS_CONNECTION_REJECTED;
    __declspec(property(get=GetGSM_STATUS_NOT_OBTAINABLE))
    long GSM_STATUS_NOT_OBTAINABLE;
    __declspec(property(get=GetGSM_STATUS_QOS_NOT_AVAILABLE))
    long GSM_STATUS_QOS_NOT_AVAILABLE;
    __declspec(property(get=GetGSM_STATUS_NO_INTERNETWORKING_AVAILABLE))
    long GSM_STATUS_NO_INTERNETWORKING_AVAILABLE;
    __declspec(property(get=GetGSM_STATUS_MESSAGE_EXPIRED))
    long GSM_STATUS_MESSAGE_EXPIRED;
    __declspec(property(get=GetGSM_STATUS_MESSAGE_DELETED_BY_SENDER))
    long GSM_STATUS_MESSAGE_DELETED_BY_SENDER;
    __declspec(property(get=GetGSM_STATUS_MESSAGE_DELETED_BY_SMSC))
    long GSM_STATUS_MESSAGE_DELETED_BY_SMSC;
    __declspec(property(get=GetGSM_STATUS_DOES_NOT_EXIST))
    long GSM_STATUS_DOES_NOT_EXIST;
    __declspec(property(get=GetGSM_MESSAGEFORMAT_PDU))
    long GSM_MESSAGEFORMAT_PDU;
    __declspec(property(get=GetGSM_MESSAGEFORMAT_TEXT))
    long GSM_MESSAGEFORMAT_TEXT;
    __declspec(property(get=GetGSM_MESSAGEFORMAT_AUTO))
    long GSM_MESSAGEFORMAT_AUTO;
    __declspec(property(get=GetMULTIPART_ACCEPT))
    long MULTIPART_ACCEPT;
    __declspec(property(get=GetMULTIPART_TRUNCATE))
    long MULTIPART_TRUNCATE;
    __declspec(property(get=GetMULTIPART_REJECT))
    long MULTIPART_REJECT;
    __declspec(property(get=GetLANGUAGE_SINGLESHIFT_BASIC))
    long LANGUAGE_SINGLESHIFT_BASIC;
    __declspec(property(get=GetLANGUAGE_SINGLESHIFT_TURKISH))
    long LANGUAGE_SINGLESHIFT_TURKISH;
    __declspec(property(get=GetLANGUAGE_SINGLESHIFT_SPANISH))
    long LANGUAGE_SINGLESHIFT_SPANISH;
    __declspec(property(get=GetLANGUAGE_SINGLESHIFT_PORTUGUESE))
    long LANGUAGE_SINGLESHIFT_PORTUGUESE;
    __declspec(property(get=GetLANGUAGE_SINGLESHIFT_BENGALI))
    long LANGUAGE_SINGLESHIFT_BENGALI;
    __declspec(property(get=GetLANGUAGE_SINGLESHIFT_GUJARATI))
    long LANGUAGE_SINGLESHIFT_GUJARATI;
    __declspec(property(get=GetLANGUAGE_SINGLESHIFT_HINDI))
    long LANGUAGE_SINGLESHIFT_HINDI;
    __declspec(property(get=GetLANGUAGE_SINGLESHIFT_KANNADA))
    long LANGUAGE_SINGLESHIFT_KANNADA;
    __declspec(property(get=GetLANGUAGE_SINGLESHIFT_MALAYALAM))
    long LANGUAGE_SINGLESHIFT_MALAYALAM;
    __declspec(property(get=GetLANGUAGE_SINGLESHIFT_ORIYA))
    long LANGUAGE_SINGLESHIFT_ORIYA;
    __declspec(property(get=GetSMPP_SESSIONSTATE_CONNECTED))
    long SMPP_SESSIONSTATE_CONNECTED;
    __declspec(property(get=GetSMPP_SESSIONSTATE_DISCONNECTED))
    long SMPP_SESSIONSTATE_DISCONNECTED;
    __declspec(property(get=GetSMPP_SESSIONSTATE_BINDING))
    long SMPP_SESSIONSTATE_BINDING;
    __declspec(property(get=GetSMPP_SESSIONSTATE_BOUND_TX))
    long SMPP_SESSIONSTATE_BOUND_TX;
    __declspec(property(get=GetSMPP_SESSIONSTATE_BOUND_RX))
    long SMPP_SESSIONSTATE_BOUND_RX;
    __declspec(property(get=GetSMPP_SESSIONSTATE_BOUND_TRX))
    long SMPP_SESSIONSTATE_BOUND_TRX;
    __declspec(property(get=GetLANGUAGE_SINGLESHIFT_PUNJABI))
    long LANGUAGE_SINGLESHIFT_PUNJABI;
    __declspec(property(get=GetLANGUAGE_SINGLESHIFT_TAMIL))
    long LANGUAGE_SINGLESHIFT_TAMIL;
    __declspec(property(get=GetLANGUAGE_SINGLESHIFT_TELUGU))
    long LANGUAGE_SINGLESHIFT_TELUGU;
    __declspec(property(get=GetLANGUAGE_SINGLESHIFT_URDU))
    long LANGUAGE_SINGLESHIFT_URDU;
    __declspec(property(get=GetGSM_PREFIXSMSC_ENABLED))
    long GSM_PREFIXSMSC_ENABLED;
    __declspec(property(get=GetGSM_PREFIXSMSC_DISABLED))
    long GSM_PREFIXSMSC_DISABLED;
    __declspec(property(get=GetGSM_PREFIXSMSC_AUTO))
    long GSM_PREFIXSMSC_AUTO;
    __declspec(property(get=GetGSM_STORAGETYPE_SIM))
    long GSM_STORAGETYPE_SIM;
    __declspec(property(get=GetGSM_STORAGETYPE_MEMORY))
    long GSM_STORAGETYPE_MEMORY;
    __declspec(property(get=GetGSM_STORAGETYPE_COMBINED))
    long GSM_STORAGETYPE_COMBINED;
    __declspec(property(get=GetGSM_STORAGETYPE_STATUS))
    long GSM_STORAGETYPE_STATUS;
    __declspec(property(get=GetGSM_STORAGETYPE_ALL))
    long GSM_STORAGETYPE_ALL;
    __declspec(property(get=GetGSM_TCPMODE_RAW))
    long GSM_TCPMODE_RAW;
    __declspec(property(get=GetGSM_TCPMODE_TELNET))
    long GSM_TCPMODE_TELNET;
    __declspec(property(get=GetGSM_TCPMODE_TELNET_WITH_COMCONTROL))
    long GSM_TCPMODE_TELNET_WITH_COMCONTROL;
    __declspec(property(get=GetBODYFORMAT_TEXT))
    long BODYFORMAT_TEXT;
    __declspec(property(get=GetBODYFORMAT_HEX))
    long BODYFORMAT_HEX;
    __declspec(property(get=GetGSM_FO_REPLYPATH_EXISTS))
    long GSM_FO_REPLYPATH_EXISTS;
    __declspec(property(get=GetGSM_FO_UDHI))
    long GSM_FO_UDHI;
    __declspec(property(get=GetGSM_FO_STATUS_REPORT))
    long GSM_FO_STATUS_REPORT;
    __declspec(property(get=GetGSM_FO_VALIDITY_NONE))
    long GSM_FO_VALIDITY_NONE;
    __declspec(property(get=GetGSM_FO_VALIDITY_RELATIVE))
    long GSM_FO_VALIDITY_RELATIVE;
    __declspec(property(get=GetGSM_FO_VALIDITY_ENHANCED))
    long GSM_FO_VALIDITY_ENHANCED;
    __declspec(property(get=GetGSM_FO_VALIDITY_ABSOLUTE))
    long GSM_FO_VALIDITY_ABSOLUTE;

    //
    // Wrapper methods for error-handling
    //

    long GetSMPP_BIND_TRANSMITTER ( );
    long GetSMPP_BIND_TRANSCEIVER ( );
    long GetSMPP_BIND_RECEIVER ( );
    long GetSMPP_VERSION_33 ( );
    long GetSMPP_VERSION_34 ( );
    long GetSMPP_VERSION_50 ( );
    long GetTON_UNKNOWN ( );
    long GetTON_INTERNATIONAL ( );
    long GetTON_NATIONAL ( );
    long GetTON_NETWORK_SPECIFIC ( );
    long GetTON_SUBSCRIBER_NUMBER ( );
    long GetTON_ALPHANUMERIC ( );
    long GetSMPP_TON_ABBREVIATED ( );
    long GetNPI_UNKNOWN ( );
    long GetNPI_ISDN ( );
    long GetNPI_DATA ( );
    long GetNPI_TELEX ( );
    long GetNPI_NATIONAL ( );
    long GetNPI_PRIVATE ( );
    long GetNPI_ERMES ( );
    long GetSMPP_NPI_INTERNET ( );
    long GetNPI_LAND_MOBILE ( );
    long GetMULTIPART_ACCEPT ( );
    long GetMULTIPART_TRUNCATE ( );
    long GetMULTIPART_REJECT ( );
    long GetBODYFORMAT_TEXT ( );
    long GetBODYFORMAT_HEX ( );
    long GetSMPP_ESM_2ESME_DEFAULT ( );
    long GetSMPP_ESM_2ESME_DELIVERY_RECEIPT ( );
    long GetSMPP_ESM_2ESME_DELIVERY_ACK ( );
    long GetSMPP_ESM_2ESME_MANUAL_ACK ( );
    long GetSMPP_ESM_2ESME_CONVERSATION_ABORT ( );
    long GetSMPP_ESM_2ESME_INTERMEDIATE_DELIVERY_NOTIFY ( );
    long GetSMPP_ESM_2SMSC_MODE_DEFAULT ( );
    long GetSMPP_ESM_2SMSC_MODE_STOREFORWARD ( );
    long GetSMPP_ESM_2SMSC_MODE_DATAGRAM ( );
    long GetSMPP_ESM_2SMSC_MODE_FORWARD ( );
    long GetSMPP_ESM_2SMSC_TYPE_DEFAULT ( );
    long GetSMPP_ESM_2SMSC_TYPE_DELIVERY_ACK ( );
    long GetSMPP_ESM_2SMSC_TYPE_MANUAL_ACK ( );
    long GetSMPP_ESM_2SMSC_FEAT_NOTHING ( );
    long GetSMPP_ESM_2SMSC_FEAT_UDHI ( );
    long GetSMPP_ESM_2SMSC_FEAT_SRP ( );
    long GetSMPP_USEGSMENCODING_DISABLED ( );
    long GetSMPP_USEGSMENCODING_INANDOUT ( );
    long GetSMPP_USEGSMENCODING_INCOMING ( );
    long GetSMPP_USEGSMENCODING_OUTGOING ( );
    long GetSMPP_DATACODING_ASCII ( );
    long GetSMPP_DATACODING_OCTET_UNSPEC ( );
    long GetSMPP_DATACODING_LATIN ( );
    long GetSMPP_DATACODING_JIS_KANJI ( );
    long GetSMPP_DATACODING_CYRILLIC ( );
    long GetSMPP_DATACODING_LATIN_HEBREW ( );
    long GetSMPP_DATACODING_PICTOGRAM ( );
    long GetSMPP_DATACODING_ISO_2022_JP ( );
    long GetSMPP_DATACODING_EXTENDED_KANJI_JIS ( );
    long GetSMPP_DATACODING_KS_C_5601 ( );
    long GetSMPP_PRIORITYFLAG_BULK ( );
    long GetSMPP_PRIORITYFLAG_NORMAL ( );
    long GetSMPP_PRIORITYFLAG_URGENT ( );
    long GetSMPP_PRIORITYFLAG_VERY_URGENT ( );
    long GetSMPP_MESSAGESTATE_AX_WAITRESP ( );
    long GetSMPP_MESSAGESTATE_ENROUTE ( );
    long GetSMPP_MESSAGESTATE_DELIVERED ( );
    long GetSMPP_MESSAGESTATE_EXPIRED ( );
    long GetSMPP_MESSAGESTATE_DELETED ( );
    long GetSMPP_MESSAGESTATE_UNDELIVERABLE ( );
    long GetSMPP_MESSAGESTATE_ACCEPTED ( );
    long GetSMPP_MESSAGESTATE_UNKNOWN ( );
    long GetSMPP_MESSAGESTATE_REJECTED ( );
    long GetSMPP_MESSAGESTATE_AX_RESPERROR ( );
    long GetSMPP_MESSAGESTATE_AX_NOCREDITS ( );
    long GetSMPP_MESSAGESTATE_AX_RESPTO ( );
    long GetSMPP_MESSAGESTATE_AX_RESPONDED ( );
    long GetSMPP_SESSIONSTATE_CONNECTED ( );
    long GetSMPP_SESSIONSTATE_DISCONNECTED ( );
    long GetSMPP_SESSIONSTATE_BINDING ( );
    long GetSMPP_SESSIONSTATE_BOUND_TX ( );
    long GetSMPP_SESSIONSTATE_BOUND_RX ( );
    long GetSMPP_SESSIONSTATE_BOUND_TRX ( );
    long GetSMPP_TLV_DEST_ADDR_SUBUNIT ( );
    long GetSMPP_TLV_DEST_NETWORK_TYPE ( );
    long GetSMPP_TLV_DEST_BEARER_TYPE ( );
    long GetSMPP_TLV_DEST_TELEMATICS_ID ( );
    long GetSMPP_TLV_SOURCE_ADDR_SUBUNIT ( );
    long GetSMPP_TLV_SOURCE_NETWORK_TYPE ( );
    long GetSMPP_TLV_SOURCE_BEARER_TYPE ( );
    long GetSMPP_TLV_SOURCE_TELEMATICS_ID ( );
    long GetSMPP_TLV_QOS_TIME_TO_LIVE ( );
    long GetSMPP_TLV_PAYLOAD_TYPE ( );
    long GetSMPP_TLV_ADDITIONAL_STATUS_INFO_TEXT ( );
    long GetSMPP_TLV_RECEIPTED_MESSAGE_ID ( );
    long GetSMPP_TLV_MS_MSG_WAIT_FACILITIES ( );
    long GetSMPP_TLV_PRIVACY_INDICATOR ( );
    long GetSMPP_TLV_SOURCE_SUBADDRESS ( );
    long GetSMPP_TLV_DEST_SUBADDRESS ( );
    long GetSMPP_TLV_USER_MESSAGE_REFERENCE ( );
    long GetSMPP_TLV_USER_RESPONSE_CODE ( );
    long GetSMPP_TLV_SOURCE_PORT ( );
    long GetSMPP_TLV_DESTINATION_PORT ( );
    long GetSMPP_TLV_SAR_MSG_REF_NUM ( );
    long GetSMPP_TLV_LANGUAGE_INDICATOR ( );
    long GetSMPP_TLV_SAR_TOTAL_SEGMENTS ( );
    long GetSMPP_TLV_SAR_SEGMENT_SEQNUM ( );
    long GetSMPP_TLV_SC_INTERFACE_VERSION ( );
    long GetSMPP_TLV_CALLBACK_NUM_PRES_IND ( );
    long GetSMPP_TLV_CALLBACK_NUM_ATAG ( );
    long GetSMPP_TLV_NUMBER_OF_MESSAGES ( );
    long GetSMPP_TLV_CALLBACK_NUM ( );
    long GetSMPP_TLV_DPF_RESULT ( );
    long GetSMPP_TLV_SET_DPF ( );
    long GetSMPP_TLV_MS_AVAILABILITY_STATUS ( );
    long GetSMPP_TLV_NETWORK_ERROR_CODE ( );
    long GetSMPP_TLV_MESSAGE_PAYLOAD ( );
    long GetSMPP_TLV_DELIVERY_FAILURE_REASON ( );
    long GetSMPP_TLV_MORE_MESSAGES_TO_SEND ( );
    long GetSMPP_TLV_MESSAGE_STATE ( );
    long GetSMPP_TLV_CONGESTION_STATE ( );
    long GetSMPP_TLV_USSD_SERVICE_OP ( );
    long GetSMPP_TLV_DISPLAY_TIME ( );
    long GetSMPP_TLV_SMS_SIGNAL ( );
    long GetSMPP_TLV_MS_VALIDITY ( );
    long GetSMPP_TLV_ALERT_ON_MESSAGE_DELIVERY ( );
    long GetSMPP_TLV_ITS_REPLY_TYPE ( );
    long GetSMPP_TLV_ITS_SESSION_INFO ( );
    long GetSMPP_MULTIPARTMODE_UDH ( );
    long GetSMPP_MULTIPARTMODE_UDH16BIT ( );
    long GetSMPP_MULTIPARTMODE_SARTLV ( );
    long GetSMPP_MULTIPARTMODE_PAYLOADTLV ( );
    long GetSMPP_LOGLEVEL_MINIMAL ( );
    long GetSMPP_LOGLEVEL_NORMAL ( );
    long GetSMPP_LOGLEVEL_VERBOSE ( );
    long GetSMPP_SUBMITMODE_SUBMITSM ( );
    long GetSMPP_SUBMITMODE_DATASM ( );
    long GetSMPP_DELIVERMODE_DELIVERSM ( );
    long GetSMPP_DELIVERMODE_DATASM ( );
    long GetSMPP_USEGSMENCODING_INCHARSET ( );
    long GetSMPP_USEGSMENCODING_OUTCHARSET ( );
    long GetSMPP_USEGSMENCODING_INOUTCHARS ( );
    long GetSMPP_IPVERSION_4 ( );
    long GetSMPP_IPVERSION_6 ( );
    long GetSMPP_IPVERSION_BOTH ( );
    long GetSMPP_CERTIFICATESTORE_LOCALMACHINE ( );
    long GetSMPP_CERTIFICATESTORE_CURRENTUSER ( );
    long GetSMPP_ESME_ROK ( );
    long GetSMPP_ESME_RINVMSGLEN ( );
    long GetSMPP_ESME_RINVCMDLEN ( );
    long GetSMPP_ESME_RINVCMDID ( );
    long GetSMPP_ESME_RINVBNDSTS ( );
    long GetSMPP_ESME_RALYBND ( );
    long GetSMPP_ESME_RINVPRTFLG ( );
    long GetSMPP_ESME_RINVREGDLVFLG ( );
    long GetSMPP_ESME_RSYSERR ( );
    long GetSMPP_ESME_RINVSRCADR ( );
    long GetSMPP_ESME_RINVDSTADR ( );
    long GetSMPP_ESME_RINVMSGID ( );
    long GetSMPP_ESME_RBINDFAIL ( );
    long GetSMPP_ESME_RINVPASWD ( );
    long GetSMPP_ESME_RINVSYSID ( );
    long GetSMPP_ESME_RCANCELFAIL ( );
    long GetSMPP_ESME_RREPLACEFAIL ( );
    long GetSMPP_ESME_RMSGQFUL ( );
    long GetSMPP_ESME_RINVSERTYP ( );
    long GetSMPP_ESME_RINVNUMDESTS ( );
    long GetSMPP_ESME_RINVDLNAME ( );
    long GetSMPP_ESME_RINVDESTFLAG ( );
    long GetSMPP_ESME_RINVSUBREP ( );
    long GetSMPP_ESME_RINVESMCLASS ( );
    long GetSMPP_ESME_RCNTSUBDL ( );
    long GetSMPP_ESME_RSUBMITFAIL ( );
    long GetSMPP_ESME_RINVSRCTON ( );
    long GetSMPP_ESME_RINVSRCNPI ( );
    long GetSMPP_ESME_RINVDSTTON ( );
    long GetSMPP_ESME_RINVDSTNPI ( );
    long GetSMPP_ESME_RINVSYSTYP ( );
    long GetSMPP_ESME_RINVREPFLAG ( );
    long GetSMPP_ESME_RINVNUMMSGS ( );
    long GetSMPP_ESME_RTHROTTLED ( );
    long GetSMPP_ESME_RINVSCHED ( );
    long GetSMPP_ESME_RINVEXPIRY ( );
    long GetSMPP_ESME_RINVDFTMSGID ( );
    long GetSMPP_ESME_RX_T_APPN ( );
    long GetSMPP_ESME_RX_P_APPN ( );
    long GetSMPP_ESME_RX_R_APPN ( );
    long GetSMPP_ESME_RQUERYFAIL ( );
    long GetSMPP_ESME_RINVOPTPARSTREAM ( );
    long GetSMPP_ESME_ROPTPARNOTALLWD ( );
    long GetSMPP_ESME_RINVPARLEN ( );
    long GetSMPP_ESME_RMISSINGOPTPARAM ( );
    long GetSMPP_ESME_RINVOPTPARAMVAL ( );
    long GetSMPP_ESME_RDELIVERYFAILURE ( );
    long GetSMPP_ESME_RUNKNOWNERR ( );
    long GetGSM_STATUS_MESSAGE_DELIVERED_SUCCESSFULLY ( );
    long GetGSM_STATUS_FORWARDED_STATUS_UNKNOWN ( );
    long GetGSM_STATUS_REPLACED ( );
    long GetGSM_STATUS_CONGESTION_STILL_TRYING ( );
    long GetGSM_STATUS_RECIPIENT_BUSY_STILL_TRYING ( );
    long GetGSM_STATUS_NO_RESPONSE_STILL_TRYING ( );
    long GetGSM_STATUS_SERVICE_REJECTED_STILL_TRYING ( );
    long GetGSM_STATUS_QOS_NOT_AVAILABLE_STILL_TRYING ( );
    long GetGSM_STATUS_RECIPIENT_ERROR_STILL_TRYING ( );
    long GetGSM_STATUS_RPC_ERROR ( );
    long GetGSM_STATUS_INCOMPATIBLE_DESTINATION ( );
    long GetGSM_STATUS_CONNECTION_REJECTED ( );
    long GetGSM_STATUS_NOT_OBTAINABLE ( );
    long GetGSM_STATUS_QOS_NOT_AVAILABLE ( );
    long GetGSM_STATUS_NO_INTERNETWORKING_AVAILABLE ( );
    long GetGSM_STATUS_MESSAGE_EXPIRED ( );
    long GetGSM_STATUS_MESSAGE_DELETED_BY_SENDER ( );
    long GetGSM_STATUS_MESSAGE_DELETED_BY_SMSC ( );
    long GetGSM_STATUS_DOES_NOT_EXIST ( );
    long GetGSM_STORAGETYPE_SIM ( );
    long GetGSM_STORAGETYPE_MEMORY ( );
    long GetGSM_STORAGETYPE_COMBINED ( );
    long GetGSM_STORAGETYPE_STATUS ( );
    long GetGSM_STORAGETYPE_ALL ( );
    long GetGSM_FO_REPLYPATH_EXISTS ( );
    long GetGSM_FO_UDHI ( );
    long GetGSM_FO_STATUS_REPORT ( );
    long GetGSM_FO_VALIDITY_NONE ( );
    long GetGSM_FO_VALIDITY_RELATIVE ( );
    long GetGSM_FO_VALIDITY_ENHANCED ( );
    long GetGSM_FO_VALIDITY_ABSOLUTE ( );
    long GetGSM_FO_REJECT_DUPLICATES ( );
    long GetGSM_FO_SUBMIT_SM ( );
    long GetGSM_FO_DELIVER_SM ( );
    long GetGSM_FO_STATUS_SM ( );
    long GetDATACODING_DEFAULT ( );
    long GetDATACODING_8BIT_DATA ( );
    long GetDATACODING_UNICODE ( );
    long GetGSM_DATACODING_ME_SPECIFIC ( );
    long GetGSM_DATACODING_SIM_SPECIFIC ( );
    long GetGSM_DATACODING_TE_SPECIFIC ( );
    long GetDATACODING_FLASH ( );
    long GetGSM_BAUDRATE_110 ( );
    long GetGSM_BAUDRATE_300 ( );
    long GetGSM_BAUDRATE_600 ( );
    long GetGSM_BAUDRATE_1200 ( );
    long GetGSM_BAUDRATE_2400 ( );
    long GetGSM_BAUDRATE_4800 ( );
    long GetGSM_BAUDRATE_9600 ( );
    long GetGSM_BAUDRATE_14400 ( );
    long GetGSM_BAUDRATE_19200 ( );
    long GetGSM_BAUDRATE_38400 ( );
    long GetGSM_BAUDRATE_56000 ( );
    long GetGSM_BAUDRATE_57600 ( );
    long GetGSM_BAUDRATE_64000 ( );
    long GetGSM_BAUDRATE_115200 ( );
    long GetGSM_BAUDRATE_128000 ( );
    long GetGSM_BAUDRATE_230400 ( );
    long GetGSM_BAUDRATE_256000 ( );
    long GetGSM_BAUDRATE_460800 ( );
    long GetGSM_BAUDRATE_921600 ( );
    long GetGSM_BAUDRATE_DEFAULT ( );
    long GetGSM_MESSAGESTATE_RECEIVED_UNREAD ( );
    long GetGSM_MESSAGESTATE_RECEIVED_READ ( );
    long GetGSM_MESSAGESTATE_STORED_UNSENT ( );
    long GetGSM_MESSAGESTATE_STORED_SENT ( );
    long GetGSM_MESSAGESTATE_ALL ( );
    long GetGSM_MESSAGEFORMAT_PDU ( );
    long GetGSM_MESSAGEFORMAT_TEXT ( );
    long GetGSM_MESSAGEFORMAT_AUTO ( );
    _bstr_t GetHTTP_PLACEHOLDER_USERTAG ( );
    _bstr_t GetHTTP_PLACEHOLDER_TOADDRESS ( );
    _bstr_t GetHTTP_PLACEHOLDER_FROMADDRESS ( );
    _bstr_t GetHTTP_PLACEHOLDER_BODY ( );
    _bstr_t GetHTTP_PLACEHOLDER_BODYASHEX ( );
    _bstr_t GetHTTP_PLACEHOLDER_BODYASBASE64 ( );
    _bstr_t GetHTTP_PLACEHOLDER_DELIVERYREPORT ( );
    _bstr_t GetHTTP_PLACEHOLDER_TOADDRESSTON ( );
    _bstr_t GetHTTP_PLACEHOLDER_TOADDRESSNPI ( );
    _bstr_t GetHTTP_PLACEHOLDER_FROMADDRESSTON ( );
    _bstr_t GetHTTP_PLACEHOLDER_FROMADDRESSNPI ( );
    _bstr_t GetHTTP_PLACEHOLDER_PROTOCOLID ( );
    _bstr_t GetHTTP_PLACEHOLDER_UDHI ( );
    _bstr_t GetHTTP_PLACEHOLDER_DATACODING ( );
    _bstr_t GetHTTP_PLACEHOLDER_USERTAGSTRING ( );
    long GetGSM_PREFIXSMSC_ENABLED ( );
    long GetGSM_PREFIXSMSC_DISABLED ( );
    long GetGSM_PREFIXSMSC_AUTO ( );
    long GetGSM_TCPMODE_RAW ( );
    long GetGSM_TCPMODE_TELNET ( );
    long GetGSM_TCPMODE_TELNET_WITH_COMCONTROL ( );
    long GetWAPPUSH_SIGNAL_NONE ( );
    long GetWAPPUSH_SIGNAL_LOW ( );
    long GetWAPPUSH_SIGNAL_MEDIUM ( );
    long GetWAPPUSH_SIGNAL_HIGH ( );
    long GetWAPPUSH_SIGNAL_DELETE ( );
    long GetDIALUP_PROVIDERTYPE_UCP ( );
    long GetDIALUP_PROVIDERTYPE_TAP_DEFAULT ( );
    long GetDIALUP_PROVIDERTYPE_TAP_NOLF ( );
    long GetDIALUP_PROVIDERTYPE_TAP_NOEOT ( );
    long GetDIALUP_DIALMODE_TONE ( );
    long GetDIALUP_DIALMODE_PULSE ( );
    long GetDIALUP_DEVICESETTINGS_DEFAULT ( );
    long GetDIALUP_DEVICESETTINGS_8N1 ( );
    long GetDIALUP_DEVICESETTINGS_7E1 ( );
    long GetLANGUAGE_LOCKINGSHIFT_BASIC ( );
    long GetLANGUAGE_LOCKINGSHIFT_TURKISH ( );
    long GetLANGUAGE_LOCKINGSHIFT_PORTUGUESE ( );
    long GetLANGUAGE_LOCKINGSHIFT_SPANISH ( );
    long GetLANGUAGE_LOCKINGSHIFT_BENGALI ( );
    long GetLANGUAGE_LOCKINGSHIFT_GUJARATI ( );
    long GetLANGUAGE_LOCKINGSHIFT_HINDI ( );
    long GetLANGUAGE_LOCKINGSHIFT_KANNADA ( );
    long GetLANGUAGE_LOCKINGSHIFT_MALAYALAM ( );
    long GetLANGUAGE_LOCKINGSHIFT_ORIYA ( );
    long GetLANGUAGE_LOCKINGSHIFT_PUNJABI ( );
    long GetLANGUAGE_LOCKINGSHIFT_TAMIL ( );
    long GetLANGUAGE_LOCKINGSHIFT_TELUGU ( );
    long GetLANGUAGE_LOCKINGSHIFT_URDU ( );
    long GetLANGUAGE_SINGLESHIFT_BASIC ( );
    long GetLANGUAGE_SINGLESHIFT_TURKISH ( );
    long GetLANGUAGE_SINGLESHIFT_SPANISH ( );
    long GetLANGUAGE_SINGLESHIFT_PORTUGUESE ( );
    long GetLANGUAGE_SINGLESHIFT_BENGALI ( );
    long GetLANGUAGE_SINGLESHIFT_GUJARATI ( );
    long GetLANGUAGE_SINGLESHIFT_HINDI ( );
    long GetLANGUAGE_SINGLESHIFT_KANNADA ( );
    long GetLANGUAGE_SINGLESHIFT_MALAYALAM ( );
    long GetLANGUAGE_SINGLESHIFT_ORIYA ( );
    long GetLANGUAGE_SINGLESHIFT_PUNJABI ( );
    long GetLANGUAGE_SINGLESHIFT_TAMIL ( );
    long GetLANGUAGE_SINGLESHIFT_TELUGU ( );
    long GetLANGUAGE_SINGLESHIFT_URDU ( );
    _bstr_t SmppBindToString (
        long lVal );
    _bstr_t SmppVersionToString (
        long lVal );
    _bstr_t TonToString (
        long lVal );
    _bstr_t NpiToString (
        long lVal );
    _bstr_t MultipartToString (
        long lVal );
    _bstr_t BodyformatToString (
        long lVal );
    _bstr_t SmppEsm2SmscToString (
        long lVal );
    _bstr_t SmppEsm2EsmeToString (
        long lVal );
    _bstr_t SmppUseGsmEncodingToString (
        long lVal );
    _bstr_t SmppDataCodingToString (
        long lVal );
    _bstr_t SmppPriorityFlagToString (
        long lVal );
    _bstr_t SmppMessageStateToString (
        long lVal );
    _bstr_t SmppSessionStateToString (
        long lVal );
    _bstr_t SmppTlvToString (
        long lVal );
    _bstr_t SmppMultipartModeToString (
        long lVal );
    _bstr_t SmppSubmitModeToString (
        long lVal );
    _bstr_t SmppEsmeToString (
        long lVal );
    _bstr_t GsmStatusToString (
        long lVal );
    _bstr_t GsmStorageTypeToString (
        long lVal );
    _bstr_t GsmFoToString (
        long lVal );
    _bstr_t GsmDataCodingToString (
        long lVal );
    _bstr_t GsmBaudrateToString (
        long lVal );
    _bstr_t GsmMessageStateToString (
        long lVal );
    _bstr_t GsmMessageFormatToString (
        long lVal );
    _bstr_t GsmPrefixSmscToString (
        long lVal );
    _bstr_t WapPushSignalToString (
        long lVal );
    _bstr_t DialupProviderTypeToString (
        long lVal );
    _bstr_t DialupDialModeToString (
        long lVal );
    _bstr_t DialupDeviceSettingsToString (
        long lVal );
    _bstr_t GsmTcpModeToString (
        long lVal );
    _bstr_t LanguageLockingShiftToString (
        long lVal );
    _bstr_t LanguageSingleShiftToString (
        long lVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SMPP_BIND_TRANSMITTER (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_BIND_TRANSCEIVER (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_BIND_RECEIVER (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_VERSION_33 (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_VERSION_34 (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_VERSION_50 (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_TON_UNKNOWN (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_TON_INTERNATIONAL (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_TON_NATIONAL (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_TON_NETWORK_SPECIFIC (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_TON_SUBSCRIBER_NUMBER (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_TON_ALPHANUMERIC (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_TON_ABBREVIATED (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_NPI_UNKNOWN (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_NPI_ISDN (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_NPI_DATA (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_NPI_TELEX (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_NPI_NATIONAL (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_NPI_PRIVATE (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_NPI_ERMES (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_NPI_INTERNET (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_NPI_LAND_MOBILE (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_MULTIPART_ACCEPT (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_MULTIPART_TRUNCATE (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_MULTIPART_REJECT (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_BODYFORMAT_TEXT (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_BODYFORMAT_HEX (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESM_2ESME_DEFAULT (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESM_2ESME_DELIVERY_RECEIPT (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESM_2ESME_DELIVERY_ACK (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESM_2ESME_MANUAL_ACK (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESM_2ESME_CONVERSATION_ABORT (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESM_2ESME_INTERMEDIATE_DELIVERY_NOTIFY (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESM_2SMSC_MODE_DEFAULT (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESM_2SMSC_MODE_STOREFORWARD (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESM_2SMSC_MODE_DATAGRAM (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESM_2SMSC_MODE_FORWARD (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESM_2SMSC_TYPE_DEFAULT (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESM_2SMSC_TYPE_DELIVERY_ACK (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESM_2SMSC_TYPE_MANUAL_ACK (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESM_2SMSC_FEAT_NOTHING (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESM_2SMSC_FEAT_UDHI (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESM_2SMSC_FEAT_SRP (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_USEGSMENCODING_DISABLED (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_USEGSMENCODING_INANDOUT (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_USEGSMENCODING_INCOMING (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_USEGSMENCODING_OUTGOING (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_DATACODING_ASCII (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_DATACODING_OCTET_UNSPEC (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_DATACODING_LATIN (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_DATACODING_JIS_KANJI (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_DATACODING_CYRILLIC (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_DATACODING_LATIN_HEBREW (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_DATACODING_PICTOGRAM (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_DATACODING_ISO_2022_JP (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_DATACODING_EXTENDED_KANJI_JIS (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_DATACODING_KS_C_5601 (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_PRIORITYFLAG_BULK (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_PRIORITYFLAG_NORMAL (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_PRIORITYFLAG_URGENT (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_PRIORITYFLAG_VERY_URGENT (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_MESSAGESTATE_AX_WAITRESP (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_MESSAGESTATE_ENROUTE (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_MESSAGESTATE_DELIVERED (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_MESSAGESTATE_EXPIRED (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_MESSAGESTATE_DELETED (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_MESSAGESTATE_UNDELIVERABLE (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_MESSAGESTATE_ACCEPTED (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_MESSAGESTATE_UNKNOWN (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_MESSAGESTATE_REJECTED (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_MESSAGESTATE_AX_RESPERROR (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_MESSAGESTATE_AX_NOCREDITS (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_MESSAGESTATE_AX_RESPTO (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_MESSAGESTATE_AX_RESPONDED (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_SESSIONSTATE_CONNECTED (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_SESSIONSTATE_DISCONNECTED (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_SESSIONSTATE_BINDING (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_SESSIONSTATE_BOUND_TX (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_SESSIONSTATE_BOUND_RX (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_SESSIONSTATE_BOUND_TRX (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_TLV_DEST_ADDR_SUBUNIT (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_TLV_DEST_NETWORK_TYPE (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_TLV_DEST_BEARER_TYPE (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_TLV_DEST_TELEMATICS_ID (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_TLV_SOURCE_ADDR_SUBUNIT (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_TLV_SOURCE_NETWORK_TYPE (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_TLV_SOURCE_BEARER_TYPE (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_TLV_SOURCE_TELEMATICS_ID (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_TLV_QOS_TIME_TO_LIVE (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_TLV_PAYLOAD_TYPE (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_TLV_ADDITIONAL_STATUS_INFO_TEXT (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_TLV_RECEIPTED_MESSAGE_ID (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_TLV_MS_MSG_WAIT_FACILITIES (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_TLV_PRIVACY_INDICATOR (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_TLV_SOURCE_SUBADDRESS (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_TLV_DEST_SUBADDRESS (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_TLV_USER_MESSAGE_REFERENCE (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_TLV_USER_RESPONSE_CODE (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_TLV_SOURCE_PORT (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_TLV_DESTINATION_PORT (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_TLV_SAR_MSG_REF_NUM (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_TLV_LANGUAGE_INDICATOR (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_TLV_SAR_TOTAL_SEGMENTS (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_TLV_SAR_SEGMENT_SEQNUM (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_TLV_SC_INTERFACE_VERSION (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_TLV_CALLBACK_NUM_PRES_IND (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_TLV_CALLBACK_NUM_ATAG (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_TLV_NUMBER_OF_MESSAGES (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_TLV_CALLBACK_NUM (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_TLV_DPF_RESULT (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_TLV_SET_DPF (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_TLV_MS_AVAILABILITY_STATUS (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_TLV_NETWORK_ERROR_CODE (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_TLV_MESSAGE_PAYLOAD (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_TLV_DELIVERY_FAILURE_REASON (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_TLV_MORE_MESSAGES_TO_SEND (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_TLV_MESSAGE_STATE (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_TLV_CONGESTION_STATE (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_TLV_USSD_SERVICE_OP (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_TLV_DISPLAY_TIME (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_TLV_SMS_SIGNAL (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_TLV_MS_VALIDITY (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_TLV_ALERT_ON_MESSAGE_DELIVERY (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_TLV_ITS_REPLY_TYPE (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_TLV_ITS_SESSION_INFO (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_MULTIPARTMODE_UDH (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_MULTIPARTMODE_UDH16BIT (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_MULTIPARTMODE_SARTLV (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_MULTIPARTMODE_PAYLOADTLV (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_LOGLEVEL_MINIMAL (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_LOGLEVEL_NORMAL (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_LOGLEVEL_VERBOSE (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_SUBMITMODE_SUBMITSM (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_SUBMITMODE_DATASM (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_DELIVERMODE_DELIVERSM (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_DELIVERMODE_DATASM (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_USEGSMENCODING_INCHARSET (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_USEGSMENCODING_OUTCHARSET (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_USEGSMENCODING_INOUTCHARS (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_IPVERSION_4 (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_IPVERSION_6 (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_IPVERSION_BOTH (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_CERTIFICATESTORE_LOCALMACHINE (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_CERTIFICATESTORE_CURRENTUSER (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESME_ROK (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESME_RINVMSGLEN (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESME_RINVCMDLEN (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESME_RINVCMDID (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESME_RINVBNDSTS (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESME_RALYBND (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESME_RINVPRTFLG (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESME_RINVREGDLVFLG (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESME_RSYSERR (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESME_RINVSRCADR (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESME_RINVDSTADR (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESME_RINVMSGID (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESME_RBINDFAIL (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESME_RINVPASWD (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESME_RINVSYSID (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESME_RCANCELFAIL (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESME_RREPLACEFAIL (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESME_RMSGQFUL (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESME_RINVSERTYP (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESME_RINVNUMDESTS (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESME_RINVDLNAME (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESME_RINVDESTFLAG (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESME_RINVSUBREP (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESME_RINVESMCLASS (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESME_RCNTSUBDL (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESME_RSUBMITFAIL (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESME_RINVSRCTON (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESME_RINVSRCNPI (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESME_RINVDSTTON (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESME_RINVDSTNPI (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESME_RINVSYSTYP (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESME_RINVREPFLAG (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESME_RINVNUMMSGS (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESME_RTHROTTLED (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESME_RINVSCHED (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESME_RINVEXPIRY (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESME_RINVDFTMSGID (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESME_RX_T_APPN (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESME_RX_P_APPN (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESME_RX_R_APPN (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESME_RQUERYFAIL (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESME_RINVOPTPARSTREAM (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESME_ROPTPARNOTALLWD (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESME_RINVPARLEN (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESME_RMISSINGOPTPARAM (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESME_RINVOPTPARAMVAL (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESME_RDELIVERYFAILURE (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SMPP_ESME_RUNKNOWNERR (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_STATUS_MESSAGE_DELIVERED_SUCCESSFULLY (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_STATUS_FORWARDED_STATUS_UNKNOWN (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_STATUS_REPLACED (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_STATUS_CONGESTION_STILL_TRYING (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_STATUS_RECIPIENT_BUSY_STILL_TRYING (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_STATUS_NO_RESPONSE_STILL_TRYING (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_STATUS_SERVICE_REJECTED_STILL_TRYING (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_STATUS_QOS_NOT_AVAILABLE_STILL_TRYING (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_STATUS_RECIPIENT_ERROR_STILL_TRYING (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_STATUS_RPC_ERROR (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_STATUS_INCOMPATIBLE_DESTINATION (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_STATUS_CONNECTION_REJECTED (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_STATUS_NOT_OBTAINABLE (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_STATUS_QOS_NOT_AVAILABLE (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_STATUS_NO_INTERNETWORKING_AVAILABLE (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_STATUS_MESSAGE_EXPIRED (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_STATUS_MESSAGE_DELETED_BY_SENDER (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_STATUS_MESSAGE_DELETED_BY_SMSC (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_STATUS_DOES_NOT_EXIST (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_STORAGETYPE_SIM (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_STORAGETYPE_MEMORY (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_STORAGETYPE_COMBINED (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_STORAGETYPE_STATUS (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_STORAGETYPE_ALL (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_FO_REPLYPATH_EXISTS (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_FO_UDHI (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_FO_STATUS_REPORT (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_FO_VALIDITY_NONE (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_FO_VALIDITY_RELATIVE (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_FO_VALIDITY_ENHANCED (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_FO_VALIDITY_ABSOLUTE (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_FO_REJECT_DUPLICATES (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_FO_SUBMIT_SM (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_FO_DELIVER_SM (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_FO_STATUS_SM (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_DATACODING_DEFAULT (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_DATACODING_8BIT_DATA (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_DATACODING_UNICODE (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_DATACODING_ME_SPECIFIC (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_DATACODING_SIM_SPECIFIC (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_DATACODING_TE_SPECIFIC (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_DATACODING_FLASH (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_BAUDRATE_110 (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_BAUDRATE_300 (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_BAUDRATE_600 (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_BAUDRATE_1200 (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_BAUDRATE_2400 (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_BAUDRATE_4800 (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_BAUDRATE_9600 (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_BAUDRATE_14400 (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_BAUDRATE_19200 (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_BAUDRATE_38400 (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_BAUDRATE_56000 (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_BAUDRATE_57600 (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_BAUDRATE_64000 (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_BAUDRATE_115200 (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_BAUDRATE_128000 (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_BAUDRATE_230400 (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_BAUDRATE_256000 (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_BAUDRATE_460800 (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_BAUDRATE_921600 (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_BAUDRATE_DEFAULT (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_MESSAGESTATE_RECEIVED_UNREAD (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_MESSAGESTATE_RECEIVED_READ (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_MESSAGESTATE_STORED_UNSENT (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_MESSAGESTATE_STORED_SENT (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_MESSAGESTATE_ALL (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_MESSAGEFORMAT_PDU (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_MESSAGEFORMAT_TEXT (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_MESSAGEFORMAT_AUTO (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_HTTP_PLACEHOLDER_USERTAG (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_HTTP_PLACEHOLDER_TOADDRESS (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_HTTP_PLACEHOLDER_FROMADDRESS (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_HTTP_PLACEHOLDER_BODY (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_HTTP_PLACEHOLDER_BODYASHEX (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_HTTP_PLACEHOLDER_BODYASBASE64 (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_HTTP_PLACEHOLDER_DELIVERYREPORT (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_HTTP_PLACEHOLDER_TOADDRESSTON (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_HTTP_PLACEHOLDER_TOADDRESSNPI (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_HTTP_PLACEHOLDER_FROMADDRESSTON (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_HTTP_PLACEHOLDER_FROMADDRESSNPI (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_HTTP_PLACEHOLDER_PROTOCOLID (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_HTTP_PLACEHOLDER_UDHI (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_HTTP_PLACEHOLDER_DATACODING (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_HTTP_PLACEHOLDER_USERTAGSTRING (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_PREFIXSMSC_ENABLED (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_PREFIXSMSC_DISABLED (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_PREFIXSMSC_AUTO (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_TCPMODE_RAW (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_TCPMODE_TELNET (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GSM_TCPMODE_TELNET_WITH_COMCONTROL (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_WAPPUSH_SIGNAL_NONE (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_WAPPUSH_SIGNAL_LOW (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_WAPPUSH_SIGNAL_MEDIUM (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_WAPPUSH_SIGNAL_HIGH (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_WAPPUSH_SIGNAL_DELETE (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_DIALUP_PROVIDERTYPE_UCP (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_DIALUP_PROVIDERTYPE_TAP_DEFAULT (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_DIALUP_PROVIDERTYPE_TAP_NOLF (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_DIALUP_PROVIDERTYPE_TAP_NOEOT (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_DIALUP_DIALMODE_TONE (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_DIALUP_DIALMODE_PULSE (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_DIALUP_DEVICESETTINGS_DEFAULT (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_DIALUP_DEVICESETTINGS_8N1 (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_DIALUP_DEVICESETTINGS_7E1 (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_LANGUAGE_LOCKINGSHIFT_BASIC (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_LANGUAGE_LOCKINGSHIFT_TURKISH (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_LANGUAGE_LOCKINGSHIFT_PORTUGUESE (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_LANGUAGE_LOCKINGSHIFT_SPANISH (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_LANGUAGE_LOCKINGSHIFT_BENGALI (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_LANGUAGE_LOCKINGSHIFT_GUJARATI (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_LANGUAGE_LOCKINGSHIFT_HINDI (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_LANGUAGE_LOCKINGSHIFT_KANNADA (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_LANGUAGE_LOCKINGSHIFT_MALAYALAM (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_LANGUAGE_LOCKINGSHIFT_ORIYA (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_LANGUAGE_LOCKINGSHIFT_PUNJABI (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_LANGUAGE_LOCKINGSHIFT_TAMIL (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_LANGUAGE_LOCKINGSHIFT_TELUGU (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_LANGUAGE_LOCKINGSHIFT_URDU (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_LANGUAGE_SINGLESHIFT_BASIC (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_LANGUAGE_SINGLESHIFT_TURKISH (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_LANGUAGE_SINGLESHIFT_SPANISH (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_LANGUAGE_SINGLESHIFT_PORTUGUESE (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_LANGUAGE_SINGLESHIFT_BENGALI (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_LANGUAGE_SINGLESHIFT_GUJARATI (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_LANGUAGE_SINGLESHIFT_HINDI (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_LANGUAGE_SINGLESHIFT_KANNADA (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_LANGUAGE_SINGLESHIFT_MALAYALAM (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_LANGUAGE_SINGLESHIFT_ORIYA (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_LANGUAGE_SINGLESHIFT_PUNJABI (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_LANGUAGE_SINGLESHIFT_TAMIL (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_LANGUAGE_SINGLESHIFT_TELUGU (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_LANGUAGE_SINGLESHIFT_URDU (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall raw_SmppBindToString (
        /*[in]*/ long lVal,
        /*[out,retval]*/ BSTR * strVal ) = 0;
      virtual HRESULT __stdcall raw_SmppVersionToString (
        /*[in]*/ long lVal,
        /*[out,retval]*/ BSTR * strVal ) = 0;
      virtual HRESULT __stdcall raw_TonToString (
        /*[in]*/ long lVal,
        /*[out,retval]*/ BSTR * strVal ) = 0;
      virtual HRESULT __stdcall raw_NpiToString (
        /*[in]*/ long lVal,
        /*[out,retval]*/ BSTR * strVal ) = 0;
      virtual HRESULT __stdcall raw_MultipartToString (
        /*[in]*/ long lVal,
        /*[out,retval]*/ BSTR * strVal ) = 0;
      virtual HRESULT __stdcall raw_BodyformatToString (
        /*[in]*/ long lVal,
        /*[out,retval]*/ BSTR * strVal ) = 0;
      virtual HRESULT __stdcall raw_SmppEsm2SmscToString (
        /*[in]*/ long lVal,
        /*[out,retval]*/ BSTR * strVal ) = 0;
      virtual HRESULT __stdcall raw_SmppEsm2EsmeToString (
        /*[in]*/ long lVal,
        /*[out,retval]*/ BSTR * strVal ) = 0;
      virtual HRESULT __stdcall raw_SmppUseGsmEncodingToString (
        /*[in]*/ long lVal,
        /*[out,retval]*/ BSTR * strVal ) = 0;
      virtual HRESULT __stdcall raw_SmppDataCodingToString (
        /*[in]*/ long lVal,
        /*[out,retval]*/ BSTR * strVal ) = 0;
      virtual HRESULT __stdcall raw_SmppPriorityFlagToString (
        /*[in]*/ long lVal,
        /*[out,retval]*/ BSTR * strVal ) = 0;
      virtual HRESULT __stdcall raw_SmppMessageStateToString (
        /*[in]*/ long lVal,
        /*[out,retval]*/ BSTR * strVal ) = 0;
      virtual HRESULT __stdcall raw_SmppSessionStateToString (
        /*[in]*/ long lVal,
        /*[out,retval]*/ BSTR * strVal ) = 0;
      virtual HRESULT __stdcall raw_SmppTlvToString (
        /*[in]*/ long lVal,
        /*[out,retval]*/ BSTR * strVal ) = 0;
      virtual HRESULT __stdcall raw_SmppMultipartModeToString (
        /*[in]*/ long lVal,
        /*[out,retval]*/ BSTR * strVal ) = 0;
      virtual HRESULT __stdcall raw_SmppSubmitModeToString (
        /*[in]*/ long lVal,
        /*[out,retval]*/ BSTR * strVal ) = 0;
      virtual HRESULT __stdcall raw_SmppEsmeToString (
        /*[in]*/ long lVal,
        /*[out,retval]*/ BSTR * strVal ) = 0;
      virtual HRESULT __stdcall raw_GsmStatusToString (
        /*[in]*/ long lVal,
        /*[out,retval]*/ BSTR * strVal ) = 0;
      virtual HRESULT __stdcall raw_GsmStorageTypeToString (
        /*[in]*/ long lVal,
        /*[out,retval]*/ BSTR * strVal ) = 0;
      virtual HRESULT __stdcall raw_GsmFoToString (
        /*[in]*/ long lVal,
        /*[out,retval]*/ BSTR * strVal ) = 0;
      virtual HRESULT __stdcall raw_GsmDataCodingToString (
        /*[in]*/ long lVal,
        /*[out,retval]*/ BSTR * strVal ) = 0;
      virtual HRESULT __stdcall raw_GsmBaudrateToString (
        /*[in]*/ long lVal,
        /*[out,retval]*/ BSTR * strVal ) = 0;
      virtual HRESULT __stdcall raw_GsmMessageStateToString (
        /*[in]*/ long lVal,
        /*[out,retval]*/ BSTR * strVal ) = 0;
      virtual HRESULT __stdcall raw_GsmMessageFormatToString (
        /*[in]*/ long lVal,
        /*[out,retval]*/ BSTR * strVal ) = 0;
      virtual HRESULT __stdcall raw_GsmPrefixSmscToString (
        /*[in]*/ long lVal,
        /*[out,retval]*/ BSTR * strVal ) = 0;
      virtual HRESULT __stdcall raw_WapPushSignalToString (
        /*[in]*/ long lVal,
        /*[out,retval]*/ BSTR * strVal ) = 0;
      virtual HRESULT __stdcall raw_DialupProviderTypeToString (
        /*[in]*/ long lVal,
        /*[out,retval]*/ BSTR * strVal ) = 0;
      virtual HRESULT __stdcall raw_DialupDialModeToString (
        /*[in]*/ long lVal,
        /*[out,retval]*/ BSTR * strVal ) = 0;
      virtual HRESULT __stdcall raw_DialupDeviceSettingsToString (
        /*[in]*/ long lVal,
        /*[out,retval]*/ BSTR * strVal ) = 0;
      virtual HRESULT __stdcall raw_GsmTcpModeToString (
        /*[in]*/ long lVal,
        /*[out,retval]*/ BSTR * strVal ) = 0;
      virtual HRESULT __stdcall raw_LanguageLockingShiftToString (
        /*[in]*/ long lVal,
        /*[out,retval]*/ BSTR * strVal ) = 0;
      virtual HRESULT __stdcall raw_LanguageSingleShiftToString (
        /*[in]*/ long lVal,
        /*[out,retval]*/ BSTR * strVal ) = 0;
};

struct __declspec(uuid("7524134c-0186-43c6-958c-2c3a49fe40fc"))
Message;
    // [ default ] interface IMessage

struct __declspec(uuid("4687cee3-3966-46a2-aee3-5a747f455b84"))
ITlv : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTag,put=PutTag))
    long Tag;
    __declspec(property(get=GetValueAsString,put=PutValueAsString))
    _bstr_t ValueAsString;
    __declspec(property(get=GetValueAsHexString,put=PutValueAsHexString))
    _bstr_t ValueAsHexString;
    __declspec(property(get=GetValueAsInt32,put=PutValueAsInt32))
    long ValueAsInt32;
    __declspec(property(get=GetValueAsInt16,put=PutValueAsInt16))
    long ValueAsInt16;
    __declspec(property(get=GetValueAsInt8,put=PutValueAsInt8))
    long ValueAsInt8;
    __declspec(property(get=GetLength))
    long Length;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Clear ( );
    long GetTag ( );
    void PutTag (
        long Val );
    _bstr_t GetValueAsString ( );
    void PutValueAsString (
        _bstr_t Val );
    _bstr_t GetValueAsHexString ( );
    void PutValueAsHexString (
        _bstr_t Val );
    long GetValueAsInt32 ( );
    void PutValueAsInt32 (
        long Val );
    long GetValueAsInt16 ( );
    void PutValueAsInt16 (
        long Val );
    long GetValueAsInt8 ( );
    void PutValueAsInt8 (
        long Val );
    long GetLength ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall get_Tag (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_Tag (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall get_ValueAsString (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall put_ValueAsString (
        /*[in]*/ BSTR Val ) = 0;
      virtual HRESULT __stdcall get_ValueAsHexString (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall put_ValueAsHexString (
        /*[in]*/ BSTR Val ) = 0;
      virtual HRESULT __stdcall get_ValueAsInt32 (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_ValueAsInt32 (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall get_ValueAsInt16 (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_ValueAsInt16 (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall get_ValueAsInt8 (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_ValueAsInt8 (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ long * Val ) = 0;
};

struct __declspec(uuid("dfd486fc-45b4-49ab-ad5a-98256ae057fc"))
IMessage : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUserTag,put=PutUserTag))
    long UserTag;
    __declspec(property(get=GetToAddress,put=PutToAddress))
    _bstr_t ToAddress;
    __declspec(property(get=GetFromAddress,put=PutFromAddress))
    _bstr_t FromAddress;
    __declspec(property(get=GetBody,put=PutBody))
    _bstr_t Body;
    __declspec(property(get=GetRequestDeliveryReport,put=PutRequestDeliveryReport))
    VARIANT_BOOL RequestDeliveryReport;
    __declspec(property(get=GetToAddressTON,put=PutToAddressTON))
    long ToAddressTON;
    __declspec(property(get=GetToAddressNPI,put=PutToAddressNPI))
    long ToAddressNPI;
    __declspec(property(get=GetFromAddressTON,put=PutFromAddressTON))
    long FromAddressTON;
    __declspec(property(get=GetFromAddressNPI,put=PutFromAddressNPI))
    long FromAddressNPI;
    __declspec(property(get=GetProtocolId,put=PutProtocolId))
    long ProtocolId;
    __declspec(property(get=GetValidityPeriod,put=PutValidityPeriod))
    long ValidityPeriod;
    __declspec(property(get=GetReference,put=PutReference))
    _bstr_t Reference;
    __declspec(property(get=GetDataCoding,put=PutDataCoding))
    long DataCoding;
    __declspec(property(get=GetBodyFormat,put=PutBodyFormat))
    long BodyFormat;
    __declspec(property(get=GetTotalParts))
    long TotalParts;
    __declspec(property(get=GetPartNumber))
    long PartNumber;
    __declspec(property(get=GetReceiveTime))
    _bstr_t ReceiveTime;
    __declspec(property(get=GetReceiveTimeInSeconds))
    long ReceiveTimeInSeconds;
    __declspec(property(get=GetHasUdh,put=PutHasUdh))
    VARIANT_BOOL HasUdh;
    __declspec(property(get=GetIncomplete))
    VARIANT_BOOL Incomplete;
    __declspec(property(get=GetMultipartRef))
    long MultipartRef;
    __declspec(property(get=GetLastError))
    long LastError;
    __declspec(property(get=GetLanguageLockingShift,put=PutLanguageLockingShift))
    long LanguageLockingShift;
    __declspec(property(get=GetLanguageSingleShift,put=PutLanguageSingleShift))
    long LanguageSingleShift;
    __declspec(property(get=GetGsmFirstOctet,put=PutGsmFirstOctet))
    long GsmFirstOctet;
    __declspec(property(get=GetGsmSmscAddress))
    _bstr_t GsmSmscAddress;
    __declspec(property(get=GetGsmSmscAddressTON))
    long GsmSmscAddressTON;
    __declspec(property(get=GetGsmSmscAddressNPI))
    long GsmSmscAddressNPI;
    __declspec(property(get=GetGsmMemoryIndex,put=PutGsmMemoryIndex))
    _bstr_t GsmMemoryIndex;
    __declspec(property(get=GetGsmMemoryLocation,put=PutGsmMemoryLocation))
    _bstr_t GsmMemoryLocation;
    __declspec(property(get=GetSmppPriority,put=PutSmppPriority))
    long SmppPriority;
    __declspec(property(get=GetSmppServiceType,put=PutSmppServiceType))
    _bstr_t SmppServiceType;
    __declspec(property(get=GetSmppEsmClass,put=PutSmppEsmClass))
    long SmppEsmClass;
    __declspec(property(get=GetSmppIsDeliveryReport,put=PutSmppIsDeliveryReport))
    VARIANT_BOOL SmppIsDeliveryReport;
    __declspec(property(get=GetSmppStatus,put=PutSmppStatus))
    long SmppStatus;
    __declspec(property(get=GetSmppError,put=PutSmppError))
    long SmppError;
    __declspec(property(get=GetSmppCommandStatus,put=PutSmppCommandStatus))
    long SmppCommandStatus;
    __declspec(property(get=GetSmppSequenceNumber,put=PutSmppSequenceNumber))
    long SmppSequenceNumber;
    __declspec(property(get=GetSmppServerSubmitDate))
    _bstr_t SmppServerSubmitDate;
    __declspec(property(get=GetSmppServerFinalDate))
    _bstr_t SmppServerFinalDate;
    __declspec(property(get=GetUserTagString,put=PutUserTagString))
    _bstr_t UserTagString;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Clear ( );
    long GetUserTag ( );
    void PutUserTag (
        long Val );
    _bstr_t GetToAddress ( );
    void PutToAddress (
        _bstr_t Val );
    _bstr_t GetFromAddress ( );
    void PutFromAddress (
        _bstr_t Val );
    _bstr_t GetBody ( );
    void PutBody (
        _bstr_t Val );
    VARIANT_BOOL GetRequestDeliveryReport ( );
    void PutRequestDeliveryReport (
        VARIANT_BOOL Val );
    long GetToAddressTON ( );
    void PutToAddressTON (
        long Val );
    long GetToAddressNPI ( );
    void PutToAddressNPI (
        long Val );
    long GetFromAddressTON ( );
    void PutFromAddressTON (
        long Val );
    long GetFromAddressNPI ( );
    void PutFromAddressNPI (
        long Val );
    long GetProtocolId ( );
    void PutProtocolId (
        long Val );
    long GetValidityPeriod ( );
    void PutValidityPeriod (
        long Val );
    _bstr_t GetReference ( );
    void PutReference (
        _bstr_t Val );
    long GetDataCoding ( );
    void PutDataCoding (
        long Val );
    long GetBodyFormat ( );
    void PutBodyFormat (
        long Val );
    long GetTotalParts ( );
    long GetPartNumber ( );
    _bstr_t GetReceiveTime ( );
    long GetReceiveTimeInSeconds ( );
    VARIANT_BOOL GetHasUdh ( );
    void PutHasUdh (
        VARIANT_BOOL Val );
    VARIANT_BOOL GetIncomplete ( );
    long GetMultipartRef ( );
    void PutLanguageLockingShift (
        long Val );
    long GetLanguageLockingShift ( );
    void PutLanguageSingleShift (
        long Val );
    long GetLanguageSingleShift ( );
    long GetGsmFirstOctet ( );
    void PutGsmFirstOctet (
        long Val );
    _bstr_t GetGsmSmscAddress ( );
    long GetGsmSmscAddressTON ( );
    long GetGsmSmscAddressNPI ( );
    _bstr_t GetGsmMemoryIndex ( );
    void PutGsmMemoryIndex (
        _bstr_t Val );
    _bstr_t GetGsmMemoryLocation ( );
    void PutGsmMemoryLocation (
        _bstr_t Val );
    long GetSmppPriority ( );
    void PutSmppPriority (
        long Val );
    _bstr_t GetSmppServiceType ( );
    void PutSmppServiceType (
        _bstr_t Val );
    long GetSmppEsmClass ( );
    void PutSmppEsmClass (
        long Val );
    VARIANT_BOOL GetSmppIsDeliveryReport ( );
    void PutSmppIsDeliveryReport (
        VARIANT_BOOL Val );
    long GetSmppStatus ( );
    void PutSmppStatus (
        long Val );
    long GetSmppError ( );
    void PutSmppError (
        long Val );
    long GetSmppCommandStatus ( );
    void PutSmppCommandStatus (
        long Val );
    void PutSmppSequenceNumber (
        long Val );
    long GetSmppSequenceNumber ( );
    _bstr_t GetSmppServerSubmitDate ( );
    _bstr_t GetSmppServerFinalDate ( );
    _bstr_t GetUserTagString ( );
    void PutUserTagString (
        _bstr_t Val );
    HRESULT SmppAddTlv (
        struct ITlv * Tlv );
    ITlvPtr SmppGetFirstTlv ( );
    ITlvPtr SmppGetNextTlv ( );
    ITlvPtr SmppGetTlv (
        long lTag );
    HRESULT SmppDeleteTlv (
        long lTag );
    long GetLastError ( );
    _bstr_t GetErrorDescription (
        long Error );
    _bstr_t ToJSon ( );
    HRESULT FromJSon (
        _bstr_t Val );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall get_UserTag (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_UserTag (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall get_ToAddress (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall put_ToAddress (
        /*[in]*/ BSTR Val ) = 0;
      virtual HRESULT __stdcall get_FromAddress (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall put_FromAddress (
        /*[in]*/ BSTR Val ) = 0;
      virtual HRESULT __stdcall get_Body (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall put_Body (
        /*[in]*/ BSTR Val ) = 0;
      virtual HRESULT __stdcall get_RequestDeliveryReport (
        /*[out,retval]*/ VARIANT_BOOL * Val ) = 0;
      virtual HRESULT __stdcall put_RequestDeliveryReport (
        /*[in]*/ VARIANT_BOOL Val ) = 0;
      virtual HRESULT __stdcall get_ToAddressTON (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_ToAddressTON (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall get_ToAddressNPI (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_ToAddressNPI (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall get_FromAddressTON (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_FromAddressTON (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall get_FromAddressNPI (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_FromAddressNPI (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall get_ProtocolId (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_ProtocolId (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall get_ValidityPeriod (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_ValidityPeriod (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall get_Reference (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall put_Reference (
        /*[in]*/ BSTR Val ) = 0;
      virtual HRESULT __stdcall get_DataCoding (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_DataCoding (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall get_BodyFormat (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_BodyFormat (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall get_TotalParts (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_PartNumber (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_ReceiveTime (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_ReceiveTimeInSeconds (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_HasUdh (
        /*[out,retval]*/ VARIANT_BOOL * Val ) = 0;
      virtual HRESULT __stdcall put_HasUdh (
        /*[in]*/ VARIANT_BOOL Val ) = 0;
      virtual HRESULT __stdcall get_Incomplete (
        /*[out,retval]*/ VARIANT_BOOL * Val ) = 0;
      virtual HRESULT __stdcall get_MultipartRef (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_LanguageLockingShift (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall get_LanguageLockingShift (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_LanguageSingleShift (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall get_LanguageSingleShift (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GsmFirstOctet (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_GsmFirstOctet (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall get_GsmSmscAddress (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_GsmSmscAddressTON (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GsmSmscAddressNPI (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_GsmMemoryIndex (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall put_GsmMemoryIndex (
        /*[in]*/ BSTR Val ) = 0;
      virtual HRESULT __stdcall get_GsmMemoryLocation (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall put_GsmMemoryLocation (
        /*[in]*/ BSTR Val ) = 0;
      virtual HRESULT __stdcall get_SmppPriority (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_SmppPriority (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall get_SmppServiceType (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall put_SmppServiceType (
        /*[in]*/ BSTR Val ) = 0;
      virtual HRESULT __stdcall get_SmppEsmClass (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_SmppEsmClass (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall get_SmppIsDeliveryReport (
        /*[out,retval]*/ VARIANT_BOOL * Val ) = 0;
      virtual HRESULT __stdcall put_SmppIsDeliveryReport (
        /*[in]*/ VARIANT_BOOL Val ) = 0;
      virtual HRESULT __stdcall get_SmppStatus (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_SmppStatus (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall get_SmppError (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_SmppError (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall get_SmppCommandStatus (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_SmppCommandStatus (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall put_SmppSequenceNumber (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall get_SmppSequenceNumber (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SmppServerSubmitDate (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_SmppServerFinalDate (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_UserTagString (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall put_UserTagString (
        /*[in]*/ BSTR Val ) = 0;
      virtual HRESULT __stdcall raw_SmppAddTlv (
        /*[in]*/ struct ITlv * Tlv ) = 0;
      virtual HRESULT __stdcall raw_SmppGetFirstTlv (
        /*[out,retval]*/ struct ITlv * * Tlv ) = 0;
      virtual HRESULT __stdcall raw_SmppGetNextTlv (
        /*[out,retval]*/ struct ITlv * * Tlv ) = 0;
      virtual HRESULT __stdcall raw_SmppGetTlv (
        /*[in]*/ long lTag,
        /*[out,retval]*/ struct ITlv * * Tlv ) = 0;
      virtual HRESULT __stdcall raw_SmppDeleteTlv (
        /*[in]*/ long lTag ) = 0;
      virtual HRESULT __stdcall get_LastError (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall raw_GetErrorDescription (
        /*[in]*/ long Error,
        /*[out,retval]*/ BSTR * strDescription ) = 0;
      virtual HRESULT __stdcall raw_ToJSon (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall raw_FromJSon (
        /*[in]*/ BSTR Val ) = 0;
};

struct __declspec(uuid("461b017b-c733-4145-a3aa-040b3a1e86d5"))
Tlv;
    // [ default ] interface ITlv

struct __declspec(uuid("035ec473-4171-4d8c-bb09-000f1bbb79b5"))
GsmDeliveryReport;
    // [ default ] interface IGsmDeliveryReport

struct __declspec(uuid("6962c3d8-88fe-4660-a4ec-901a244a57d2"))
IGsmDeliveryReport : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetReference))
    _bstr_t Reference;
    __declspec(property(get=GetUserTag,put=PutUserTag))
    long UserTag;
    __declspec(property(get=GetSmscAddress))
    _bstr_t SmscAddress;
    __declspec(property(get=GetSmscTime))
    _bstr_t SmscTime;
    __declspec(property(get=GetSmscTimeInSeconds))
    long SmscTimeInSeconds;
    __declspec(property(get=GetDischargeTime))
    _bstr_t DischargeTime;
    __declspec(property(get=GetDischargeTimeInSeconds))
    long DischargeTimeInSeconds;
    __declspec(property(get=GetMemoryIndex))
    _bstr_t MemoryIndex;
    __declspec(property(get=GetFirstOctet))
    long FirstOctet;
    __declspec(property(get=GetSmscTON))
    long SmscTON;
    __declspec(property(get=GetSmscNPI))
    long SmscNPI;
    __declspec(property(get=GetTON))
    long TON;
    __declspec(property(get=GetNPI))
    long NPI;
    __declspec(property(get=GetStatus))
    long Status;
    __declspec(property(get=GetFromAddress))
    _bstr_t FromAddress;
    __declspec(property(get=GetMemoryLocation))
    _bstr_t MemoryLocation;
    __declspec(property(get=GetUserTagString,put=PutUserTagString))
    _bstr_t UserTagString;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Clear ( );
    _bstr_t GetReference ( );
    long GetUserTag ( );
    void PutUserTag (
        long Val );
    _bstr_t GetSmscAddress ( );
    _bstr_t GetSmscTime ( );
    long GetSmscTimeInSeconds ( );
    _bstr_t GetDischargeTime ( );
    long GetDischargeTimeInSeconds ( );
    _bstr_t GetMemoryIndex ( );
    long GetFirstOctet ( );
    long GetSmscTON ( );
    long GetSmscNPI ( );
    long GetTON ( );
    long GetNPI ( );
    long GetStatus ( );
    _bstr_t GetFromAddress ( );
    _bstr_t GetMemoryLocation ( );
    _bstr_t GetUserTagString ( );
    void PutUserTagString (
        _bstr_t Val );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall get_Reference (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_UserTag (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_UserTag (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall get_SmscAddress (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_SmscTime (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_SmscTimeInSeconds (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_DischargeTime (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_DischargeTimeInSeconds (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_MemoryIndex (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_FirstOctet (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SmscTON (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SmscNPI (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_TON (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_NPI (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_Status (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_FromAddress (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_MemoryLocation (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_UserTagString (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall put_UserTagString (
        /*[in]*/ BSTR Val ) = 0;
};

struct __declspec(uuid("265f828d-db37-4676-8e3e-b73b5a653a48"))
Dialup;
    // [ default ] interface IDialup

struct __declspec(uuid("3e9851df-d82f-4806-8716-769c015c23f2"))
IDialup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetVersion))
    _bstr_t Version;
    __declspec(property(get=GetBuild))
    _bstr_t Build;
    __declspec(property(get=GetModule))
    _bstr_t Module;
    __declspec(property(get=GetLicenseStatus))
    _bstr_t LicenseStatus;
    __declspec(property(get=GetLicenseKey,put=PutLicenseKey))
    _bstr_t LicenseKey;
    __declspec(property(get=GetDialMode,put=PutDialMode))
    long DialMode;
    __declspec(property(get=GetProviderDialString,put=PutProviderDialString))
    _bstr_t ProviderDialString;
    __declspec(property(get=GetProviderPassword,put=PutProviderPassword))
    _bstr_t ProviderPassword;
    __declspec(property(get=GetLogFile,put=PutLogFile))
    _bstr_t LogFile;
    __declspec(property(get=GetProviderType,put=PutProviderType))
    long ProviderType;
    __declspec(property(get=GetProviderResponse))
    _bstr_t ProviderResponse;
    __declspec(property(get=GetAdvancedSettings,put=PutAdvancedSettings))
    _bstr_t AdvancedSettings;
    __declspec(property(get=GetLastError))
    long LastError;
    __declspec(property(get=GetDevice,put=PutDevice))
    _bstr_t Device;
    __declspec(property(get=GetDeviceSpeed,put=PutDeviceSpeed))
    long DeviceSpeed;
    __declspec(property(get=GetDeviceSettings,put=PutDeviceSettings))
    long DeviceSettings;
    __declspec(property(get=GetDeviceInitString,put=PutDeviceInitString))
    _bstr_t DeviceInitString;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetVersion ( );
    _bstr_t GetBuild ( );
    _bstr_t GetModule ( );
    _bstr_t GetLicenseStatus ( );
    _bstr_t GetLicenseKey ( );
    void PutLicenseKey (
        _bstr_t LicenseKey );
    HRESULT SaveLicenseKey ( );
    _bstr_t GetLogFile ( );
    void PutLogFile (
        _bstr_t LogFile );
    HRESULT Sleep (
        long Ms );
    HRESULT Clear ( );
    long GetLastError ( );
    _bstr_t GetErrorDescription (
        long ErrorCode );
    _bstr_t GetDevice ( );
    void PutDevice (
        _bstr_t Val );
    long GetDeviceSpeed ( );
    void PutDeviceSpeed (
        long Val );
    long GetDeviceSettings ( );
    void PutDeviceSettings (
        long Val );
    _bstr_t GetDeviceInitString ( );
    void PutDeviceInitString (
        _bstr_t Val );
    long GetDialMode ( );
    void PutDialMode (
        long Val );
    _bstr_t GetProviderDialString ( );
    void PutProviderDialString (
        _bstr_t Val );
    _bstr_t GetProviderPassword ( );
    void PutProviderPassword (
        _bstr_t Val );
    long GetProviderType ( );
    void PutProviderType (
        long Val );
    _bstr_t GetProviderResponse ( );
    _bstr_t GetAdvancedSettings ( );
    void PutAdvancedSettings (
        _bstr_t Val );
    long GetDeviceCount ( );
    _bstr_t GetDevice (
        long lIndex );
    HRESULT Send (
        struct IMessage * Message );
    HRESULT ProviderLoadConfig (
        _bstr_t FileName );
    HRESULT ProviderSaveConfig (
        _bstr_t FileName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Version (
        /*[out,retval]*/ BSTR * Version ) = 0;
      virtual HRESULT __stdcall get_Build (
        /*[out,retval]*/ BSTR * Build ) = 0;
      virtual HRESULT __stdcall get_Module (
        /*[out,retval]*/ BSTR * Module ) = 0;
      virtual HRESULT __stdcall get_LicenseStatus (
        /*[out,retval]*/ BSTR * LicenseStatus ) = 0;
      virtual HRESULT __stdcall get_LicenseKey (
        /*[out,retval]*/ BSTR * LicenseKey ) = 0;
      virtual HRESULT __stdcall put_LicenseKey (
        /*[in]*/ BSTR LicenseKey ) = 0;
      virtual HRESULT __stdcall raw_SaveLicenseKey ( ) = 0;
      virtual HRESULT __stdcall get_LogFile (
        /*[out,retval]*/ BSTR * LogFile ) = 0;
      virtual HRESULT __stdcall put_LogFile (
        /*[in]*/ BSTR LogFile ) = 0;
      virtual HRESULT __stdcall raw_Sleep (
        long Ms ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall get_LastError (
        /*[out,retval]*/ long * LastError ) = 0;
      virtual HRESULT __stdcall raw_GetErrorDescription (
        /*[in]*/ long ErrorCode,
        /*[out,retval]*/ BSTR * Description ) = 0;
      virtual HRESULT __stdcall get_Device (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall put_Device (
        /*[in]*/ BSTR Val ) = 0;
      virtual HRESULT __stdcall get_DeviceSpeed (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_DeviceSpeed (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall get_DeviceSettings (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_DeviceSettings (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall get_DeviceInitString (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall put_DeviceInitString (
        /*[in]*/ BSTR Val ) = 0;
      virtual HRESULT __stdcall get_DialMode (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_DialMode (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall get_ProviderDialString (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall put_ProviderDialString (
        /*[in]*/ BSTR Val ) = 0;
      virtual HRESULT __stdcall get_ProviderPassword (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall put_ProviderPassword (
        /*[in]*/ BSTR Val ) = 0;
      virtual HRESULT __stdcall get_ProviderType (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_ProviderType (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall get_ProviderResponse (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_AdvancedSettings (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall put_AdvancedSettings (
        /*[in]*/ BSTR Val ) = 0;
      virtual HRESULT __stdcall raw_GetDeviceCount (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall raw_GetDevice (
        long lIndex,
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall raw_Send (
        struct IMessage * Message ) = 0;
      virtual HRESULT __stdcall raw_ProviderLoadConfig (
        BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_ProviderSaveConfig (
        BSTR FileName ) = 0;
};

struct __declspec(uuid("370876fa-fcfb-4ee6-8316-fa0ac5a771ae"))
Android;
    // [ default ] interface IAndroid

struct __declspec(uuid("6aef9b37-e65e-4feb-971a-0659de7b931e"))
IAndroid : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetVersion))
    _bstr_t Version;
    __declspec(property(get=GetBuild))
    _bstr_t Build;
    __declspec(property(get=GetModule))
    _bstr_t Module;
    __declspec(property(get=GetLicenseStatus))
    _bstr_t LicenseStatus;
    __declspec(property(get=GetLicenseKey,put=PutLicenseKey))
    _bstr_t LicenseKey;
    __declspec(property(get=GetSendSmsTimeoutMs,put=PutSendSmsTimeoutMs))
    long SendSmsTimeoutMs;
    __declspec(property(get=GetConnectTimeoutMs,put=PutConnectTimeoutMs))
    long ConnectTimeoutMs;
    __declspec(property(get=GetCommandTimeoutMs,put=PutCommandTimeoutMs))
    long CommandTimeoutMs;
    __declspec(property(get=GetLogFile,put=PutLogFile))
    _bstr_t LogFile;
    __declspec(property(get=GetActivityFile,put=PutActivityFile))
    _bstr_t ActivityFile;
    __declspec(property(get=GetLastError))
    long LastError;
    __declspec(property(get=GetDeviceInfo))
    _bstr_t DeviceInfo;
    __declspec(property(get=GetAppVersion))
    _bstr_t AppVersion;
    __declspec(property(get=GetIsConnected))
    VARIANT_BOOL IsConnected;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetVersion ( );
    _bstr_t GetBuild ( );
    _bstr_t GetModule ( );
    _bstr_t GetLicenseStatus ( );
    _bstr_t GetLicenseKey ( );
    void PutLicenseKey (
        _bstr_t LicenseKey );
    HRESULT SaveLicenseKey ( );
    _bstr_t GetLogFile ( );
    void PutLogFile (
        _bstr_t LogFile );
    _bstr_t GetActivityFile ( );
    void PutActivityFile (
        _bstr_t ActivityFile );
    HRESULT Sleep (
        long Ms );
    HRESULT Clear ( );
    long GetLastError ( );
    _bstr_t GetErrorDescription (
        long ErrorCode );
    HRESULT Connect (
        _bstr_t Host,
        long Port );
    HRESULT Disconnect ( );
    HRESULT SendSms (
        struct IMessage * Message );
    IMessagePtr ReceiveSms ( );
    _bstr_t GetDeviceInfo ( );
    _bstr_t GetAppVersion ( );
    VARIANT_BOOL GetIsConnected ( );
    long GetSendSmsTimeoutMs ( );
    long GetConnectTimeoutMs ( );
    long GetCommandTimeoutMs ( );
    void PutSendSmsTimeoutMs (
        long Value );
    void PutConnectTimeoutMs (
        long Value );
    void PutCommandTimeoutMs (
        long Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Version (
        /*[out,retval]*/ BSTR * Version ) = 0;
      virtual HRESULT __stdcall get_Build (
        /*[out,retval]*/ BSTR * Build ) = 0;
      virtual HRESULT __stdcall get_Module (
        /*[out,retval]*/ BSTR * Module ) = 0;
      virtual HRESULT __stdcall get_LicenseStatus (
        /*[out,retval]*/ BSTR * LicenseStatus ) = 0;
      virtual HRESULT __stdcall get_LicenseKey (
        /*[out,retval]*/ BSTR * LicenseKey ) = 0;
      virtual HRESULT __stdcall put_LicenseKey (
        /*[in]*/ BSTR LicenseKey ) = 0;
      virtual HRESULT __stdcall raw_SaveLicenseKey ( ) = 0;
      virtual HRESULT __stdcall get_LogFile (
        /*[out,retval]*/ BSTR * LogFile ) = 0;
      virtual HRESULT __stdcall put_LogFile (
        /*[in]*/ BSTR LogFile ) = 0;
      virtual HRESULT __stdcall get_ActivityFile (
        /*[out,retval]*/ BSTR * ActivityFile ) = 0;
      virtual HRESULT __stdcall put_ActivityFile (
        /*[in]*/ BSTR ActivityFile ) = 0;
      virtual HRESULT __stdcall raw_Sleep (
        long Ms ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall get_LastError (
        /*[out,retval]*/ long * LastError ) = 0;
      virtual HRESULT __stdcall raw_GetErrorDescription (
        /*[in]*/ long ErrorCode,
        /*[out,retval]*/ BSTR * Description ) = 0;
      virtual HRESULT __stdcall raw_Connect (
        /*[in]*/ BSTR Host,
        /*[in]*/ long Port ) = 0;
      virtual HRESULT __stdcall raw_Disconnect ( ) = 0;
      virtual HRESULT __stdcall raw_SendSms (
        /*[in]*/ struct IMessage * Message ) = 0;
      virtual HRESULT __stdcall raw_ReceiveSms (
        /*[out,retval]*/ struct IMessage * * Message ) = 0;
      virtual HRESULT __stdcall get_DeviceInfo (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall get_AppVersion (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall get_IsConnected (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_SendSmsTimeoutMs (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_ConnectTimeoutMs (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall get_CommandTimeoutMs (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_SendSmsTimeoutMs (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall put_ConnectTimeoutMs (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall put_CommandTimeoutMs (
        /*[in]*/ long Value ) = 0;
};

struct __declspec(uuid("4ab18312-548a-4607-97e1-3de7fc27cdd2"))
Gsm;
    // [ default ] interface IGsm

struct __declspec(uuid("b25b188d-42a8-45ef-887f-653cbc9e234b"))
IGsm : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTcpMode,put=PutTcpMode))
    long TcpMode;
    __declspec(property(get=GetVersion))
    _bstr_t Version;
    __declspec(property(get=GetBuild))
    _bstr_t Build;
    __declspec(property(get=GetModule))
    _bstr_t Module;
    __declspec(property(get=GetIsOpen))
    VARIANT_BOOL IsOpen;
    __declspec(property(get=GetSendEnabled))
    VARIANT_BOOL SendEnabled;
    __declspec(property(get=GetReceiveEnabled))
    VARIANT_BOOL ReceiveEnabled;
    __declspec(property(get=GetReportEnabled))
    VARIANT_BOOL ReportEnabled;
    __declspec(property(get=GetLogFile,put=PutLogFile))
    _bstr_t LogFile;
    __declspec(property(get=GetActivityFile,put=PutActivityFile))
    _bstr_t ActivityFile;
    __declspec(property(get=GetLastError))
    long LastError;
    __declspec(property(get=GetLicenseStatus))
    _bstr_t LicenseStatus;
    __declspec(property(get=GetLicenseKey,put=PutLicenseKey))
    _bstr_t LicenseKey;
    __declspec(property(get=GetRevision))
    _bstr_t Revision;
    __declspec(property(get=GetSerialNr))
    _bstr_t SerialNr;
    __declspec(property(get=GetExtractApplicationPort,put=PutExtractApplicationPort))
    VARIANT_BOOL ExtractApplicationPort;
    __declspec(property(get=GetAssembleMultipart,put=PutAssembleMultipart))
    VARIANT_BOOL AssembleMultipart;
    __declspec(property(get=GetMessageMode,put=PutMessageMode))
    long MessageMode;
    __declspec(property(get=GetPrefixSmscMode,put=PutPrefixSmscMode))
    long PrefixSmscMode;
    __declspec(property(get=GetNetworkTimeout,put=PutNetworkTimeout))
    long NetworkTimeout;
    __declspec(property(get=GetWaitForNetwork,put=PutWaitForNetwork))
    VARIANT_BOOL WaitForNetwork;
    __declspec(property(get=GetPreferredSmsc,put=PutPreferredSmsc))
    _bstr_t PreferredSmsc;
    __declspec(property(get=GetCommandTimeout,put=PutCommandTimeout))
    long CommandTimeout;
    __declspec(property(get=GetInterCommandDelay,put=PutInterCommandDelay))
    long InterCommandDelay;
    __declspec(property(get=GetKeepUnusedUdh,put=PutKeepUnusedUdh))
    VARIANT_BOOL KeepUnusedUdh;
    __declspec(property(get=GetOverrideFeatureCheck,put=PutOverrideFeatureCheck))
    VARIANT_BOOL OverrideFeatureCheck;
    __declspec(property(get=GetExtractLanguageShift,put=PutExtractLanguageShift))
    VARIANT_BOOL ExtractLanguageShift;
    __declspec(property(get=GetInterCharacterDelay,put=PutInterCharacterDelay))
    long InterCharacterDelay;
    __declspec(property(get=GetManufacturer))
    _bstr_t Manufacturer;
    __declspec(property(get=GetModel))
    _bstr_t Model;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetVersion ( );
    _bstr_t GetBuild ( );
    _bstr_t GetModule ( );
    _bstr_t GetLicenseStatus ( );
    _bstr_t GetLicenseKey ( );
    void PutLicenseKey (
        _bstr_t LicenseKey );
    HRESULT SaveLicenseKey ( );
    _bstr_t GetLogFile ( );
    void PutLogFile (
        _bstr_t LogFile );
    _bstr_t GetActivityFile ( );
    void PutActivityFile (
        _bstr_t ActivityFile );
    HRESULT Sleep (
        long Ms );
    HRESULT Clear ( );
    long GetLastError ( );
    _bstr_t GetErrorDescription (
        long ErrorCode );
    _bstr_t FindFirstPort ( );
    _bstr_t FindNextPort ( );
    _bstr_t FindFirstDevice ( );
    _bstr_t FindNextDevice ( );
    HRESULT Open (
        _bstr_t strName,
        _bstr_t strPin,
        long lBaudrate );
    HRESULT Close ( );
    HRESULT SendCommand (
        _bstr_t strCommand );
    _bstr_t ReadResponse (
        long lTimeout );
    HRESULT ResetCom ( );
    _bstr_t GetManufacturer ( );
    _bstr_t GetModel ( );
    _bstr_t GetRevision ( );
    _bstr_t GetSerialNr ( );
    VARIANT_BOOL GetSendEnabled ( );
    VARIANT_BOOL GetReceiveEnabled ( );
    VARIANT_BOOL GetReportEnabled ( );
    _bstr_t SendSms (
        struct IMessage * Val,
        long lMultipartFlag,
        long lTimeout );
    HRESULT Receive (
        long lType,
        VARIANT_BOOL bDelete,
        long lStorageType,
        long lTimeout );
    IMessagePtr GetFirstSms ( );
    IMessagePtr GetNextSms ( );
    IGsmDeliveryReportPtr GetFirstReport ( );
    IGsmDeliveryReportPtr GetNextReport ( );
    HRESULT DeleteSms (
        struct IMessage * pSms );
    HRESULT DeleteReport (
        struct IGsmDeliveryReport * pReport );
    VARIANT_BOOL GetExtractApplicationPort ( );
    void PutExtractApplicationPort (
        VARIANT_BOOL Val );
    VARIANT_BOOL GetAssembleMultipart ( );
    void PutAssembleMultipart (
        VARIANT_BOOL Val );
    long GetMessageMode ( );
    void PutMessageMode (
        long Val );
    long GetPrefixSmscMode ( );
    void PutPrefixSmscMode (
        long Val );
    long GetNetworkTimeout ( );
    void PutNetworkTimeout (
        long Val );
    long GetInterCommandDelay ( );
    void PutInterCommandDelay (
        long Val );
    long GetInterCharacterDelay ( );
    void PutInterCharacterDelay (
        long Val );
    VARIANT_BOOL GetWaitForNetwork ( );
    void PutWaitForNetwork (
        VARIANT_BOOL Val );
    _bstr_t GetPreferredSmsc ( );
    void PutPreferredSmsc (
        _bstr_t Val );
    long GetCommandTimeout ( );
    void PutCommandTimeout (
        long Val );
    VARIANT_BOOL GetKeepUnusedUdh ( );
    void PutKeepUnusedUdh (
        VARIANT_BOOL Val );
    VARIANT_BOOL GetOverrideFeatureCheck ( );
    void PutOverrideFeatureCheck (
        VARIANT_BOOL Val );
    VARIANT_BOOL GetExtractLanguageShift ( );
    void PutExtractLanguageShift (
        VARIANT_BOOL Val );
    long GetTcpMode ( );
    void PutTcpMode (
        long Val );
    VARIANT_BOOL GetIsOpen ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Version (
        /*[out,retval]*/ BSTR * Version ) = 0;
      virtual HRESULT __stdcall get_Build (
        /*[out,retval]*/ BSTR * Build ) = 0;
      virtual HRESULT __stdcall get_Module (
        /*[out,retval]*/ BSTR * Module ) = 0;
      virtual HRESULT __stdcall get_LicenseStatus (
        /*[out,retval]*/ BSTR * LicenseStatus ) = 0;
      virtual HRESULT __stdcall get_LicenseKey (
        /*[out,retval]*/ BSTR * LicenseKey ) = 0;
      virtual HRESULT __stdcall put_LicenseKey (
        /*[in]*/ BSTR LicenseKey ) = 0;
      virtual HRESULT __stdcall raw_SaveLicenseKey ( ) = 0;
      virtual HRESULT __stdcall get_LogFile (
        /*[out,retval]*/ BSTR * LogFile ) = 0;
      virtual HRESULT __stdcall put_LogFile (
        /*[in]*/ BSTR LogFile ) = 0;
      virtual HRESULT __stdcall get_ActivityFile (
        /*[out,retval]*/ BSTR * ActivityFile ) = 0;
      virtual HRESULT __stdcall put_ActivityFile (
        /*[in]*/ BSTR ActivityFile ) = 0;
      virtual HRESULT __stdcall raw_Sleep (
        long Ms ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall get_LastError (
        /*[out,retval]*/ long * LastError ) = 0;
      virtual HRESULT __stdcall raw_GetErrorDescription (
        /*[in]*/ long ErrorCode,
        /*[out,retval]*/ BSTR * Description ) = 0;
      virtual HRESULT __stdcall raw_FindFirstPort (
        /*[out,retval]*/ BSTR * strName ) = 0;
      virtual HRESULT __stdcall raw_FindNextPort (
        /*[out,retval]*/ BSTR * strName ) = 0;
      virtual HRESULT __stdcall raw_FindFirstDevice (
        /*[out,retval]*/ BSTR * strName ) = 0;
      virtual HRESULT __stdcall raw_FindNextDevice (
        /*[out,retval]*/ BSTR * strName ) = 0;
      virtual HRESULT __stdcall raw_Open (
        /*[in]*/ BSTR strName,
        /*[in]*/ BSTR strPin,
        /*[in]*/ long lBaudrate ) = 0;
      virtual HRESULT __stdcall raw_Close ( ) = 0;
      virtual HRESULT __stdcall raw_SendCommand (
        /*[in]*/ BSTR strCommand ) = 0;
      virtual HRESULT __stdcall raw_ReadResponse (
        /*[in]*/ long lTimeout,
        /*[out,retval]*/ BSTR * strReponse ) = 0;
      virtual HRESULT __stdcall raw_ResetCom ( ) = 0;
      virtual HRESULT __stdcall get_Manufacturer (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_Model (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_Revision (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_SerialNr (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_SendEnabled (
        /*[out,retval]*/ VARIANT_BOOL * Val ) = 0;
      virtual HRESULT __stdcall get_ReceiveEnabled (
        /*[out,retval]*/ VARIANT_BOOL * Val ) = 0;
      virtual HRESULT __stdcall get_ReportEnabled (
        /*[out,retval]*/ VARIANT_BOOL * Val ) = 0;
      virtual HRESULT __stdcall raw_SendSms (
        /*[in]*/ struct IMessage * Val,
        /*[in]*/ long lMultipartFlag,
        /*[in]*/ long lTimeout,
        /*[out,retval]*/ BSTR * pRef ) = 0;
      virtual HRESULT __stdcall raw_Receive (
        /*[in]*/ long lType,
        /*[in]*/ VARIANT_BOOL bDelete,
        /*[in]*/ long lStorageType,
        /*[in]*/ long lTimeout ) = 0;
      virtual HRESULT __stdcall raw_GetFirstSms (
        /*[out,retval]*/ struct IMessage * * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetNextSms (
        /*[out,retval]*/ struct IMessage * * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetFirstReport (
        /*[out,retval]*/ struct IGsmDeliveryReport * * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetNextReport (
        /*[out,retval]*/ struct IGsmDeliveryReport * * pVal ) = 0;
      virtual HRESULT __stdcall raw_DeleteSms (
        /*[in]*/ struct IMessage * pSms ) = 0;
      virtual HRESULT __stdcall raw_DeleteReport (
        /*[in]*/ struct IGsmDeliveryReport * pReport ) = 0;
      virtual HRESULT __stdcall get_ExtractApplicationPort (
        /*[out,retval]*/ VARIANT_BOOL * Val ) = 0;
      virtual HRESULT __stdcall put_ExtractApplicationPort (
        /*[in]*/ VARIANT_BOOL Val ) = 0;
      virtual HRESULT __stdcall get_AssembleMultipart (
        /*[out,retval]*/ VARIANT_BOOL * Val ) = 0;
      virtual HRESULT __stdcall put_AssembleMultipart (
        /*[in]*/ VARIANT_BOOL Val ) = 0;
      virtual HRESULT __stdcall get_MessageMode (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_MessageMode (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall get_PrefixSmscMode (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_PrefixSmscMode (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall get_NetworkTimeout (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_NetworkTimeout (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall get_InterCommandDelay (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_InterCommandDelay (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall get_InterCharacterDelay (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_InterCharacterDelay (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall get_WaitForNetwork (
        /*[out,retval]*/ VARIANT_BOOL * Val ) = 0;
      virtual HRESULT __stdcall put_WaitForNetwork (
        /*[in]*/ VARIANT_BOOL Val ) = 0;
      virtual HRESULT __stdcall get_PreferredSmsc (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall put_PreferredSmsc (
        /*[in]*/ BSTR Val ) = 0;
      virtual HRESULT __stdcall get_CommandTimeout (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_CommandTimeout (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall get_KeepUnusedUdh (
        /*[out,retval]*/ VARIANT_BOOL * Val ) = 0;
      virtual HRESULT __stdcall put_KeepUnusedUdh (
        /*[in]*/ VARIANT_BOOL Val ) = 0;
      virtual HRESULT __stdcall get_OverrideFeatureCheck (
        /*[out,retval]*/ VARIANT_BOOL * Val ) = 0;
      virtual HRESULT __stdcall put_OverrideFeatureCheck (
        /*[in]*/ VARIANT_BOOL Val ) = 0;
      virtual HRESULT __stdcall get_ExtractLanguageShift (
        /*[out,retval]*/ VARIANT_BOOL * Val ) = 0;
      virtual HRESULT __stdcall put_ExtractLanguageShift (
        /*[in]*/ VARIANT_BOOL Val ) = 0;
      virtual HRESULT __stdcall get_TcpMode (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_TcpMode (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall get_IsOpen (
        /*[out,retval]*/ VARIANT_BOOL * Val ) = 0;
};

struct __declspec(uuid("9169ad26-4304-4b1b-8cd9-77ea2b41f3bc"))
HttpServer;
    // [ default ] interface IHttpServer

struct __declspec(uuid("356cde23-bc03-4283-9f64-af3d0f49100a"))
IHttpServer : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetVersion))
    _bstr_t Version;
    __declspec(property(get=GetBuild))
    _bstr_t Build;
    __declspec(property(get=GetModule))
    _bstr_t Module;
    __declspec(property(get=GetLastError))
    long LastError;
    __declspec(property(get=GetMaxRequestSizeBytes,put=PutMaxRequestSizeBytes))
    long MaxRequestSizeBytes;
    __declspec(property(get=GetNumRequestQueues,put=PutNumRequestQueues))
    long NumRequestQueues;
    __declspec(property(get=GetRequestUrlPath))
    _bstr_t RequestUrlPath;
    __declspec(property(get=GetRequestUrlHost))
    _bstr_t RequestUrlHost;
    __declspec(property(get=GetRequestUrlQueryString))
    _bstr_t RequestUrlQueryString;
    __declspec(property(get=GetRequestVerb))
    _bstr_t RequestVerb;
    __declspec(property(get=GetRequestBodyString))
    _bstr_t RequestBodyString;
    __declspec(property(get=GetLicenseStatus))
    _bstr_t LicenseStatus;
    __declspec(property(get=GetLicenseKey,put=PutLicenseKey))
    _bstr_t LicenseKey;
    __declspec(property(get=GetRequestBodyBase64))
    _bstr_t RequestBodyBase64;
    __declspec(property(get=GetRequestBodyIsBinary))
    VARIANT_BOOL RequestBodyIsBinary;
    __declspec(property(get=GetRequestIp))
    _bstr_t RequestIp;
    __declspec(property(get=GetRequestPort))
    long RequestPort;
    __declspec(property(get=GetResponseTimeoutMs,put=PutResponseTimeoutMs))
    long ResponseTimeoutMs;
    __declspec(property(get=GetRequestUrl))
    _bstr_t RequestUrl;
    __declspec(property(get=GetRequestHeaders))
    _bstr_t RequestHeaders;
    __declspec(property(get=GetResponseCode,put=PutResponseCode))
    long ResponseCode;
    __declspec(property(get=GetResponseReason,put=PutResponseReason))
    _bstr_t ResponseReason;
    __declspec(property(get=GetResponseHeaders))
    _bstr_t ResponseHeaders;
    __declspec(property(get=GetResponseBodyString,put=PutResponseBodyString))
    _bstr_t ResponseBodyString;
    __declspec(property(get=GetLogFile,put=PutLogFile))
    _bstr_t LogFile;
    __declspec(property(get=GetActivityFile,put=PutActivityFile))
    _bstr_t ActivityFile;
    __declspec(property(get=GetResponseBodyBase64))
    _bstr_t ResponseBodyBase64;
    __declspec(property(get=GetIsStarted))
    VARIANT_BOOL IsStarted;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetVersion ( );
    _bstr_t GetBuild ( );
    _bstr_t GetModule ( );
    _bstr_t GetLicenseStatus ( );
    _bstr_t GetLicenseKey ( );
    void PutLicenseKey (
        _bstr_t LicenseKey );
    HRESULT SaveLicenseKey ( );
    _bstr_t GetLogFile ( );
    void PutLogFile (
        _bstr_t LogFile );
    _bstr_t GetActivityFile ( );
    void PutActivityFile (
        _bstr_t ActivityFile );
    HRESULT Sleep (
        long Ms );
    HRESULT Clear ( );
    long GetLastError ( );
    _bstr_t GetErrorDescription (
        long ErrorCode );
    VARIANT_BOOL GetIsStarted ( );
    HRESULT AddUrl (
        _bstr_t url );
    HRESULT Startup ( );
    HRESULT Shutdown ( );
    HRESULT WaitForRequest (
        long Timeout );
    HRESULT SendResponse ( );
    HRESULT ClearResponse ( );
    HRESULT SaveRequestBody (
        _bstr_t Path );
    HRESULT LoadResponseBody (
        _bstr_t Path,
        VARIANT_BOOL bIsText );
    HRESULT SetResponseBodyFromBase64 (
        _bstr_t b64string );
    _bstr_t GetRequestHeader (
        _bstr_t Key );
    _bstr_t GetResponseHeader (
        _bstr_t Key );
    HRESULT SetResponseHeader (
        _bstr_t Key,
        _bstr_t Value );
    long GetMaxRequestSizeBytes ( );
    void PutMaxRequestSizeBytes (
        long Val );
    long GetNumRequestQueues ( );
    long GetResponseTimeoutMs ( );
    _bstr_t GetRequestUrl ( );
    _bstr_t GetRequestUrlPath ( );
    _bstr_t GetRequestUrlHost ( );
    _bstr_t GetRequestUrlQueryString ( );
    _bstr_t GetRequestVerb ( );
    _bstr_t GetRequestBodyString ( );
    _bstr_t GetRequestBodyBase64 ( );
    VARIANT_BOOL GetRequestBodyIsBinary ( );
    _bstr_t GetRequestIp ( );
    long GetRequestPort ( );
    _bstr_t GetRequestHeaders ( );
    long GetResponseCode ( );
    _bstr_t GetResponseReason ( );
    _bstr_t GetResponseHeaders ( );
    _bstr_t GetResponseBodyString ( );
    _bstr_t GetResponseBodyBase64 ( );
    void PutNumRequestQueues (
        long Val );
    void PutResponseTimeoutMs (
        long Val );
    void PutResponseCode (
        long Val );
    void PutResponseReason (
        _bstr_t Val );
    void PutResponseBodyString (
        _bstr_t Val );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Version (
        /*[out,retval]*/ BSTR * Version ) = 0;
      virtual HRESULT __stdcall get_Build (
        /*[out,retval]*/ BSTR * Build ) = 0;
      virtual HRESULT __stdcall get_Module (
        /*[out,retval]*/ BSTR * Module ) = 0;
      virtual HRESULT __stdcall get_LicenseStatus (
        /*[out,retval]*/ BSTR * LicenseStatus ) = 0;
      virtual HRESULT __stdcall get_LicenseKey (
        /*[out,retval]*/ BSTR * LicenseKey ) = 0;
      virtual HRESULT __stdcall put_LicenseKey (
        /*[in]*/ BSTR LicenseKey ) = 0;
      virtual HRESULT __stdcall raw_SaveLicenseKey ( ) = 0;
      virtual HRESULT __stdcall get_LogFile (
        /*[out,retval]*/ BSTR * LogFile ) = 0;
      virtual HRESULT __stdcall put_LogFile (
        /*[in]*/ BSTR LogFile ) = 0;
      virtual HRESULT __stdcall get_ActivityFile (
        /*[out,retval]*/ BSTR * ActivityFile ) = 0;
      virtual HRESULT __stdcall put_ActivityFile (
        /*[in]*/ BSTR ActivityFile ) = 0;
      virtual HRESULT __stdcall raw_Sleep (
        long Ms ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall get_LastError (
        /*[out,retval]*/ long * LastError ) = 0;
      virtual HRESULT __stdcall raw_GetErrorDescription (
        /*[in]*/ long ErrorCode,
        /*[out,retval]*/ BSTR * Description ) = 0;
      virtual HRESULT __stdcall get_IsStarted (
        /*[out,retval]*/ VARIANT_BOOL * Val ) = 0;
      virtual HRESULT __stdcall raw_AddUrl (
        /*[in]*/ BSTR url ) = 0;
      virtual HRESULT __stdcall raw_Startup ( ) = 0;
      virtual HRESULT __stdcall raw_Shutdown ( ) = 0;
      virtual HRESULT __stdcall raw_WaitForRequest (
        /*[in]*/ long Timeout ) = 0;
      virtual HRESULT __stdcall raw_SendResponse ( ) = 0;
      virtual HRESULT __stdcall raw_ClearResponse ( ) = 0;
      virtual HRESULT __stdcall raw_SaveRequestBody (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall raw_LoadResponseBody (
        /*[in]*/ BSTR Path,
        /*[in]*/ VARIANT_BOOL bIsText ) = 0;
      virtual HRESULT __stdcall raw_SetResponseBodyFromBase64 (
        /*[in]*/ BSTR b64string ) = 0;
      virtual HRESULT __stdcall raw_GetRequestHeader (
        /*[in]*/ BSTR Key,
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall raw_GetResponseHeader (
        /*[in]*/ BSTR Key,
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall raw_SetResponseHeader (
        /*[in]*/ BSTR Key,
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_MaxRequestSizeBytes (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_MaxRequestSizeBytes (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall get_NumRequestQueues (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_ResponseTimeoutMs (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_RequestUrl (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_RequestUrlPath (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_RequestUrlHost (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_RequestUrlQueryString (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_RequestVerb (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_RequestBodyString (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_RequestBodyBase64 (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_RequestBodyIsBinary (
        /*[out,retval]*/ VARIANT_BOOL * Val ) = 0;
      virtual HRESULT __stdcall get_RequestIp (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_RequestPort (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_RequestHeaders (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_ResponseCode (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_ResponseReason (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_ResponseHeaders (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_ResponseBodyString (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_ResponseBodyBase64 (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall put_NumRequestQueues (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall put_ResponseTimeoutMs (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall put_ResponseCode (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall put_ResponseReason (
        /*[in]*/ BSTR Val ) = 0;
      virtual HRESULT __stdcall put_ResponseBodyString (
        /*[in]*/ BSTR Val ) = 0;
};

struct __declspec(uuid("5092da94-3952-4fda-9b8e-4b387f0164e6"))
Http;
    // [ default ] interface IHttp

struct __declspec(uuid("1825a7c6-dbab-4b99-aaa1-fdedf36a4982"))
IHttp : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetProxyAccount,put=PutProxyAccount))
    _bstr_t ProxyAccount;
    __declspec(property(get=GetVersion))
    _bstr_t Version;
    __declspec(property(get=GetBuild))
    _bstr_t Build;
    __declspec(property(get=GetModule))
    _bstr_t Module;
    __declspec(property(get=GetLicenseStatus))
    _bstr_t LicenseStatus;
    __declspec(property(get=GetLicenseKey,put=PutLicenseKey))
    _bstr_t LicenseKey;
    __declspec(property(get=GetProxyPassword,put=PutProxyPassword))
    _bstr_t ProxyPassword;
    __declspec(property(get=GetRequestTimeout,put=PutRequestTimeout))
    long RequestTimeout;
    __declspec(property(get=GetLogFile,put=PutLogFile))
    _bstr_t LogFile;
    __declspec(property(get=GetActivityFile,put=PutActivityFile))
    _bstr_t ActivityFile;
    __declspec(property(get=GetLogDetails,put=PutLogDetails))
    VARIANT_BOOL LogDetails;
    __declspec(property(get=GetLastResponseCode))
    long LastResponseCode;
    __declspec(property(get=GetLastResponseText))
    _bstr_t LastResponseText;
    __declspec(property(get=GetLastError))
    long LastError;
    __declspec(property(get=Geturl,put=Puturl))
    _bstr_t url;
    __declspec(property(get=GetPostBody,put=PutPostBody))
    _bstr_t PostBody;
    __declspec(property(get=GetWebAccount,put=PutWebAccount))
    _bstr_t WebAccount;
    __declspec(property(get=GetWebPassword,put=PutWebPassword))
    _bstr_t WebPassword;
    __declspec(property(get=GetProxyServer,put=PutProxyServer))
    _bstr_t ProxyServer;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetVersion ( );
    _bstr_t GetBuild ( );
    _bstr_t GetModule ( );
    _bstr_t GetLicenseStatus ( );
    _bstr_t GetLicenseKey ( );
    void PutLicenseKey (
        _bstr_t LicenseKey );
    HRESULT SaveLicenseKey ( );
    _bstr_t GetLogFile ( );
    void PutLogFile (
        _bstr_t LogFile );
    _bstr_t GetActivityFile ( );
    void PutActivityFile (
        _bstr_t ActivityFile );
    VARIANT_BOOL GetLogDetails ( );
    void PutLogDetails (
        VARIANT_BOOL LogFile );
    HRESULT Sleep (
        long Ms );
    HRESULT Clear ( );
    long GetLastError ( );
    _bstr_t GetErrorDescription (
        long ErrorCode );
    _bstr_t Get (
        _bstr_t strUrl );
    _bstr_t Post (
        _bstr_t strUrl,
        _bstr_t strPostBody );
    HRESULT Download (
        _bstr_t strUrl,
        _bstr_t strTargetPath );
    _bstr_t Geturl ( );
    void Puturl (
        _bstr_t Val );
    _bstr_t GetPostBody ( );
    void PutPostBody (
        _bstr_t Val );
    _bstr_t SendSms (
        struct IMessage * Sms,
        long MultipartFlag );
    _bstr_t GetWebAccount ( );
    void PutWebAccount (
        _bstr_t Val );
    _bstr_t GetWebPassword ( );
    void PutWebPassword (
        _bstr_t Val );
    _bstr_t GetProxyServer ( );
    void PutProxyServer (
        _bstr_t Val );
    _bstr_t GetProxyAccount ( );
    void PutProxyAccount (
        _bstr_t Val );
    _bstr_t GetProxyPassword ( );
    void PutProxyPassword (
        _bstr_t Val );
    long GetRequestTimeout ( );
    void PutRequestTimeout (
        long Val );
    HRESULT SetHeader (
        _bstr_t Header,
        _bstr_t Value );
    long GetLastResponseCode ( );
    _bstr_t GetLastResponseText ( );
    _bstr_t UrlEncode (
        _bstr_t In );
    _bstr_t Base64Encode (
        _bstr_t In );
    _bstr_t Base64EncodeFile (
        _bstr_t FileName );
    _bstr_t HexEncode (
        _bstr_t In );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Version (
        /*[out,retval]*/ BSTR * Version ) = 0;
      virtual HRESULT __stdcall get_Build (
        /*[out,retval]*/ BSTR * Build ) = 0;
      virtual HRESULT __stdcall get_Module (
        /*[out,retval]*/ BSTR * Module ) = 0;
      virtual HRESULT __stdcall get_LicenseStatus (
        /*[out,retval]*/ BSTR * LicenseStatus ) = 0;
      virtual HRESULT __stdcall get_LicenseKey (
        /*[out,retval]*/ BSTR * LicenseKey ) = 0;
      virtual HRESULT __stdcall put_LicenseKey (
        /*[in]*/ BSTR LicenseKey ) = 0;
      virtual HRESULT __stdcall raw_SaveLicenseKey ( ) = 0;
      virtual HRESULT __stdcall get_LogFile (
        /*[out,retval]*/ BSTR * LogFile ) = 0;
      virtual HRESULT __stdcall put_LogFile (
        /*[in]*/ BSTR LogFile ) = 0;
      virtual HRESULT __stdcall get_ActivityFile (
        /*[out,retval]*/ BSTR * ActivityFile ) = 0;
      virtual HRESULT __stdcall put_ActivityFile (
        /*[in]*/ BSTR ActivityFile ) = 0;
      virtual HRESULT __stdcall get_LogDetails (
        /*[out,retval]*/ VARIANT_BOOL * LogFile ) = 0;
      virtual HRESULT __stdcall put_LogDetails (
        /*[in]*/ VARIANT_BOOL LogFile ) = 0;
      virtual HRESULT __stdcall raw_Sleep (
        long Ms ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall get_LastError (
        /*[out,retval]*/ long * LastError ) = 0;
      virtual HRESULT __stdcall raw_GetErrorDescription (
        /*[in]*/ long ErrorCode,
        /*[out,retval]*/ BSTR * Description ) = 0;
      virtual HRESULT __stdcall raw_Get (
        /*[in]*/ BSTR strUrl,
        /*[out,retval]*/ BSTR * strResponse ) = 0;
      virtual HRESULT __stdcall raw_Post (
        /*[in]*/ BSTR strUrl,
        /*[in]*/ BSTR strPostBody,
        /*[out,retval]*/ BSTR * strReponse ) = 0;
      virtual HRESULT __stdcall raw_Download (
        /*[in]*/ BSTR strUrl,
        /*[in]*/ BSTR strTargetPath ) = 0;
      virtual HRESULT __stdcall get_url (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall put_url (
        /*[in]*/ BSTR Val ) = 0;
      virtual HRESULT __stdcall get_PostBody (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall put_PostBody (
        /*[in]*/ BSTR Val ) = 0;
      virtual HRESULT __stdcall raw_SendSms (
        /*[in]*/ struct IMessage * Sms,
        /*[in]*/ long MultipartFlag,
        /*[out,retval]*/ BSTR * Reponse ) = 0;
      virtual HRESULT __stdcall get_WebAccount (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall put_WebAccount (
        /*[in]*/ BSTR Val ) = 0;
      virtual HRESULT __stdcall get_WebPassword (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall put_WebPassword (
        /*[in]*/ BSTR Val ) = 0;
      virtual HRESULT __stdcall get_ProxyServer (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall put_ProxyServer (
        /*[in]*/ BSTR Val ) = 0;
      virtual HRESULT __stdcall get_ProxyAccount (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall put_ProxyAccount (
        /*[in]*/ BSTR Val ) = 0;
      virtual HRESULT __stdcall get_ProxyPassword (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall put_ProxyPassword (
        /*[in]*/ BSTR Val ) = 0;
      virtual HRESULT __stdcall get_RequestTimeout (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_RequestTimeout (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall raw_SetHeader (
        /*[in]*/ BSTR Header,
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_LastResponseCode (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_LastResponseText (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall raw_UrlEncode (
        /*[in]*/ BSTR In,
        /*[out,retval]*/ BSTR * Out ) = 0;
      virtual HRESULT __stdcall raw_Base64Encode (
        /*[in]*/ BSTR In,
        /*[out,retval]*/ BSTR * Out ) = 0;
      virtual HRESULT __stdcall raw_Base64EncodeFile (
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ BSTR * sOut ) = 0;
      virtual HRESULT __stdcall raw_HexEncode (
        /*[in]*/ BSTR In,
        /*[out,retval]*/ BSTR * Out ) = 0;
};

struct __declspec(uuid("929aeee5-56b2-4a67-bcc8-45e5d4fa3739"))
Snpp;
    // [ default ] interface ISnpp

struct __declspec(uuid("c4aab6d2-f834-4fe6-a4ae-b1d5794bc3b4"))
ISnpp : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetVersion))
    _bstr_t Version;
    __declspec(property(get=GetBuild))
    _bstr_t Build;
    __declspec(property(get=GetModule))
    _bstr_t Module;
    __declspec(property(get=GetLicenseStatus))
    _bstr_t LicenseStatus;
    __declspec(property(get=GetLicenseKey,put=PutLicenseKey))
    _bstr_t LicenseKey;
    __declspec(property(get=GetMultilineEnabled,put=PutMultilineEnabled))
    VARIANT_BOOL MultilineEnabled;
    __declspec(property(get=GetLogFile,put=PutLogFile))
    _bstr_t LogFile;
    __declspec(property(get=GetLastError))
    long LastError;
    __declspec(property(get=GetServer,put=PutServer))
    _bstr_t Server;
    __declspec(property(get=GetServerPort,put=PutServerPort))
    long ServerPort;
    __declspec(property(get=GetServerTimeout,put=PutServerTimeout))
    long ServerTimeout;
    __declspec(property(get=GetProviderPassword,put=PutProviderPassword))
    _bstr_t ProviderPassword;
    __declspec(property(get=GetProviderUsername,put=PutProviderUsername))
    _bstr_t ProviderUsername;
    __declspec(property(get=GetProviderResponse))
    _bstr_t ProviderResponse;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetVersion ( );
    _bstr_t GetBuild ( );
    _bstr_t GetModule ( );
    _bstr_t GetLicenseStatus ( );
    _bstr_t GetLicenseKey ( );
    void PutLicenseKey (
        _bstr_t LicenseKey );
    HRESULT SaveLicenseKey ( );
    _bstr_t GetLogFile ( );
    void PutLogFile (
        _bstr_t LogFile );
    HRESULT Clear ( );
    long GetLastError ( );
    _bstr_t GetErrorDescription (
        long ErrorCode );
    _bstr_t GetServer ( );
    void PutServer (
        _bstr_t Val );
    long GetServerPort ( );
    void PutServerPort (
        long Val );
    long GetServerTimeout ( );
    void PutServerTimeout (
        long Val );
    _bstr_t GetProviderPassword ( );
    void PutProviderPassword (
        _bstr_t Val );
    _bstr_t GetProviderUsername ( );
    void PutProviderUsername (
        _bstr_t Val );
    _bstr_t GetProviderResponse ( );
    VARIANT_BOOL GetMultilineEnabled ( );
    void PutMultilineEnabled (
        VARIANT_BOOL Val );
    HRESULT Send (
        _bstr_t ToAddress,
        _bstr_t Message );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Version (
        /*[out,retval]*/ BSTR * Version ) = 0;
      virtual HRESULT __stdcall get_Build (
        /*[out,retval]*/ BSTR * Build ) = 0;
      virtual HRESULT __stdcall get_Module (
        /*[out,retval]*/ BSTR * Module ) = 0;
      virtual HRESULT __stdcall get_LicenseStatus (
        /*[out,retval]*/ BSTR * LicenseStatus ) = 0;
      virtual HRESULT __stdcall get_LicenseKey (
        /*[out,retval]*/ BSTR * LicenseKey ) = 0;
      virtual HRESULT __stdcall put_LicenseKey (
        /*[in]*/ BSTR LicenseKey ) = 0;
      virtual HRESULT __stdcall raw_SaveLicenseKey ( ) = 0;
      virtual HRESULT __stdcall get_LogFile (
        /*[out,retval]*/ BSTR * LogFile ) = 0;
      virtual HRESULT __stdcall put_LogFile (
        /*[in]*/ BSTR LogFile ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall get_LastError (
        /*[out,retval]*/ long * LastError ) = 0;
      virtual HRESULT __stdcall raw_GetErrorDescription (
        /*[in]*/ long ErrorCode,
        /*[out,retval]*/ BSTR * Description ) = 0;
      virtual HRESULT __stdcall get_Server (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall put_Server (
        /*[in]*/ BSTR Val ) = 0;
      virtual HRESULT __stdcall get_ServerPort (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_ServerPort (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall get_ServerTimeout (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_ServerTimeout (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall get_ProviderPassword (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall put_ProviderPassword (
        /*[in]*/ BSTR Val ) = 0;
      virtual HRESULT __stdcall get_ProviderUsername (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall put_ProviderUsername (
        /*[in]*/ BSTR Val ) = 0;
      virtual HRESULT __stdcall get_ProviderResponse (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_MultilineEnabled (
        /*[out,retval]*/ VARIANT_BOOL * Val ) = 0;
      virtual HRESULT __stdcall put_MultilineEnabled (
        /*[in]*/ VARIANT_BOOL Val ) = 0;
      virtual HRESULT __stdcall raw_Send (
        /*[in]*/ BSTR ToAddress,
        /*[in]*/ BSTR Message ) = 0;
};

struct __declspec(uuid("a1453018-3c02-4c22-a136-3cf9b78ceac8"))
Smpp;
    // [ default ] interface ISmpp

struct __declspec(uuid("9e5fc25e-613a-4951-9c8f-37923c7ae7ae"))
ISmpp : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetVersion))
    _bstr_t Version;
    __declspec(property(get=GetBuild))
    _bstr_t Build;
    __declspec(property(get=GetModule))
    _bstr_t Module;
    __declspec(property(get=GetLastError))
    long LastError;
    __declspec(property(get=GetPduTimeout,put=PutPduTimeout))
    long PduTimeout;
    __declspec(property(get=GetEnquireInterval,put=PutEnquireInterval))
    long EnquireInterval;
    __declspec(property(get=GetMultipartTimeout,put=PutMultipartTimeout))
    long MultipartTimeout;
    __declspec(property(get=GetLicenseStatus))
    _bstr_t LicenseStatus;
    __declspec(property(get=GetLicenseKey,put=PutLicenseKey))
    _bstr_t LicenseKey;
    __declspec(property(get=GetUseGsmEncoding,put=PutUseGsmEncoding))
    long UseGsmEncoding;
    __declspec(property(get=GetAssembleMultipart,put=PutAssembleMultipart))
    VARIANT_BOOL AssembleMultipart;
    __declspec(property(get=GetMultipartMode,put=PutMultipartMode))
    long MultipartMode;
    __declspec(property(get=GetExtractApplicationPort,put=PutExtractApplicationPort))
    VARIANT_BOOL ExtractApplicationPort;
    __declspec(property(get=GetLogFile,put=PutLogFile))
    _bstr_t LogFile;
    __declspec(property(get=GetActivityFile,put=PutActivityFile))
    _bstr_t ActivityFile;
    __declspec(property(get=GetMaxSmsReceived,put=PutMaxSmsReceived))
    long MaxSmsReceived;
    __declspec(property(get=GetSubmitMode,put=PutSubmitMode))
    long SubmitMode;
    __declspec(property(get=GetIsConnected))
    VARIANT_BOOL IsConnected;
    __declspec(property(get=GetLogPduDetails,put=PutLogPduDetails))
    VARIANT_BOOL LogPduDetails;
    __declspec(property(get=GetLogLevel,put=PutLogLevel))
    long LogLevel;
    __declspec(property(get=GetIsBound))
    VARIANT_BOOL IsBound;
    __declspec(property(get=GetKeepUnusedUdh,put=PutKeepUnusedUdh))
    VARIANT_BOOL KeepUnusedUdh;
    __declspec(property(get=GetExtractLanguageShift,put=PutExtractLanguageShift))
    VARIANT_BOOL ExtractLanguageShift;
    __declspec(property(get=GetLocalIpAddress,put=PutLocalIpAddress))
    _bstr_t LocalIpAddress;
    __declspec(property(get=GetSmsSentPerSecond))
    long SmsSentPerSecond;
    __declspec(property(get=GetSmsReceivedPerSecond))
    long SmsReceivedPerSecond;
    __declspec(property(get=GetMaxOutPendingPdus,put=PutMaxOutPendingPdus))
    long MaxOutPendingPdus;
    __declspec(property(get=GetMaxSmsSubmissions,put=PutMaxSmsSubmissions))
    long MaxSmsSubmissions;
    __declspec(property(get=GetMaxSmsQueries,put=PutMaxSmsQueries))
    long MaxSmsQueries;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetVersion ( );
    _bstr_t GetBuild ( );
    _bstr_t GetModule ( );
    _bstr_t GetLicenseStatus ( );
    _bstr_t GetLicenseKey ( );
    void PutLicenseKey (
        _bstr_t LicenseKey );
    HRESULT SaveLicenseKey ( );
    _bstr_t GetLogFile ( );
    void PutLogFile (
        _bstr_t LogFile );
    _bstr_t GetActivityFile ( );
    void PutActivityFile (
        _bstr_t ActivityFile );
    VARIANT_BOOL GetLogPduDetails ( );
    void PutLogPduDetails (
        VARIANT_BOOL LogDetails );
    long GetLogLevel ( );
    void PutLogLevel (
        long pLevel );
    HRESULT Sleep (
        long Ms );
    HRESULT Clear ( );
    long GetLastError ( );
    _bstr_t GetErrorDescription (
        long ErrorCode );
    HRESULT Connect (
        _bstr_t Host,
        long Port,
        long Timeout,
        VARIANT_BOOL Secure );
    HRESULT Bind (
        long Type,
        _bstr_t SystemId,
        _bstr_t SystemPassword,
        _bstr_t SystemType,
        long Version,
        long TON,
        long NPI,
        _bstr_t AddressRange,
        long Timeout );
    HRESULT Unbind ( );
    HRESULT Disconnect ( );
    HRESULT AddBindTlv (
        struct ITlv * Tlv );
    HRESULT DeleteBindTlv (
        long lTag );
    ITlvPtr GetFirstBindTlv ( );
    ITlvPtr GetNextBindTlv ( );
    ITlvPtr GetBindTlv (
        long lTag );
    long SubmitSms (
        struct IMessage * Sms,
        long MultipartFlag );
    VARIANT_BOOL WaitForSmsUpdate (
        long TimeoutMs );
    IMessagePtr FetchSmsUpdate ( );
    HRESULT QuerySms (
        struct IMessage * Sms );
    IMessagePtr ReceiveMessage ( );
    long CountSmsReceived ( );
    long CountSmsSubmitSpace ( );
    long CountSmsQuerySpace ( );
    VARIANT_BOOL GetIsConnected ( );
    VARIANT_BOOL GetIsBound ( );
    long GetMaxOutPendingPdus ( );
    void PutMaxOutPendingPdus (
        long Val );
    long GetMaxSmsSubmissions ( );
    void PutMaxSmsSubmissions (
        long Val );
    long GetMaxSmsQueries ( );
    void PutMaxSmsQueries (
        long Val );
    long GetPduTimeout ( );
    void PutPduTimeout (
        long Val );
    long GetEnquireInterval ( );
    void PutEnquireInterval (
        long Val );
    long GetMultipartTimeout ( );
    void PutMultipartTimeout (
        long Val );
    long GetUseGsmEncoding ( );
    void PutUseGsmEncoding (
        long Val );
    VARIANT_BOOL GetAssembleMultipart ( );
    void PutAssembleMultipart (
        VARIANT_BOOL Val );
    long GetMultipartMode ( );
    void PutMultipartMode (
        long Val );
    VARIANT_BOOL GetExtractApplicationPort ( );
    void PutExtractApplicationPort (
        VARIANT_BOOL Val );
    long GetMaxSmsReceived ( );
    void PutMaxSmsReceived (
        long Val );
    long GetSubmitMode ( );
    void PutSubmitMode (
        long Val );
    VARIANT_BOOL GetKeepUnusedUdh ( );
    void PutKeepUnusedUdh (
        VARIANT_BOOL Val );
    VARIANT_BOOL GetExtractLanguageShift ( );
    void PutExtractLanguageShift (
        VARIANT_BOOL Val );
    _bstr_t GetLocalIpAddress ( );
    void PutLocalIpAddress (
        _bstr_t Ip );
    long GetSmsSentPerSecond ( );
    long GetSmsReceivedPerSecond ( );
    IMessagePtr GetFirstPart (
        struct IMessage * Sms );
    IMessagePtr GetNextPart ( );
    long CountParts (
        struct IMessage * Sms );
    HRESULT AssembleSms (
        struct IMessage * Part );
    IMessagePtr GetAssembledSms (
        VARIANT_BOOL Force );
    HRESULT ResetSmsAssembler ( );
    IMessagePtr FetchNotUpdated ( );
    IMessagePtr FetchNotSubmitted ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Version (
        /*[out,retval]*/ BSTR * Version ) = 0;
      virtual HRESULT __stdcall get_Build (
        /*[out,retval]*/ BSTR * Build ) = 0;
      virtual HRESULT __stdcall get_Module (
        /*[out,retval]*/ BSTR * Module ) = 0;
      virtual HRESULT __stdcall get_LicenseStatus (
        /*[out,retval]*/ BSTR * LicenseStatus ) = 0;
      virtual HRESULT __stdcall get_LicenseKey (
        /*[out,retval]*/ BSTR * LicenseKey ) = 0;
      virtual HRESULT __stdcall put_LicenseKey (
        /*[in]*/ BSTR LicenseKey ) = 0;
      virtual HRESULT __stdcall raw_SaveLicenseKey ( ) = 0;
      virtual HRESULT __stdcall get_LogFile (
        /*[out,retval]*/ BSTR * LogFile ) = 0;
      virtual HRESULT __stdcall put_LogFile (
        /*[in]*/ BSTR LogFile ) = 0;
      virtual HRESULT __stdcall get_ActivityFile (
        /*[out,retval]*/ BSTR * ActivityFile ) = 0;
      virtual HRESULT __stdcall put_ActivityFile (
        /*[in]*/ BSTR ActivityFile ) = 0;
      virtual HRESULT __stdcall get_LogPduDetails (
        /*[out,retval]*/ VARIANT_BOOL * LogDetails ) = 0;
      virtual HRESULT __stdcall put_LogPduDetails (
        /*[in]*/ VARIANT_BOOL LogDetails ) = 0;
      virtual HRESULT __stdcall get_LogLevel (
        /*[out,retval]*/ long * pLevel ) = 0;
      virtual HRESULT __stdcall put_LogLevel (
        /*[in]*/ long pLevel ) = 0;
      virtual HRESULT __stdcall raw_Sleep (
        long Ms ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall get_LastError (
        /*[out,retval]*/ long * LastError ) = 0;
      virtual HRESULT __stdcall raw_GetErrorDescription (
        /*[in]*/ long ErrorCode,
        /*[out,retval]*/ BSTR * Description ) = 0;
      virtual HRESULT __stdcall raw_Connect (
        /*[in]*/ BSTR Host,
        /*[in]*/ long Port,
        /*[in]*/ long Timeout,
        /*[in]*/ VARIANT_BOOL Secure ) = 0;
      virtual HRESULT __stdcall raw_Bind (
        /*[in]*/ long Type,
        /*[in]*/ BSTR SystemId,
        /*[in]*/ BSTR SystemPassword,
        /*[in]*/ BSTR SystemType,
        /*[in]*/ long Version,
        /*[in]*/ long TON,
        /*[in]*/ long NPI,
        /*[in]*/ BSTR AddressRange,
        /*[in]*/ long Timeout ) = 0;
      virtual HRESULT __stdcall raw_Unbind ( ) = 0;
      virtual HRESULT __stdcall raw_Disconnect ( ) = 0;
      virtual HRESULT __stdcall raw_AddBindTlv (
        /*[in]*/ struct ITlv * Tlv ) = 0;
      virtual HRESULT __stdcall raw_DeleteBindTlv (
        /*[in]*/ long lTag ) = 0;
      virtual HRESULT __stdcall raw_GetFirstBindTlv (
        /*[out,retval]*/ struct ITlv * * Tlv ) = 0;
      virtual HRESULT __stdcall raw_GetNextBindTlv (
        /*[out,retval]*/ struct ITlv * * Tlv ) = 0;
      virtual HRESULT __stdcall raw_GetBindTlv (
        /*[in]*/ long lTag,
        /*[out,retval]*/ struct ITlv * * Tlv ) = 0;
      virtual HRESULT __stdcall raw_SubmitSms (
        /*[in]*/ struct IMessage * Sms,
        /*[in]*/ long MultipartFlag,
        /*[out,retval]*/ long * Parts ) = 0;
      virtual HRESULT __stdcall raw_WaitForSmsUpdate (
        /*[in]*/ long TimeoutMs,
        /*[out,retval]*/ VARIANT_BOOL * Updated ) = 0;
      virtual HRESULT __stdcall raw_FetchSmsUpdate (
        /*[out,retval]*/ struct IMessage * * Sms ) = 0;
      virtual HRESULT __stdcall raw_QuerySms (
        /*[in]*/ struct IMessage * Sms ) = 0;
      virtual HRESULT __stdcall raw_ReceiveMessage (
        /*[out,retval]*/ struct IMessage * * Sms ) = 0;
      virtual HRESULT __stdcall raw_CountSmsReceived (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall raw_CountSmsSubmitSpace (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_CountSmsQuerySpace (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_IsConnected (
        /*[out,retval]*/ VARIANT_BOOL * Val ) = 0;
      virtual HRESULT __stdcall get_IsBound (
        /*[out,retval]*/ VARIANT_BOOL * Val ) = 0;
      virtual HRESULT __stdcall get_MaxOutPendingPdus (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_MaxOutPendingPdus (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall get_MaxSmsSubmissions (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_MaxSmsSubmissions (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall get_MaxSmsQueries (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_MaxSmsQueries (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall get_PduTimeout (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_PduTimeout (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall get_EnquireInterval (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_EnquireInterval (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall get_MultipartTimeout (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_MultipartTimeout (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall get_UseGsmEncoding (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_UseGsmEncoding (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall get_AssembleMultipart (
        /*[out,retval]*/ VARIANT_BOOL * Val ) = 0;
      virtual HRESULT __stdcall put_AssembleMultipart (
        /*[in]*/ VARIANT_BOOL Val ) = 0;
      virtual HRESULT __stdcall get_MultipartMode (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_MultipartMode (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall get_ExtractApplicationPort (
        /*[out,retval]*/ VARIANT_BOOL * Val ) = 0;
      virtual HRESULT __stdcall put_ExtractApplicationPort (
        /*[in]*/ VARIANT_BOOL Val ) = 0;
      virtual HRESULT __stdcall get_MaxSmsReceived (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_MaxSmsReceived (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall get_SubmitMode (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_SubmitMode (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall get_KeepUnusedUdh (
        /*[out,retval]*/ VARIANT_BOOL * Val ) = 0;
      virtual HRESULT __stdcall put_KeepUnusedUdh (
        /*[in]*/ VARIANT_BOOL Val ) = 0;
      virtual HRESULT __stdcall get_ExtractLanguageShift (
        /*[out,retval]*/ VARIANT_BOOL * Val ) = 0;
      virtual HRESULT __stdcall put_ExtractLanguageShift (
        /*[in]*/ VARIANT_BOOL Val ) = 0;
      virtual HRESULT __stdcall get_LocalIpAddress (
        /*[out,retval]*/ BSTR * Ip ) = 0;
      virtual HRESULT __stdcall put_LocalIpAddress (
        /*[in]*/ BSTR Ip ) = 0;
      virtual HRESULT __stdcall get_SmsSentPerSecond (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_SmsReceivedPerSecond (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_GetFirstPart (
        /*[in]*/ struct IMessage * Sms,
        /*[out,retval]*/ struct IMessage * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_GetNextPart (
        /*[out,retval]*/ struct IMessage * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CountParts (
        /*[in]*/ struct IMessage * Sms,
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall raw_AssembleSms (
        /*[in]*/ struct IMessage * Part ) = 0;
      virtual HRESULT __stdcall raw_GetAssembledSms (
        /*[in]*/ VARIANT_BOOL Force,
        /*[out,retval]*/ struct IMessage * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_ResetSmsAssembler ( ) = 0;
      virtual HRESULT __stdcall raw_FetchNotUpdated (
        /*[out,retval]*/ struct IMessage * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_FetchNotSubmitted (
        /*[out,retval]*/ struct IMessage * * ppVal ) = 0;
};

struct __declspec(uuid("6f2d0285-924e-4f76-a0ea-fc9282d4c761"))
SmppServer;
    // [ default ] interface ISmppServer

struct __declspec(uuid("3e1ff0c2-4f98-4fa2-954b-bf5730fb6cf9"))
ISmppSession : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSmsSentPerSecond))
    long SmsSentPerSecond;
    __declspec(property(get=GetSmsReceivedPerSecond))
    long SmsReceivedPerSecond;
    __declspec(property(get=GetId))
    long Id;
    __declspec(property(get=GetLogPduDetails,put=PutLogPduDetails))
    VARIANT_BOOL LogPduDetails;
    __declspec(property(get=GetLogLevel,put=PutLogLevel))
    long LogLevel;
    __declspec(property(get=GetIp))
    _bstr_t Ip;
    __declspec(property(get=GetPort))
    long Port;
    __declspec(property(get=GetVersion))
    long Version;
    __declspec(property(get=GetSystemId))
    _bstr_t SystemId;
    __declspec(property(get=GetPassword))
    _bstr_t Password;
    __declspec(property(get=GetSystemType))
    _bstr_t SystemType;
    __declspec(property(get=GetAddressRange))
    _bstr_t AddressRange;
    __declspec(property(get=GetLogFile,put=PutLogFile))
    _bstr_t LogFile;
    __declspec(property(get=GetActivityFile,put=PutActivityFile))
    _bstr_t ActivityFile;
    __declspec(property(get=GetConnectionState))
    long ConnectionState;
    __declspec(property(get=GetPduTimeout,put=PutPduTimeout))
    long PduTimeout;
    __declspec(property(get=GetEnquireInterval,put=PutEnquireInterval))
    long EnquireInterval;
    __declspec(property(get=GetMultipartTimeout,put=PutMultipartTimeout))
    long MultipartTimeout;
    __declspec(property(get=GetRequestedBind))
    long RequestedBind;
    __declspec(property(get=GetAddressRangeNpi))
    long AddressRangeNpi;
    __declspec(property(get=GetAddressRangeTon))
    long AddressRangeTon;
    __declspec(property(get=GetLastError))
    long LastError;
    __declspec(property(get=GetMaxSmsDeliveries,put=PutMaxSmsDeliveries))
    long MaxSmsDeliveries;
    __declspec(property(get=GetMaxSmsSubmission,put=PutMaxSmsSubmission))
    long MaxSmsSubmission;
    __declspec(property(get=GetMaxSmsQueries,put=PutMaxSmsQueries))
    long MaxSmsQueries;
    __declspec(property(get=GetMaxOutPendingPdus,put=PutMaxOutPendingPdus))
    long MaxOutPendingPdus;
    __declspec(property(get=GetIsConnected))
    VARIANT_BOOL IsConnected;
    __declspec(property(get=GetUseGsmEncoding,put=PutUseGsmEncoding))
    long UseGsmEncoding;
    __declspec(property(get=GetIsBound))
    VARIANT_BOOL IsBound;
    __declspec(property(get=GetMultipartMode,put=PutMultipartMode))
    long MultipartMode;
    __declspec(property(get=GetExtractApplicationPort,put=PutExtractApplicationPort))
    VARIANT_BOOL ExtractApplicationPort;
    __declspec(property(get=GetDeliverMode,put=PutDeliverMode))
    long DeliverMode;
    __declspec(property(get=GetKeepUnusedUdh,put=PutKeepUnusedUdh))
    VARIANT_BOOL KeepUnusedUdh;
    __declspec(property(get=GetExtractLanguageShift,put=PutExtractLanguageShift))
    VARIANT_BOOL ExtractLanguageShift;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetLogFile ( );
    void PutLogFile (
        _bstr_t LogFile );
    _bstr_t GetActivityFile ( );
    void PutActivityFile (
        _bstr_t ActivityFile );
    VARIANT_BOOL GetLogPduDetails ( );
    void PutLogPduDetails (
        VARIANT_BOOL LogDetails );
    long GetLogLevel ( );
    void PutLogLevel (
        long pLevel );
    long GetLastError ( );
    _bstr_t GetErrorDescription (
        long ErrorCode );
    _bstr_t GetIp ( );
    long GetPort ( );
    long GetVersion ( );
    _bstr_t GetSystemId ( );
    _bstr_t GetPassword ( );
    _bstr_t GetSystemType ( );
    _bstr_t GetAddressRange ( );
    long GetAddressRangeNpi ( );
    long GetAddressRangeTon ( );
    long GetConnectionState ( );
    long GetRequestedBind ( );
    long GetId ( );
    HRESULT RespondToBind (
        long Status );
    HRESULT RespondToSubmitSms (
        struct IMessage * Sms );
    IMessagePtr ReceiveSubmitSms ( );
    HRESULT RespondToQuerySms (
        struct IMessage * Sms );
    IMessagePtr ReceiveQuerySms ( );
    long DeliverSms (
        struct IMessage * Sms,
        long MultipartFlag );
    HRESULT DeliverReport (
        struct IMessage * Sms );
    IMessagePtr ReceiveDeliverResponse ( );
    ITlvPtr GetFirstBindTlv ( );
    ITlvPtr GetNextBindTlv ( );
    ITlvPtr GetBindTlv (
        long lTag );
    HRESULT Disconnect ( );
    long GetMaxSmsDeliveries ( );
    void PutMaxSmsDeliveries (
        long Val );
    long GetMaxSmsSubmission ( );
    void PutMaxSmsSubmission (
        long Val );
    long GetMaxSmsQueries ( );
    void PutMaxSmsQueries (
        long Val );
    long GetMaxOutPendingPdus ( );
    void PutMaxOutPendingPdus (
        long Val );
    long GetPduTimeout ( );
    void PutPduTimeout (
        long Val );
    long GetEnquireInterval ( );
    void PutEnquireInterval (
        long Val );
    long GetMultipartTimeout ( );
    void PutMultipartTimeout (
        long Val );
    long GetUseGsmEncoding ( );
    void PutUseGsmEncoding (
        long Val );
    long GetMultipartMode ( );
    void PutMultipartMode (
        long Val );
    VARIANT_BOOL GetExtractApplicationPort ( );
    void PutExtractApplicationPort (
        VARIANT_BOOL Val );
    long GetDeliverMode ( );
    void PutDeliverMode (
        long Val );
    VARIANT_BOOL GetKeepUnusedUdh ( );
    void PutKeepUnusedUdh (
        VARIANT_BOOL Val );
    VARIANT_BOOL GetExtractLanguageShift ( );
    void PutExtractLanguageShift (
        VARIANT_BOOL Val );
    long CountSmsSubmissions ( );
    long CountSmsQueries ( );
    long CountSmsDeliverySpace ( );
    long GetSmsSentPerSecond ( );
    long GetSmsReceivedPerSecond ( );
    IMessagePtr GetFirstPart (
        struct IMessage * Sms );
    IMessagePtr GetNextPart ( );
    long CountParts (
        struct IMessage * Sms );
    HRESULT AssembleSms (
        struct IMessage * Part );
    IMessagePtr GetAssembledSms (
        VARIANT_BOOL Force );
    IMessagePtr FetchNotResponded ( );
    IMessagePtr FetchNotDelivered ( );
    VARIANT_BOOL GetIsConnected ( );
    VARIANT_BOOL GetIsBound ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LogFile (
        /*[out,retval]*/ BSTR * LogFile ) = 0;
      virtual HRESULT __stdcall put_LogFile (
        /*[in]*/ BSTR LogFile ) = 0;
      virtual HRESULT __stdcall get_ActivityFile (
        /*[out,retval]*/ BSTR * ActivityFile ) = 0;
      virtual HRESULT __stdcall put_ActivityFile (
        /*[in]*/ BSTR ActivityFile ) = 0;
      virtual HRESULT __stdcall get_LogPduDetails (
        /*[out,retval]*/ VARIANT_BOOL * LogDetails ) = 0;
      virtual HRESULT __stdcall put_LogPduDetails (
        /*[in]*/ VARIANT_BOOL LogDetails ) = 0;
      virtual HRESULT __stdcall get_LogLevel (
        /*[out,retval]*/ long * pLevel ) = 0;
      virtual HRESULT __stdcall put_LogLevel (
        /*[in]*/ long pLevel ) = 0;
      virtual HRESULT __stdcall get_LastError (
        /*[out,retval]*/ long * LastError ) = 0;
      virtual HRESULT __stdcall raw_GetErrorDescription (
        /*[in]*/ long ErrorCode,
        /*[out,retval]*/ BSTR * Description ) = 0;
      virtual HRESULT __stdcall get_Ip (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_Port (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_Version (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_SystemId (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_Password (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_SystemType (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_AddressRange (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_AddressRangeNpi (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_AddressRangeTon (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_ConnectionState (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_RequestedBind (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall raw_RespondToBind (
        /*[in]*/ long Status ) = 0;
      virtual HRESULT __stdcall raw_RespondToSubmitSms (
        /*[in]*/ struct IMessage * Sms ) = 0;
      virtual HRESULT __stdcall raw_ReceiveSubmitSms (
        /*[out,retval]*/ struct IMessage * * Sms ) = 0;
      virtual HRESULT __stdcall raw_RespondToQuerySms (
        /*[in]*/ struct IMessage * Sms ) = 0;
      virtual HRESULT __stdcall raw_ReceiveQuerySms (
        /*[out,retval]*/ struct IMessage * * Sms ) = 0;
      virtual HRESULT __stdcall raw_DeliverSms (
        /*[in]*/ struct IMessage * Sms,
        /*[in]*/ long MultipartFlag,
        /*[out,retval]*/ long * Parts ) = 0;
      virtual HRESULT __stdcall raw_DeliverReport (
        /*[in]*/ struct IMessage * Sms ) = 0;
      virtual HRESULT __stdcall raw_ReceiveDeliverResponse (
        /*[out,retval]*/ struct IMessage * * Sms ) = 0;
      virtual HRESULT __stdcall raw_GetFirstBindTlv (
        /*[out,retval]*/ struct ITlv * * Tlv ) = 0;
      virtual HRESULT __stdcall raw_GetNextBindTlv (
        /*[out,retval]*/ struct ITlv * * Tlv ) = 0;
      virtual HRESULT __stdcall raw_GetBindTlv (
        /*[in]*/ long lTag,
        /*[out,retval]*/ struct ITlv * * Tlv ) = 0;
      virtual HRESULT __stdcall raw_Disconnect ( ) = 0;
      virtual HRESULT __stdcall get_MaxSmsDeliveries (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_MaxSmsDeliveries (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall get_MaxSmsSubmission (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_MaxSmsSubmission (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall get_MaxSmsQueries (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_MaxSmsQueries (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall get_MaxOutPendingPdus (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_MaxOutPendingPdus (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall get_PduTimeout (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_PduTimeout (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall get_EnquireInterval (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_EnquireInterval (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall get_MultipartTimeout (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_MultipartTimeout (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall get_UseGsmEncoding (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_UseGsmEncoding (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall get_MultipartMode (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_MultipartMode (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall get_ExtractApplicationPort (
        /*[out,retval]*/ VARIANT_BOOL * Val ) = 0;
      virtual HRESULT __stdcall put_ExtractApplicationPort (
        /*[in]*/ VARIANT_BOOL Val ) = 0;
      virtual HRESULT __stdcall get_DeliverMode (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_DeliverMode (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall get_KeepUnusedUdh (
        /*[out,retval]*/ VARIANT_BOOL * Val ) = 0;
      virtual HRESULT __stdcall put_KeepUnusedUdh (
        /*[in]*/ VARIANT_BOOL Val ) = 0;
      virtual HRESULT __stdcall get_ExtractLanguageShift (
        /*[out,retval]*/ VARIANT_BOOL * Val ) = 0;
      virtual HRESULT __stdcall put_ExtractLanguageShift (
        /*[in]*/ VARIANT_BOOL Val ) = 0;
      virtual HRESULT __stdcall raw_CountSmsSubmissions (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall raw_CountSmsQueries (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall raw_CountSmsDeliverySpace (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_SmsSentPerSecond (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_SmsReceivedPerSecond (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_GetFirstPart (
        /*[in]*/ struct IMessage * Sms,
        /*[out,retval]*/ struct IMessage * * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetNextPart (
        /*[out,retval]*/ struct IMessage * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CountParts (
        /*[in]*/ struct IMessage * Sms,
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall raw_AssembleSms (
        /*[in]*/ struct IMessage * Part ) = 0;
      virtual HRESULT __stdcall raw_GetAssembledSms (
        /*[in]*/ VARIANT_BOOL Force,
        /*[out,retval]*/ struct IMessage * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_FetchNotResponded (
        /*[out,retval]*/ struct IMessage * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_FetchNotDelivered (
        /*[out,retval]*/ struct IMessage * * ppVal ) = 0;
      virtual HRESULT __stdcall get_IsConnected (
        /*[out,retval]*/ VARIANT_BOOL * Val ) = 0;
      virtual HRESULT __stdcall get_IsBound (
        /*[out,retval]*/ VARIANT_BOOL * Val ) = 0;
};

struct __declspec(uuid("ebe10239-a8c6-46ca-bc48-0cfa6cfd835c"))
ISmppServer : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetVersion))
    _bstr_t Version;
    __declspec(property(get=GetBuild))
    _bstr_t Build;
    __declspec(property(get=GetModule))
    _bstr_t Module;
    __declspec(property(get=GetLicenseStatus))
    _bstr_t LicenseStatus;
    __declspec(property(get=GetLicenseKey,put=PutLicenseKey))
    _bstr_t LicenseKey;
    __declspec(property(get=GetLastReference,put=PutLastReference))
    long LastReference;
    __declspec(property(get=GetLogFile,put=PutLogFile))
    _bstr_t LogFile;
    __declspec(property(get=GetActivityFile,put=PutActivityFile))
    _bstr_t ActivityFile;
    __declspec(property(get=GetMaxClosedSessions,put=PutMaxClosedSessions))
    long MaxClosedSessions;
    __declspec(property(get=GetLastError))
    long LastError;
    __declspec(property(get=GetCertificateStore,put=PutCertificateStore))
    long CertificateStore;
    __declspec(property(get=GetListenIpv4,put=PutListenIpv4))
    _bstr_t ListenIpv4;
    __declspec(property(get=GetListenIpv6,put=PutListenIpv6))
    _bstr_t ListenIpv6;
    __declspec(property(get=GetIsStarted))
    VARIANT_BOOL IsStarted;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetVersion ( );
    _bstr_t GetBuild ( );
    _bstr_t GetModule ( );
    _bstr_t GetLicenseStatus ( );
    _bstr_t GetLicenseKey ( );
    void PutLicenseKey (
        _bstr_t LicenseKey );
    HRESULT SaveLicenseKey ( );
    _bstr_t GetLogFile ( );
    void PutLogFile (
        _bstr_t LogFile );
    _bstr_t GetActivityFile ( );
    void PutActivityFile (
        _bstr_t ActivityFile );
    long GetCertificateStore ( );
    void PutCertificateStore (
        long CertificateStore );
    _bstr_t GetListenIpv4 ( );
    void PutListenIpv4 (
        _bstr_t Ip );
    _bstr_t GetListenIpv6 ( );
    void PutListenIpv6 (
        _bstr_t Ip );
    HRESULT Sleep (
        long Ms );
    HRESULT Clear ( );
    long GetLastError ( );
    _bstr_t GetErrorDescription (
        long ErrorCode );
    HRESULT Start (
        long Port,
        long IpVersion,
        _bstr_t Certificate );
    HRESULT Stop ( );
    ISmppSessionPtr GetFirstSession ( );
    ISmppSessionPtr GetNextSession ( );
    ISmppSessionPtr GetSession (
        long Id );
    ISmppSessionPtr GetClosedSession ( );
    _bstr_t FindFirstMyServerCertificate ( );
    _bstr_t FindNextMyServerCertificate ( );
    _bstr_t FindFirstLocalIpAddress (
        long IpVersion );
    _bstr_t FindNextLocalIpAddress ( );
    long GetMaxClosedSessions ( );
    void PutMaxClosedSessions (
        long Val );
    VARIANT_BOOL GetIsStarted ( );
    long GetLastReference ( );
    void PutLastReference (
        long Val );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Version (
        /*[out,retval]*/ BSTR * Version ) = 0;
      virtual HRESULT __stdcall get_Build (
        /*[out,retval]*/ BSTR * Build ) = 0;
      virtual HRESULT __stdcall get_Module (
        /*[out,retval]*/ BSTR * Module ) = 0;
      virtual HRESULT __stdcall get_LicenseStatus (
        /*[out,retval]*/ BSTR * LicenseStatus ) = 0;
      virtual HRESULT __stdcall get_LicenseKey (
        /*[out,retval]*/ BSTR * LicenseKey ) = 0;
      virtual HRESULT __stdcall put_LicenseKey (
        /*[in]*/ BSTR LicenseKey ) = 0;
      virtual HRESULT __stdcall raw_SaveLicenseKey ( ) = 0;
      virtual HRESULT __stdcall get_LogFile (
        /*[out,retval]*/ BSTR * LogFile ) = 0;
      virtual HRESULT __stdcall put_LogFile (
        /*[in]*/ BSTR LogFile ) = 0;
      virtual HRESULT __stdcall get_ActivityFile (
        /*[out,retval]*/ BSTR * ActivityFile ) = 0;
      virtual HRESULT __stdcall put_ActivityFile (
        /*[in]*/ BSTR ActivityFile ) = 0;
      virtual HRESULT __stdcall get_CertificateStore (
        /*[out,retval]*/ long * CertificateStore ) = 0;
      virtual HRESULT __stdcall put_CertificateStore (
        /*[in]*/ long CertificateStore ) = 0;
      virtual HRESULT __stdcall get_ListenIpv4 (
        /*[out,retval]*/ BSTR * Ip ) = 0;
      virtual HRESULT __stdcall put_ListenIpv4 (
        /*[in]*/ BSTR Ip ) = 0;
      virtual HRESULT __stdcall get_ListenIpv6 (
        /*[out,retval]*/ BSTR * Ip ) = 0;
      virtual HRESULT __stdcall put_ListenIpv6 (
        /*[in]*/ BSTR Ip ) = 0;
      virtual HRESULT __stdcall raw_Sleep (
        long Ms ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall get_LastError (
        /*[out,retval]*/ long * LastError ) = 0;
      virtual HRESULT __stdcall raw_GetErrorDescription (
        /*[in]*/ long ErrorCode,
        /*[out,retval]*/ BSTR * Description ) = 0;
      virtual HRESULT __stdcall raw_Start (
        /*[in]*/ long Port,
        /*[in]*/ long IpVersion,
        /*[in]*/ BSTR Certificate ) = 0;
      virtual HRESULT __stdcall raw_Stop ( ) = 0;
      virtual HRESULT __stdcall raw_GetFirstSession (
        /*[out,retval]*/ struct ISmppSession * * Session ) = 0;
      virtual HRESULT __stdcall raw_GetNextSession (
        /*[out,retval]*/ struct ISmppSession * * Session ) = 0;
      virtual HRESULT __stdcall raw_GetSession (
        /*[in]*/ long Id,
        /*[out,retval]*/ struct ISmppSession * * Session ) = 0;
      virtual HRESULT __stdcall raw_GetClosedSession (
        /*[out,retval]*/ struct ISmppSession * * Session ) = 0;
      virtual HRESULT __stdcall raw_FindFirstMyServerCertificate (
        /*[out,retval]*/ BSTR * Certificate ) = 0;
      virtual HRESULT __stdcall raw_FindNextMyServerCertificate (
        /*[out,retval]*/ BSTR * Certificate ) = 0;
      virtual HRESULT __stdcall raw_FindFirstLocalIpAddress (
        /*[in]*/ long IpVersion,
        /*[out,retval]*/ BSTR * Ip ) = 0;
      virtual HRESULT __stdcall raw_FindNextLocalIpAddress (
        /*[out,retval]*/ BSTR * Ip ) = 0;
      virtual HRESULT __stdcall get_MaxClosedSessions (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_MaxClosedSessions (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall get_IsStarted (
        /*[out,retval]*/ VARIANT_BOOL * Val ) = 0;
      virtual HRESULT __stdcall get_LastReference (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall put_LastReference (
        /*[in]*/ long Val ) = 0;
};

struct __declspec(uuid("a0d488d4-c668-4346-9d44-3cd00832723e"))
SmppSession;
    // [ default ] interface ISmppSession

struct __declspec(uuid("fa1cdbe0-666b-430f-bcc5-838661432f76"))
TemplateWapPush;
    // [ default ] interface ITemplateWapPush

struct __declspec(uuid("54dd400b-f0d6-42af-964b-9f38cd57d8cc"))
ITemplateWapPush : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Geturl,put=Puturl))
    _bstr_t url;
    __declspec(property(get=GetDescription,put=PutDescription))
    _bstr_t Description;
    __declspec(property(get=GetSignalAction,put=PutSignalAction))
    long SignalAction;
    __declspec(property(get=GetData))
    _bstr_t Data;
    __declspec(property(get=GetLastError))
    long LastError;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t Geturl ( );
    void Puturl (
        _bstr_t pVal );
    _bstr_t GetDescription ( );
    void PutDescription (
        _bstr_t pVal );
    long GetSignalAction ( );
    void PutSignalAction (
        long pVal );
    _bstr_t GetData ( );
    long GetLastError ( );
    HRESULT Encode ( );
    _bstr_t GetErrorDescription (
        long lCode );
    HRESULT Clear ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_url (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_url (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Description (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SignalAction (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_SignalAction (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Data (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_LastError (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_Encode ( ) = 0;
      virtual HRESULT __stdcall raw_GetErrorDescription (
        /*[in]*/ long lCode,
        /*[out,retval]*/ BSTR * strDescription ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
};

struct __declspec(uuid("72b516d0-8b84-4b92-a297-474353a2c90a"))
TemplatevCard;
    // [ default ] interface ITemplatevCard

struct __declspec(uuid("fcb5dcc2-4ddd-465d-936f-40aebddd17c3"))
ITemplatevCard : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Geturl,put=Puturl))
    _bstr_t url;
    __declspec(property(get=GetTitle,put=PutTitle))
    _bstr_t Title;
    __declspec(property(get=GetEMail,put=PutEMail))
    _bstr_t EMail;
    __declspec(property(get=GetFax,put=PutFax))
    _bstr_t Fax;
    __declspec(property(get=GetPager,put=PutPager))
    _bstr_t Pager;
    __declspec(property(get=GetMobile,put=PutMobile))
    _bstr_t Mobile;
    __declspec(property(get=GetPhoneHome,put=PutPhoneHome))
    _bstr_t PhoneHome;
    __declspec(property(get=GetPhoneWork,put=PutPhoneWork))
    _bstr_t PhoneWork;
    __declspec(property(get=GetPhone,put=PutPhone))
    _bstr_t Phone;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetData))
    _bstr_t Data;
    __declspec(property(get=GetLastError))
    long LastError;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Clear ( );
    _bstr_t GetErrorDescription (
        long lError );
    _bstr_t Geturl ( );
    void Puturl (
        _bstr_t pVal );
    _bstr_t GetTitle ( );
    void PutTitle (
        _bstr_t pVal );
    _bstr_t GetEMail ( );
    void PutEMail (
        _bstr_t pVal );
    _bstr_t GetFax ( );
    void PutFax (
        _bstr_t pVal );
    _bstr_t GetPager ( );
    void PutPager (
        _bstr_t pVal );
    _bstr_t GetMobile ( );
    void PutMobile (
        _bstr_t pVal );
    _bstr_t GetPhoneHome ( );
    void PutPhoneHome (
        _bstr_t pVal );
    _bstr_t GetPhoneWork ( );
    void PutPhoneWork (
        _bstr_t pVal );
    _bstr_t GetPhone ( );
    void PutPhone (
        _bstr_t pVal );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t pVal );
    HRESULT Encode ( );
    _bstr_t GetData ( );
    long GetLastError ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall raw_GetErrorDescription (
        /*[in]*/ long lError,
        /*[out,retval]*/ BSTR * strDescription ) = 0;
      virtual HRESULT __stdcall get_url (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_url (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Title (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Title (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_EMail (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_EMail (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Fax (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Fax (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Pager (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Pager (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Mobile (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Mobile (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PhoneHome (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PhoneHome (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PhoneWork (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PhoneWork (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Phone (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Phone (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_Encode ( ) = 0;
      virtual HRESULT __stdcall get_Data (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_LastError (
        /*[out,retval]*/ long * pVal ) = 0;
};

struct __declspec(uuid("634b8464-5d45-4e0e-bcc7-eb04500bc159"))
DemoAccount;
    // [ default ] interface IDemoAccount

struct __declspec(uuid("231f4503-c639-479f-b799-4c9fce0bdf9c"))
IDemoAccount : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSystemId))
    _bstr_t SystemId;
    __declspec(property(get=GetPassword))
    _bstr_t Password;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetSystemId ( );
    _bstr_t GetPassword ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SystemId (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Password (
        /*[out,retval]*/ BSTR * pVal ) = 0;
};

//
// Wrapper method implementations
//

#include "G:\AxSms\Samples\Visual C++\Console Applications\Pager\Snpp\Release32\axsms.tli"

} // namespace AxSms

#pragma pack(pop)
